{"remainingRequest":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/babel-loader/lib/index.js!/Users/yuan/Documents/大唐广电/cf_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/yuan/Documents/大唐广电/cf_web/src/api/project/iot/IOT/ia.js","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/cf_web/src/api/project/iot/IOT/ia.js","mtime":1600927611051},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import request from '@/utils/request'; // 根据项目编码获取指标设备树\n\nexport function getTree(projectCode) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/tree\"),\n    method: 'get'\n  });\n} // 根据项目编码获取指标设备组树\n\nexport function getGroupTree(projectCode) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/groupTree\"),\n    method: 'get'\n  });\n} // 根据项目设备编码获取设备指标信息\n\nexport function getInfo(projectCode, deviceCode, query) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/\").concat(deviceCode),\n    method: 'get',\n    params: query\n  });\n} // 创建自定义指标信息\n\nexport function createInfo(projectCode, deviceCode, data, params) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/\").concat(deviceCode, \"/norm\"),\n    method: 'post',\n    data: data,\n    params: params\n  });\n} // 删除自定义指标信息\n\nexport function deleteInfo(projectCode, deviceCode, normCode, params) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/\").concat(deviceCode, \"/norm/\").concat(normCode),\n    method: 'delete',\n    params: params\n  });\n} // 粒度设置\n\nexport function granularitySetting(projectCode, deviceCode, normCode, data, params) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/\").concat(deviceCode, \"/granularity/\").concat(normCode),\n    method: 'patch',\n    data: data,\n    params: params\n  });\n} // 根据项目编码获取已物联设备\n\nexport function getDeviceByProjectCode(projectCode) {\n  return request({\n    url: \"iotIot/iot/\".concat(projectCode, \"/indexAllocation/device\"),\n    method: 'get'\n  });\n} // 根据项目编码，点位类型获取已物联的采集点，默认是累积量1\n\nexport function getCollect(projectCode, deviceCode) {\n  return request({\n    url: \"iotIot/iot/\".concat(projectCode, \"/indexAllocation/\").concat(deviceCode, \"/collect/1\"),\n    method: 'get'\n  });\n} // 公式编辑\n\nexport function patchFormula(projectCode, deviceCode, normCode, data, params) {\n  return request({\n    url: \"iotIot/iot/\".concat(projectCode, \"/indexAllocation/\").concat(deviceCode, \"/formula/\").concat(normCode),\n    method: 'patch',\n    data: data,\n    params: params\n  });\n} // 根据设备编号查询设备铭牌参数集合\n\nexport function getNamelpate(projectCode, deviceCode) {\n  return request({\n    url: \"iotIot/iot/\".concat(projectCode, \"/deviceModel/\").concat(deviceCode, \"/nameplate\"),\n    method: 'get'\n  });\n} // 新增设备组\n\nexport function createGroupNorm(projectCode, data) {\n  return request({\n    url: \"/iotIot/iot/\".concat(projectCode, \"/indexAllocation/groupNorm\"),\n    method: 'post',\n    data: data\n  });\n}",null]}