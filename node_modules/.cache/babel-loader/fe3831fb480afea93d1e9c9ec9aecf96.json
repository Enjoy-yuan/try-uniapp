{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js!/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/components/faultTypeSelect/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/components/faultTypeSelect/index.vue","mtime":1596610933438},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as api from '@/api/project/eas/database/faultType';\nexport default {\n  name: 'faultTypeSelectTree',\n  props: {\n    /* 配置项 */\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          rowId: 'rowId',\n          children: 'children',\n          label: 'faultName'\n        };\n      }\n    },\n\n    /* 初始值 */\n    value: {\n      type: String,\n      default: function _default() {\n        return undefined;\n      }\n    },\n\n    /* 可清空选项 */\n    clearable: {\n      type: Boolean,\n      default: function _default() {\n        return true;\n      }\n    },\n\n    /* 自动收起 */\n    accordion: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      // 数据默认字段\n      defaultProps: {\n        rowId: 'rowId',\n        // 父级唯一标识\n        children: 'children',\n        label: 'typeName'\n      },\n      // 数据列表\n      options: [],\n      valueId: this.value,\n      // 初始值\n      valueTitle: '',\n      defaultExpandedKey: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    api.queryRecords(this.listQuery).then(function (res) {\n      _this.options = _this.buildTree(res.data, 'faultCode', 'preFaultCode');\n    });\n    this.initHandle();\n  },\n  methods: {\n    // 初始化值\n    initHandle: function initHandle() {\n      if (this.valueId) {\n        this.valueTitle = this.$refs.selectTree.getNode(this.valueId).data[this.props.label]; // 初始化显示\n\n        this.$refs.selectTree.setCurrentKey(this.valueId); // 设置默认选中\n\n        this.defaultExpandedKey = [this.valueId]; // 设置默认展开\n      }\n\n      this.$nextTick(function () {\n        var scrollWrap = document.querySelectorAll('.el-scrollbar .el-select-dropdown__wrap')[0];\n        var scrollBar = document.querySelectorAll('.el-scrollbar .el-scrollbar__bar');\n        scrollWrap.style.cssText = 'margin: 0px; max-height: none; overflow: hidden;';\n        scrollBar.forEach(function (ele) {\n          return ele.style.width = 0;\n        });\n      });\n    },\n    // getValue(val) {\n    //     this.$emit('change', val)\n    // },\n    // 切换选项\n    handleNodeClick: function handleNodeClick(node) {\n      this.valueTitle = node[this.props.label];\n      this.valueId = node[this.props.value];\n      this.$emit('getValue', node); // 向父级提交input事件，相当于绑定父级v-model的值\n\n      this.$emit('input', node.faultCode);\n    },\n    // 清除选中\n    clearHandle: function clearHandle() {\n      this.valueTitle = '';\n      this.valueId = null;\n      this.clearSelected();\n      this.$emit('getValue', null);\n      this.$emit('input', undefined);\n    },\n\n    /* 清空选中样式 */\n    clearSelected: function clearSelected() {\n      var allNode = document.querySelectorAll('#tree-option .el-tree-node');\n      allNode.forEach(function (element) {\n        return element.classList.remove('is-current');\n      });\n    },\n    buildTree: function buildTree(array, id, parent_id) {\n      // 创建临时对象\n      var temp = {}; // 创建需要返回的树形对象\n\n      var tree = []; // 先遍历数组，将数组的每一项添加到temp对象中\n\n      for (var i in array) {\n        temp[array[i][id]] = array[i];\n      } // 遍历temp对象，将当前子节点与父节点建立连接\n\n\n      for (var _i in temp) {\n        // 判断是否是根节点下的项\n        if (temp[_i][parent_id] !== '0') {\n          if (!temp[temp[_i][parent_id]].children) {\n            temp[temp[_i][parent_id]].children = [];\n          }\n\n          temp[temp[_i][parent_id]].children.push(temp[_i]);\n        } else {\n          tree.push(temp[_i]);\n        }\n      }\n\n      return tree;\n    }\n  }\n};",null]}