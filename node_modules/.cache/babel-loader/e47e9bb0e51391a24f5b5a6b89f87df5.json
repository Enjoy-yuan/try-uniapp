{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js!/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/priceManage/actuarialPrice/actuarialDetailCost/tab/tabYCLcost.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/priceManage/actuarialPrice/actuarialDetailCost/tab/tabYCLcost.vue","mtime":1596610933677},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'tabYCLcost',\n  props: ['tabYCLcostList'],\n  data: function data() {\n    return {\n      type: null,\n      tableData: []\n    };\n  },\n  watch: {\n    tabYCLcostList: function tabYCLcostList(val) {\n      if (this.type == 'add') {\n        var arr = JSON.parse(JSON.stringify(val));\n        arr.forEach(function (i) {\n          i.actuarialUnitPrice = i.unitPrice ? i.unitPrice : 0; //单价精算\n\n          i.actuarialConsumptionQuota = i.consumptionQuota ? i.consumptionQuota : 0; //定额精算\n\n          i.actuarialNetWeight = i.netWeight ? i.netWeight : 0; //净重精算\n\n          i.actuarialRecoveredUnitPrice = i.recoveredUnitPrice ? i.recoveredUnitPrice : 0; //回收单价精算\n\n          i.actuarialRejectRate = i.rejectRate ? i.rejectRate : 0; //废品率价精算\n\n          i.actuarialSubtotalCost = i.actuarialUnitPrice * i.actuarialConsumptionQuota || 0;\n          i.actuarialRecyclableWeight = (i.actuarialConsumptionQuota - i.actuarialNetWeight) * 0.98 || 0;\n          i.actuarialRecoveryValue = i.actuarialRecyclableWeight * i.actuarialRecoveredUnitPrice || 0;\n          i.actuarialWasteLoss = i.actuarialUnitPrice * i.actuarialNetWeight * i.actuarialRejectRate || 0;\n        });\n        this.tableData = arr;\n      } else {\n        var _arr = JSON.parse(JSON.stringify(val));\n\n        this.tableData = _arr;\n      }\n    }\n  },\n  methods: {\n    checkValue: function checkValue(val) {\n      if (isNaN(val) || val == Infinity) {\n        return undefined;\n      } else {\n        if (val.toString().indexOf('.') !== -1) {\n          val = parseFloat(val).toFixed(2);\n        }\n\n        return val;\n      }\n    },\n    getSummaries: function getSummaries(param) {\n      var _this = this;\n\n      var columns = param.columns,\n          data = param.data;\n      var sums = [];\n      console.log(data, 'columns');\n      columns.forEach(function (column, index) {\n        if (index === 0) {\n          sums[index] = '总计';\n          return;\n        }\n\n        var values = data.map(function (item) {\n          return Number(item[column.property]);\n        });\n\n        if (!values.every(function (value) {\n          return isNaN(value);\n        })) {\n          if (column.property == 'subpartName' || column.property == 'actuarialUnitPrice' || column.property == 'actuarialConsumptionQuota' || column.property == 'actuarialSubtotalCost' || column.property == 'actuarialSubtotalCost' || column.property == 'actuarialRecyclableWeight' || column.property == 'actuarialRecoveredUnitPrice' || column.property == 'actuarialRecoveryValue' || column.property == 'actuarialRejectRate' || column.property == 'actuarialWasteLoss') {\n            sums[index] = values.reduce(function (prev, curr) {\n              var value = Number(curr);\n\n              if (!isNaN(value)) {\n                return prev + curr;\n              } else {\n                return prev;\n              }\n            }, 0);\n          } else {\n            sums[index] = '--';\n          } // sums[index] += ' 元'\n\n        } else {\n          sums[index] = 0;\n        }\n      });\n      columns.forEach(function (val, index) {\n        //小计精算\n        if (val.property == 'actuarialSubtotalCost') {\n          _this.$store.dispatch('getData/getData', sums[index]);\n        } //回收价值精算\n\n\n        if (val.property == 'actuarialRecoveryValue') {\n          _this.$store.dispatch('getData/getDataRecoveryValue', sums[index]);\n        } //废品损失精算\n\n\n        if (val.property == 'actuarialWasteLoss') {\n          _this.$store.dispatch('getData/getDataWasteLoss', sums[index]);\n        }\n      });\n      return sums;\n    },\n    //计算小计\n    getPriceCost: function getPriceCost(row) {\n      var _this2 = this;\n\n      this.tableData.forEach(function (i) {\n        if (i.rowId == row.rowId) {\n          i.actuarialSubtotalCost = _this2.checkValue(i.actuarialUnitPrice * i.actuarialConsumptionQuota);\n          i.actuarialRecyclableWeight = _this2.checkValue((i.actuarialConsumptionQuota - i.actuarialNetWeight) * 0.98);\n          i.actuarialRecoveryValue = _this2.checkValue(i.actuarialRecyclableWeight * i.actuarialRecoveredUnitPrice);\n          i.actuarialWasteLoss = _this2.checkValue(i.actuarialUnitPrice * i.actuarialNetWeight * i.actuarialRejectRate);\n          console.log(i.rowId, i.actuarialWasteLoss, 'mmmm');\n        }\n      });\n    },\n    initData: function initData(val) {\n      this.type = val;\n      this.tableData = [];\n    }\n  }\n};",null]}