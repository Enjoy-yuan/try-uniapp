{"remainingRequest":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/babel-loader/lib/index.js!/Users/yuan/Documents/大唐广电/cf_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/yuan/Documents/大唐广电/cf_web/src/utils/myFun.js","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/cf_web/src/utils/myFun.js","mtime":1601171287242},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _typeof from \"/Users/yuan/Documents/\\u5927\\u5510\\u5E7F\\u7535/cf_web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/web.dom.iterable\";\nimport resource from '@/utils/resource';\nvar myFun = {\n  single_table_height: 274,\n  //单表高度计算\n  tree_height: 125,\n  //左边树高度计算\n  //编码转化成名称\n  codeToName: function codeToName(res, options, key) {\n    if (options && options.length) {\n      if (res.list) {\n        var _loop = function _loop(i) {\n          res.list.forEach(function (item, index) {\n            if (options[i] && options[i].length) {\n              options[i].forEach(function (option) {\n                if (option.dictItemKey == item[key[i]]) {\n                  res.list[index][key[i] + 'CN'] = option.dictItemValue;\n                }\n              });\n            }\n          });\n        };\n\n        for (var i = 0; i < key.length; i++) {\n          _loop(i);\n        }\n      } else {\n        var _loop2 = function _loop2(i) {\n          res.forEach(function (item, index) {\n            if (options[i] && options[i].length) {\n              options[i].forEach(function (option) {\n                if (option.dictItemKey == item[key[i]]) {\n                  res[index][key[i] + 'CN'] = option.dictItemValue;\n                }\n              });\n            }\n          });\n        };\n\n        for (var i = 0; i < key.length; i++) {\n          _loop2(i);\n        }\n      }\n\n      return res;\n    }\n  },\n  // 单个对象转换\n  codeToNameS: function codeToNameS(res, options, key) {\n    var _loop3 = function _loop3(i) {\n      options[i].forEach(function (item) {\n        if (item.dictItemKey == res[key[i]]) {\n          res[key[i] + 'CN'] = item.dictItemValue;\n        }\n      });\n    };\n\n    for (var i = 0; i < key.length; i++) {\n      _loop3(i);\n    }\n\n    return res;\n  },\n  transCodeToName: function transCodeToName(res, options, key) {\n    var data = res;\n\n    if (res.list) {\n      data = res.list;\n    } else {\n      data = res;\n    }\n\n    var _loop4 = function _loop4(i) {\n      data.forEach(function (item, index) {\n        if (options[i] && options[i].length) {\n          options[i].forEach(function (option) {\n            if (!Array.isArray(key[i])) {\n              if (option.dictItemKey == item[key[i]]) {\n                data[index][key[i] + 'CN'] = option.dictItemValue;\n              }\n            } else {\n              if (option[key[i][1]] == item[key[i][0]]) {\n                data[index][key[i][0] + 'CN'] = option[key[i][2]];\n              }\n            }\n          });\n        }\n      });\n    };\n\n    for (var i = 0; i < key.length; i++) {\n      _loop4(i);\n    }\n\n    return res;\n  },\n  //srm编码转化成名称\n  srmCodeToName: function srmCodeToName(res, options, key) {\n    if (options && options.length) {\n      var _loop5 = function _loop5(i) {\n        res.forEach(function (item, index) {\n          if (options[i] && options[i].length) {\n            options[i].forEach(function (option) {\n              if (option.dictItemKey == item[key[i]]) {\n                res[index][key[i] + 'CN'] = option.dictItemValue;\n              }\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < key.length; i++) {\n        _loop5(i);\n      }\n\n      return res;\n    }\n  },\n  getTreehHeight: function getTreehHeight() {\n    return document.body.offsetHeight - myFun.tree_height + 'px';\n  },\n  getSingleTbHeight: function getSingleTbHeight() {\n    var wh = document.body.offsetHeight;\n    var fch = 0;\n\n    if (document.getElementsByClassName('filter-container')[0]) {\n      fch = document.getElementsByClassName('filter-container')[0].offsetHeight;\n    }\n\n    var th = wh - myFun.single_table_height - fch + 48;\n    return th;\n  },\n  // 关系型数据转化为树结构数据\n  reDataToTree: function reDataToTree(data) {\n    var bool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var userResource = undefined;\n\n    if (bool) {\n      userResource = data.filter(function (v) {\n        return resource[v.url];\n      });\n    } else {\n      userResource = data;\n    }\n\n    var map = {};\n    var val = []; //生成数据对象集合\n\n    userResource.forEach(function (it) {\n      map[it.rowId] = it;\n    }); //生成结果集\n\n    userResource.forEach(function (it) {\n      var parent = map[it.parentId];\n\n      if (parent) {\n        if (!Array.isArray(parent.children)) parent.children = [];\n        parent.children.push(it);\n      } else {\n        val.push(it);\n      }\n    });\n    return val;\n  },\n  // 树结构数据添加根目录\n  addTreeRoot: function addTreeRoot(data) {\n    var bool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var datatrees = [{\n      catalogName: '根目录',\n      organizationName: '根目录',\n      rowId: 0,\n      children: myFun.reDataToTree(data, bool)\n    }];\n    return datatrees;\n  },\n  //取出两个数组的相同元素\n  getArrEqual: function getArrEqual(arr1, arr2) {\n    var newArr = [];\n\n    for (var i = 0; i < arr2.length; i++) {\n      for (var j = 0; j < arr1.length; j++) {\n        if (arr1[j] === arr2[i]) {\n          newArr.push(arr1[j]);\n        }\n      }\n    }\n\n    return newArr;\n  },\n  //取出两个数组的不同元素\n  getArrDifference: function getArrDifference(arr1, arr2) {\n    return arr1.concat(arr2).filter(function (v, i, arr) {\n      return arr.indexOf(v) === arr.lastIndexOf(v);\n    });\n  },\n  parseTime: function parseTime(time, cFormat) {\n    if (arguments.length === 0) {\n      return null;\n    }\n\n    var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n    var date;\n\n    if (_typeof(time) === 'object') {\n      date = time;\n    } else {\n      if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n        time = parseInt(time);\n      }\n\n      if (typeof time === 'number' && time.toString().length === 10) {\n        time = time * 1000;\n      }\n\n      date = new Date(time);\n    }\n\n    var formatObj = {\n      y: date.getFullYear(),\n      m: date.getMonth() + 1,\n      d: date.getDate(),\n      h: date.getHours(),\n      i: date.getMinutes(),\n      s: date.getSeconds(),\n      a: date.getDay() // eslint-disable-next-line\n\n    };\n    var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, function (result, key) {\n      var value = formatObj[key]; // Note: getDay() returns 0 on Sunday\n\n      if (key === 'a') {\n        return ['日', '一', '二', '三', '四', '五', '六'][value];\n      }\n\n      if (result.length > 0 && value < 10) {\n        value = '0' + value;\n      }\n\n      return value || 0;\n    }); // eslint-disable-next-line\n\n    return time_str;\n  },\n  // 打印\n  json2excel: function json2excel(tableJson, filenames, autowidth, bookTypes) {\n    import('@/vendor/Export2ExcelS').then(function (excel) {\n      var tHeader = [];\n      var dataArr = [];\n      var sheetnames = [];\n\n      for (var i in tableJson) {\n        tHeader.push(tableJson[i].tHeader);\n        dataArr.push(myFun.formatJson(tableJson[i].filterVal, tableJson[i].tableDatas));\n        sheetnames.push(tableJson[i].sheetName);\n      }\n\n      excel.export_json_to_excel({\n        header: tHeader,\n        data: dataArr,\n        sheetname: sheetnames,\n        filename: filenames,\n        autoWidth: autowidth,\n        bookType: bookTypes\n      });\n    });\n  },\n  // 数据过滤，时间过滤\n  formatJson: function formatJson(filterVal, jsonData) {\n    return jsonData.map(function (v) {\n      return filterVal.map(function (j) {\n        if (j === 'timestamp') {\n          return myFun.parseTime(v[j]);\n        } else {\n          return v[j];\n        }\n      });\n    });\n  },\n  // 关系型数据转化为树结构数据\n  reDataToWorkTree: function reDataToWorkTree(dataw, identity) {\n    var datatrees = [];\n    var treeList = dataw;\n    var map = {};\n    var val = []; //生成数据对象集合\n\n    treeList.forEach(function (item) {\n      if (item[identity] !== '') {\n        map[item.id] = item;\n      } else {\n        datatrees.push(item);\n      }\n    }); //生成结果集\n\n    dataw.forEach(function (item) {\n      if (item[identity] !== '') {\n        var parent = map[item[identity]];\n\n        if (parent) {\n          if (!Array.isArray(parent.children)) parent.children = [];\n          parent.children.push(item);\n        } else {\n          val.push(item);\n        }\n      }\n    });\n    datatrees[0].children = val;\n    return datatrees;\n  },\n  // 树结构数据添加根目录\n  addRoot: function addRoot(data, id, parent_id, name) {\n    var datatrees = [{\n      faultName: name ? name : '根目录',\n      className: name ? name : '根目录',\n      rowId: 0,\n      children: myFun.buildTree(data, id, parent_id)\n    }];\n    return datatrees;\n  },\n  buildTree: function buildTree(array, id, parent_id) {\n    // 创建临时对象\n    var temp = {}; // 创建需要返回的树形对象\n\n    var tree = []; // 先遍历数组，将数组的每一项添加到temp对象中\n\n    for (var i in array) {\n      temp[array[i][id]] = array[i];\n    } // 遍历temp对象，将当前子节点与父节点建立连接\n\n\n    for (var _i in temp) {\n      // 判断是否是根节点下的项\n      if (temp[_i][parent_id]) {\n        if (!temp[temp[_i][parent_id]].children) {\n          temp[temp[_i][parent_id]].children = [];\n        }\n\n        temp[temp[_i][parent_id]].children.push(temp[_i]);\n      } else {\n        tree.push(temp[_i]);\n      }\n    }\n\n    return tree;\n  }\n};\nexport default myFun;",null]}