{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js!/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/myProject/DB.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/myProject/DB.vue","mtime":1597135840655},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { queryDeviceBind, updateAllDeliver } from \"@/api/project/iot/IOT/db\";\nimport timeData from \"./DBTabs/timeData\";\nimport warningEvents from \"./DBTabs/warningEvents\";\nimport accountInfo from \"./DBTabs/accountInfo\";\nexport default {\n  name: \"DB\",\n  props: ['code', 'row'],\n  components: {\n    timeData: timeData,\n    warningEvents: warningEvents,\n    accountInfo: accountInfo\n  },\n  watch: {\n    name: function name(val) {\n      var arr = this.list.filter(function (res) {\n        return res.gatewayDeviceName == val;\n      });\n      this.itemData = arr[0];\n    }\n  },\n  data: function data() {\n    return {\n      list: null,\n      activeName: 'timeData',\n      name: undefined,\n      itemData: undefined,\n      subList: null,\n      optionData: null,\n      expandedKeys: null,\n      //默认展开\n      checkedKeys: null,\n      // 默认勾选\n      props: {\n        rowId: 'rowId',\n        label: 'gatewayDeviceName',\n        children: 'children'\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    //获取表格数据\n    getList: function getList() {\n      var _this = this;\n\n      queryDeviceBind(this.code).then(function (response) {\n        _this.list = response.data;\n\n        var treeData = _this.buildTree(response.data, 'rowId', 'parentId');\n\n        _this.expandedKeys = treeData.expandedKeys;\n        _this.checkedKeys = treeData.checkedKeys;\n        _this.optionData = treeData.tree;\n        _this.name = treeData.checkedKeyName;\n      });\n    },\n    // 获取选中的节点\n    getCurrentNode: function getCurrentNode(val) {\n      this.$refs.selectTree.setCheckedKeys([val.rowId]);\n      this.name = val[this.props.label];\n    },\n    // 点击节点时候\n    nodeClick: function nodeClick(val) {\n      if (val.parentId) {\n        this.$refs.selectTree.setCheckedKeys([val.rowId]);\n        this.name = val[this.props.label];\n      } else {\n        return;\n      }\n    },\n    // 获取实时数据需要批量交付的数据\n    getSubList: function getSubList(data) {\n      this.subList = data;\n    },\n    handleCreate: function handleCreate() {\n      var _this2 = this;\n\n      this.$confirm('此操作将交付全部数据, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        var list = _this2.subList.filter(function (i) {\n          return i.deliveryState == '未交付';\n        });\n\n        var data = list.map(function (i) {\n          return i.pointCode;\n        });\n        updateAllDeliver(_this2.code, _this2.itemData.gatewayCode, _this2.itemData.deviceCode, data).then(function () {\n          _this2.$refs.timeData.getList();\n\n          _this2.$message({\n            title: '成功',\n            message: '交付成功',\n            type: 'success',\n            duration: 2000\n          });\n        });\n      }).catch(function () {\n        _this2.$message({\n          type: 'info',\n          message: '已取消交付'\n        });\n      });\n    },\n    buildTree: function buildTree(array, id, parent_id) {\n      var isExpandedKey = true;\n      var isCheckedKeys = true; // 创建临时对象\n\n      var temp = {}; // 创建需要返回的树形对象\n\n      var tree = [];\n      var expandedKeys = [];\n      var checkedKeys = [];\n      var checkedKeyName = undefined; // 先遍历数组，将数组的每一项添加到temp对象中\n\n      for (var i in array) {\n        temp[array[i][id]] = array[i];\n      } // 遍历temp对象，将当前子节点与父节点建立连接\n\n\n      for (var _i in temp) {\n        // 判断是否是根节点下的项\n        if (temp[_i][parent_id]) {\n          if (!temp[temp[_i][parent_id]].children) {\n            temp[temp[_i][parent_id]].children = [];\n          }\n\n          if (isCheckedKeys) {\n            checkedKeys.push(temp[_i].rowId);\n            checkedKeyName = temp[_i].gatewayDeviceName;\n            expandedKeys.push(temp[_i].rowId);\n            isCheckedKeys = !isCheckedKeys;\n          }\n\n          temp[temp[_i][parent_id]].children.push(temp[_i]);\n        } else {\n          var parTemp = temp[_i];\n          parTemp.gatewayDeviceName = temp[_i].gatewayName;\n          parTemp.disabled = true; //禁用\n\n          if (isExpandedKey) {\n            expandedKeys.push(temp[_i].rowId);\n            isExpandedKey = !isExpandedKey;\n          }\n\n          tree.push(parTemp);\n        }\n      }\n\n      var treeData = {\n        expandedKeys: expandedKeys,\n        checkedKeys: checkedKeys,\n        tree: tree,\n        checkedKeyName: checkedKeyName\n      };\n      return treeData;\n    }\n  }\n};",null]}