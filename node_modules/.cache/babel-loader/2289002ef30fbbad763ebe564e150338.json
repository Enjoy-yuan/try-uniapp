{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js!/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTIA/components/equipment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTIA/components/equipment.vue","mtime":1597393596387},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _objectSpread from \"/Users/yuan/Documents/\\u5927\\u5510\\u5E7F\\u7535/dt-web/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Pagination from '@/components/Pagination';\nimport * as api from '@/api/project/iot/IOT/ia.js';\nimport { queryProjects } from '@/api/project/iot/IOT/project';\nimport { mapState } from 'vuex';\nimport throttle from 'lodash/throttle';\nexport default {\n  name: 'equipment',\n  components: {\n    Pagination: Pagination\n  },\n  data: function data() {\n    return {\n      treeData: [],\n      // 树型菜单\n      theight: 0,\n      // 表格⾼度\n      titleName: '',\n      // 点击的标题名\n      listQuery: {\n        currentPage: 1,\n        pageSize: 15\n      },\n      tableData: [],\n      // 表格数据\n      total: 0,\n      // 总条数\n      listLoading: false,\n      // 表格加载动画\n      defaultProps: {\n        // 树型结构属性\n        children: 'children',\n        label: 'name'\n      },\n      contentStyleObj: {\n        // 树型⾼度\n        height: ''\n      },\n      projectCode: '',\n      // 项⽬代码编号\n      projectList: [],\n      // 项⽬数组\n      deviceCode: '',\n      // 菜单点击编码\n      normCode: '',\n      // 表格行编号\n      rowData: '',\n      // 点击当前行数据\n      dialogFormVisible: false,\n      // 弹框是否显示\n      dialogFormVisible2: false,\n      // 粒度设置弹框\n      temp: {\n        // 弹框输入框数据\n        normName: '',\n        normCode: '',\n        company: '',\n        indexDescription: ''\n      },\n      // 第二个弹框数据\n      temp2: {\n        minuteFifteen: '',\n        minuteThirty: '',\n        hour: '',\n        day: '',\n        month: '',\n        year: '',\n        dayDetail: '',\n        monthDetail: ''\n      },\n      days: [],\n      // 时间数组\n      months: [],\n      // 日期数组\n      rules: {\n        // 规则校验\n        normName: [{\n          required: true,\n          message: '请输入指标名称',\n          trigger: 'blur'\n        }],\n        normCode: [{\n          required: true,\n          message: '请输入指标编码',\n          trigger: 'blur'\n        }],\n        company: [{\n          required: true,\n          message: '请输入单位',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: _objectSpread({}, mapState({\n    iot_is_standard: function iot_is_standard(state) {\n      return state.iotDict.iot_is_standard;\n    },\n    iot_norm_company: function iot_norm_company(state) {\n      return state.iotDict.iot_norm_company;\n    }\n  })),\n  mounted: function mounted() {\n    var _this = this;\n\n    // 循环造数据\n    for (var i = 1; i <= 24; i++) {\n      this.days.push(i + '时');\n    }\n\n    for (var _i = 1; _i <= 31; _i++) {\n      this.months.push(_i + '号');\n    }\n\n    this.$store.dispatch('iotDict/getDicData', ['iot_is_standard', 'iot_norm_company']);\n    this.getHeight();\n    this.setTableHeight();\n    this.setTreeHeight(); //表格⾼度⾃适应\n\n    window.onresize = function () {\n      _this.setTableHeight();\n\n      _this.setTreeHeight();\n    }; // 若存在projectCode则赋值，否则取接⼝返回的第⼀个projectCode\n\n\n    queryProjects().then(function (res) {\n      _this.projectList = res.data;\n\n      if (_this.$route.params.code) {\n        _this.projectCode = _this.$route.params.code;\n      } else {\n        _this.projectCode = res.data[0].projectCode;\n      }\n\n      _this.getTreeData();\n    });\n  },\n  methods: {\n    getCompany: function getCompany(val) {\n      var arr = this.iot_norm_company.filter(function (i) {\n        return i.dictItemKey == val;\n      });\n      this.temp.companyName = arr[0].dictItemValue;\n    },\n    // 清空数据并打开自定义指标弹框\n    openDialog: function openDialog() {\n      this.temp = {\n        normName: '',\n        normCode: '',\n        company: '',\n        indexDescription: ''\n      };\n      this.dialogFormVisible = true;\n    },\n    // 关闭自定义指标弹框\n    closeDialog: function closeDialog() {\n      this.dialogFormVisible = false;\n    },\n    // 清空数据，打开粒度弹框\n    openDialogGranularity: function openDialogGranularity(index, row) {\n      var _this2 = this;\n\n      this.temp2 = {\n        minuteFifteen: '',\n        minuteThirty: '',\n        hour: '',\n        day: '',\n        month: '',\n        year: '',\n        dayDetail: '',\n        monthDetail: ''\n      };\n      this.normCode = row.normCode;\n      this.rowData = row;\n\n      if (row.dateDefinition) {\n        this.temp2.day = '自定义';\n        this.temp2.dayDetail = row.dateDefinition.split('-')[0];\n      }\n\n      if (row.monthDefinition) {\n        this.temp2.day = '自定义';\n        this.temp2.dayDetail = row.monthDefinition.split('-')[0];\n      }\n\n      if (this.rowData.calculationGranularity) {\n        this.rowData.calculationGranularity.split(',').map(function (item) {\n          if (item === '15分') {\n            _this2.temp2.minuteFifteen = true;\n          }\n\n          if (item === '30分') {\n            _this2.temp2.minuteThirty = true;\n          }\n\n          if (item === '1Hour') {\n            _this2.temp2.hour = true;\n          }\n\n          if (item === '1Day') {\n            _this2.temp2.day = '自然天';\n          }\n\n          if (item === '1Month') {\n            _this2.temp2.month = '自然月';\n          }\n\n          if (item === '1Year') {\n            _this2.temp2.year = true;\n          }\n        });\n      }\n\n      this.dialogFormVisible2 = true;\n    },\n    // 关闭粒度设置弹框\n    closeDialogGranularity: function closeDialogGranularity() {\n      this.dialogFormVisible2 = false;\n    },\n    // 粒度设置\n    createGranularity: function createGranularity() {\n      var _this3 = this;\n\n      if (this.temp2.day === '自定义' && this.temp2.dayDetail === '') {\n        this.$message.error('请选择天级自定义时间');\n      } else if (this.temp2.month === '自定义' && this.temp2.monthDetail === '') {\n        this.$message.error('请选择月级自定义月份');\n      } else {\n        var granularity = [];\n\n        if (this.temp2.minuteFifteen) {\n          granularity.push('15分');\n        }\n\n        if (this.temp2.minuteThirty) {\n          granularity.push('30分');\n        }\n\n        if (this.temp2.hour) {\n          granularity.push('1Hour');\n        }\n\n        if (this.temp2.day === '自然天') {\n          granularity.push('1Day');\n        }\n\n        if (this.temp2.month === '自然月') {\n          granularity.push('1Month');\n        }\n\n        if (this.temp2.year) {\n          granularity.push('1Year');\n        }\n\n        var data = {\n          granularity: granularity.join(),\n          dateDefinition: this.temp2.day === '自定义' ? this.temp2.dayDetail + '-' + this.temp2.dayDetail : '',\n          monthDefinition: this.temp2.month === '自定义' ? this.temp2.monthDetail + '-' + this.temp2.monthDetail : ''\n        };\n        api.granularitySetting(this.projectCode, this.deviceCode, this.normCode, data).then(function () {\n          _this3.closeDialogGranularity();\n\n          _this3.getList();\n        });\n      }\n    },\n    // 添加信息\n    createInfo: throttle(function () {\n      var _this4 = this;\n\n      this.$refs.tempRef.validate(function (valid) {\n        if (valid) {\n          api.createInfo(_this4.projectCode, _this4.deviceCode, _this4.temp).then(function () {\n            _this4.getList();\n\n            _this4.closeDialog();\n\n            _this4.$notify({\n              title: '成功',\n              message: '添加成功',\n              type: 'success',\n              duration: 2000\n            });\n          });\n        } else {\n          return false;\n        }\n      });\n    }, 2000, {\n      leading: true,\n      trailing: false\n    }),\n    // 删除信息\n    deleteInfo: function deleteInfo(index, row) {\n      var _this5 = this;\n\n      this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        api.deleteInfo(_this5.projectCode, _this5.deviceCode, row.normCode).then(function () {\n          _this5.$message({\n            title: '成功',\n            message: '删除成功',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this5.getList();\n        });\n      }).catch(function () {\n        _this5.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    // 递归取第一个数据\n    getData: function getData(arr) {\n      if (arr[0].children) {\n        this.getData(arr[0].children);\n      } else {\n        this.handleNodeClick(arr[0]);\n      }\n    },\n    getTreeData: function getTreeData(projectCode) {\n      var _this6 = this;\n\n      // 清空数据\n      this.treeData = [];\n      this.titleName = '';\n      this.tableData = [];\n      this.total = 0;\n      this.deviceCode = ''; // 下拉框选中重新赋值\n\n      if (projectCode) {\n        this.projectCode = projectCode;\n      } //获取树数据\n\n\n      api.getTree(this.projectCode).then(function (response) {\n        if (response.data.length !== 0) {\n          var temp = response.data;\n          response.data.map(function (item, index) {\n            temp[index].rowId = item.code;\n            temp[index].parentId = item.parentCode;\n          });\n          _this6.treeData = _this6.$myFun.addTreeRoot(temp);\n\n          _this6.getData(_this6.treeData);\n\n          _this6.treeData[0].name = '根⽬录';\n        }\n      });\n    },\n    //表格⾼度计算\n    setTableHeight: function setTableHeight() {\n      this.theight = this.$myFun.getSingleTbHeight();\n    },\n    //树⾼度设置\n    setTreeHeight: function setTreeHeight() {\n      this.contentStyleObj.height = this.$myFun.getTreehHeight();\n    },\n    //树⾼度设置\n    getHeight: function getHeight() {\n      this.contentStyleObj.height = document.body.scrollHeight - 110 + 'px';\n    },\n    // 树型菜单点击触发\n    handleNodeClick: function handleNodeClick(data) {\n      if (data.deviceCode) {\n        this.titleName = data.name;\n        this.deviceCode = data.deviceCode;\n        this.getList();\n      }\n    },\n    // 获取表格数据\n    getList: function getList() {\n      var _this7 = this;\n\n      this.listLoading = true;\n      api.getInfo(this.projectCode, this.deviceCode, this.listQuery).then(function (res) {\n        var options = [_this7.iot_is_standard];\n        res.data.list = _this7.$myFun.codeToName(res.data.list, options, ['isStandard']);\n        _this7.tableData = res.data.list;\n        _this7.total = res.data.pages.count;\n        setTimeout(function () {\n          _this7.listLoading = false;\n        }, 1.5 * 100);\n      });\n    }\n  }\n};",null]}