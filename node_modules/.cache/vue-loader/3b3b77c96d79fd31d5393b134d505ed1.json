{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/EL/equipmentRequisition/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/EL/equipmentRequisition/index.vue","mtime":1596610933381},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from '@/api/project/eas/el/equipmentRequisition'\nimport * as api1 from '@/api/project/eas/database/supplier'\nimport { queryMainlist } from '@/api/project/eas/el/equipmentSpotCheck'\nimport Pagination from '@/components/Pagination'\nimport addMain from './dialog/addMain'\nimport addItems from './dialog/addItems'\nimport arrival from './dialog/arrival'\nimport entryAccount from './dialog/entryAccount'\nimport { mapState } from 'vuex'\nimport caiGou from '@/components/Select/xtpt/caigou' //下拉组件\nimport { DT_ORG_TYPE } from '@/utils/constant'\nimport { getDomainCode, getDomainCodeName } from '@/utils/auth'\nexport default {\n    name: 'equipmentRequisition',\n    components: {\n        Pagination,\n        addMain,\n        addItems,\n        arrival,\n        entryAccount,\n        caiGou\n    },\n    data() {\n        return {\n            list: [],\n            listSub: [],\n            DT_ORG_TYPE: DT_ORG_TYPE,\n            total: 0,\n            theight: 0, //表格高度\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15\n            },\n            tableKey: [0, 1],\n            rangeDate: null,\n            manufacturersName: null\n        }\n    },\n    filters: {\n        splitState: function(e) {\n            if (e === '1') {\n                return '是'\n            } else {\n                return '否'\n            }\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_requisitions_state: state => state.eamDict.dt_requisitions_state,\n            dt_product_order_resource: state =>\n                state.eamDict.dt_product_order_resource,\n            dt_work_order_split: state => state.eamDict.dt_work_order_split\n        })\n    },\n    mounted() {\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n        this.$store.dispatch('eamDict/getDicData', [\n            'dt_requisitions_state',\n            'dt_product_order_resource',\n            'dt_work_order_split'\n        ])\n    },\n    watch: {\n        rangeDate(value) {\n            if (value) {\n                this.listQuery.requisitionsTimeStart = value[0]\n                this.listQuery.requisitionsTimeEnd = value[1]\n            } else {\n                this.listQuery.requisitionsTimeStart = undefined\n                this.listQuery.requisitionsTimeEnd = undefined\n            }\n        }\n    },\n    methods: {\n        refresh() {\n            this.getList()\n        },\n        checked() {\n            this.$refs.tb.toggleRowSelection(this.list[0], true) //官网方法，重点\n        },\n        //查询主表\n        getList() {\n            api.queryRecords(this.listQuery).then(res => {\n                this.list = res.data.list.map(v => {\n                    v.costEstimate = 0\n                    api.Items(v.requisitionsOrderCode).then(response => {\n                        response.data.deviceRequisitionsDetails.forEach(val => {\n                            val.estimatedCost =\n                                val.requisitionsQuantity * val.referencePrice\n                            v.costEstimate += val.estimatedCost\n                        })\n                    })\n                    return v\n                })\n                this.total = res.data.pages.count\n                this.$nextTick(function() {\n                    this.checked()\n                })\n            })\n        },\n        //查询明细\n        getListSub() {\n            let dto = {\n                requisitionsOrderCode: this.selectlistRow.requisitionsOrderCode,\n                currentPage: 1,\n                pageSize: 15\n            }\n            let dta = {\n                currentPage: 1,\n                pageSize: 15\n            }\n            api1.queryRecords(dta).then(resa => {\n                api.queryRecordsItems(dto).then(res => {\n                    this.listSub = res.data.list.map(v => {\n                        resa.data.list.forEach(val => {\n                            if (val.manufacturersCode === v.manufacturersCode) {\n                                v.manufacturersName = val.manufacturersName\n                            }\n                        })\n                        if (v.arrivalQuantity) {\n                            v.actualPrice = v.arrivalQuantity * v.referencePrice\n                            v.waitCount = v.arrivalQuantity - v.accountQuantity\n                        }\n                        v.estimatedCost =\n                            v.requisitionsQuantity * v.referencePrice\n                        return v\n                    })\n                })\n            })\n        },\n\n        //表格高度计算\n        setTableHeight() {\n            this.theight = this.$myFun.getSingleTbHeight() / 2\n        },\n        handleQuery() {\n            //查询\n            this.listQuery.currentPage = 1\n            this.getList()\n        },\n        //新增按钮单击事件\n        handleCreate() {\n            this.$refs.addMain.resetTemp()\n            this.$refs.addMain.list = []\n            this.$refs.addMain.dialogStatus = 'create'\n            this.$refs.addMain.dialogVisible = true\n        },\n        //编辑按钮单击事件\n        handleUpdate(index, val) {\n            if (val.state == 'requisitions20') {\n                this.$message({\n                    title: '警告',\n                    message: '已发布的请购单无法修改',\n                    type: 'warning'\n                })\n                return\n            }\n            this.$refs.addMain.dialogStatus = 'update'\n            this.$refs.addMain.temp = { ...val }\n            api.Items(val.requisitionsOrderCode).then(res => {\n                let a = {\n                    currentPage: 1,\n                    pageSize: 10\n                }\n                queryMainlist(a).then(response => {\n                    this.$refs.addMain.list = res.data.deviceRequisitionsDetails.map(\n                        v => {\n                            response.data.list.forEach(val => {\n                                if (v.typeCode == val.typeCode) {\n                                    v.typeName = val.typeName\n                                }\n                            })\n                            v.estimatedCost =\n                                parseInt(v.referencePrice) *\n                                parseInt(v.requisitionsQuantity)\n                            return v\n                        }\n                    )\n                })\n                // this.$refs.addMain.list = res.data.deviceRequisitionsDetails.map(v => {\n                //     v.estimatedCost = parseInt(v.referencePrice) * parseInt(v.requisitionsQuantity)\n                //     return v\n                // })\n            })\n            this.$refs.addMain.dialogVisible = true\n        },\n        handleDelete() {\n            //删除列表\n            if (this.selectlistRow) {\n                this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        api.deleteRecord(\n                            this.selectlistRow.requisitionsOrderCode\n                        ).then(() => {\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                            this.getList()\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        handleDeleteItems() {\n            //删除列表\n            if (this.selectlistRowSub && this.selectlistRowSub.length > 0) {\n                this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        let dto = {\n                            rowNos: []\n                        }\n                        this.selectlistRowSub.forEach((val, index) => {\n                            dto.rowNos[index] = val.rowNo\n                        })\n                        api.deleteRecordItems(\n                            this.selectlistRow.requisitionsOrderCode,\n                            dto.rowNos\n                        ).then(() => {\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                            this.getList()\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请勾选信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //提交按钮单击事件\n        handleSubmit() {\n            if (this.selectlistRow) {\n                this.$confirm('此操作将提交该信息, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        let dto = {\n                            method: 'SUBMIT'\n                        }\n                        api.updateEffect(\n                            this.selectlistRow.requisitionsOrderCode,\n                            dto\n                        ).then(() => {\n                            this.$message({\n                                title: '成功',\n                                message: '提交成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                            this.getList()\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //明细到货按钮单击事件\n        handleArrival(index, val) {\n            if (val.requisitionsQuantity == val.arrivalQuantity) {\n                this.$message({\n                    title: '警告',\n                    message: '已全部到货无法操作',\n                    type: 'warning'\n                })\n            } else {\n                this.$nextTick(() => {\n                    this.$refs.arrival.temp = { ...val }\n                    this.$refs.arrival.dialogVisible = true\n                })\n            }\n        },\n        formatDate() {\n            var date = new Date()\n            var y = date.getFullYear()\n            var m = date.getMonth() + 1\n            m = m < 10 ? '0' + m : m\n            var d = date.getDate()\n            d = d < 10 ? '0' + d : d\n            var h = date.getHours()\n            h = h < 10 ? '0' + h : h\n            var minute = date.getMinutes()\n            var second = date.getSeconds()\n            minute = minute < 10 ? '0' + minute : minute\n            second = second < 10 ? '0' + second : second\n            return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second\n        },\n        //入台账按钮单击事件\n        handleEntryAccount(index, val) {\n            if (val.waitCount == 0) {\n                this.$message({\n                    title: '警告',\n                    message: '已全部入台账无法操作',\n                    type: 'warning'\n                })\n            } else {\n                this.$refs.entryAccount.temp = { ...val }\n                this.$set(\n                    this.$refs.entryAccount.temp,\n                    'acceptanceDate',\n                    this.formatDate()\n                )\n                this.$refs.entryAccount.temp.acceptorName = getDomainCodeName()\n                this.$refs.entryAccount.temp.acceptor = getDomainCode()\n                this.$refs.entryAccount.dialogVisible = true\n            }\n        },\n        // 表格选择框选中 注:参数为选中的所有行的数组\n        selectChange(val) {\n            this.selectlistRow = val[val.length - 1]\n            if (val.length > 1) {\n                this.$refs.tb.clearSelection()\n                this.$refs.tb.toggleRowSelection(val.pop())\n            }\n            if (this.selectlistRow) {\n                this.getListSub()\n            }\n            this.$refs.tb.setCurrentRow(this.selectlistRow)\n        },\n        //点击表格某一行\n        rowClick(val) {\n            this.$refs.tb.clearSelection()\n            this.$refs.tb.toggleRowSelection(val)\n        },\n        // 表格选择框选中 注:参数为选中的所有行的数组\n        selectChangeSub(val) {\n            this.selectlistRowSub = val\n        },\n        //点击表格某一行\n        rowClickSub(val) {\n            this.$refs.tbSub.toggleRowSelection(val)\n        }\n    }\n}\n",null]}