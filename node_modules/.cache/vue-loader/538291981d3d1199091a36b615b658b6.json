{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTIA/components/equipment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTIA/components/equipment.vue","mtime":1597393596387},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport * as api from '@/api/project/iot/IOT/ia.js'\nimport { queryProjects } from '@/api/project/iot/IOT/project'\nimport { mapState } from 'vuex'\nimport throttle from 'lodash/throttle'\nexport default {\n    name: 'equipment',\n    components: { Pagination },\n    data() {\n        return {\n            treeData: [], // 树型菜单\n            theight: 0, // 表格⾼度\n            titleName: '', // 点击的标题名\n            listQuery: {\n                currentPage: 1,\n                pageSize: 15\n            },\n            tableData: [], // 表格数据\n            total: 0, // 总条数\n            listLoading: false, // 表格加载动画\n            defaultProps: {\n                // 树型结构属性\n                children: 'children',\n                label: 'name'\n            },\n            contentStyleObj: {\n                // 树型⾼度\n                height: ''\n            },\n            projectCode: '', // 项⽬代码编号\n            projectList: [], // 项⽬数组\n            deviceCode: '', // 菜单点击编码\n            normCode: '', // 表格行编号\n            rowData: '', // 点击当前行数据\n            dialogFormVisible: false, // 弹框是否显示\n            dialogFormVisible2: false, // 粒度设置弹框\n            temp: {\n                // 弹框输入框数据\n                normName: '',\n                normCode: '',\n                company: '',\n                indexDescription: ''\n            },\n            // 第二个弹框数据\n            temp2: {\n                minuteFifteen: '',\n                minuteThirty: '',\n                hour: '',\n                day: '',\n                month: '',\n                year: '',\n                dayDetail: '',\n                monthDetail: ''\n            },\n            days: [], // 时间数组\n            months: [], // 日期数组\n            rules: {\n                // 规则校验\n                normName: [\n                    {\n                        required: true,\n                        message: '请输入指标名称',\n                        trigger: 'blur'\n                    }\n                ],\n                normCode: [\n                    {\n                        required: true,\n                        message: '请输入指标编码',\n                        trigger: 'blur'\n                    }\n                ],\n                company: [\n                    {\n                        required: true,\n                        message: '请输入单位',\n                        trigger: 'blur'\n                    }\n                ]\n            }\n        }\n    },\n    computed: {\n        ...mapState({\n            iot_is_standard: (state) => state.iotDict.iot_is_standard,\n            iot_norm_company: (state) => state.iotDict.iot_norm_company\n        })\n    },\n    mounted() {\n        // 循环造数据\n        for (let i = 1; i <= 24; i++) {\n            this.days.push(i + '时')\n        }\n        for (let i = 1; i <= 31; i++) {\n            this.months.push(i + '号')\n        }\n        this.$store.dispatch('iotDict/getDicData', ['iot_is_standard', 'iot_norm_company'])\n        this.getHeight()\n        this.setTableHeight()\n        this.setTreeHeight()\n        //表格⾼度⾃适应\n        window.onresize = () => {\n            this.setTableHeight()\n            this.setTreeHeight()\n        }\n        // 若存在projectCode则赋值，否则取接⼝返回的第⼀个projectCode\n        queryProjects().then((res) => {\n            this.projectList = res.data\n            if (this.$route.params.code) {\n                this.projectCode = this.$route.params.code\n            } else {\n                this.projectCode = res.data[0].projectCode\n            }\n            this.getTreeData()\n        })\n    },\n    methods: {\n        getCompany(val) {\n            let arr = this.iot_norm_company.filter((i) => {\n                return i.dictItemKey == val\n            })\n            this.temp.companyName = arr[0].dictItemValue\n        },\n        // 清空数据并打开自定义指标弹框\n        openDialog() {\n            this.temp = {\n                normName: '',\n                normCode: '',\n                company: '',\n                indexDescription: ''\n            }\n            this.dialogFormVisible = true\n        },\n        // 关闭自定义指标弹框\n        closeDialog() {\n            this.dialogFormVisible = false\n        },\n        // 清空数据，打开粒度弹框\n        openDialogGranularity(index, row) {\n            this.temp2 = {\n                minuteFifteen: '',\n                minuteThirty: '',\n                hour: '',\n                day: '',\n                month: '',\n                year: '',\n                dayDetail: '',\n                monthDetail: ''\n            }\n            this.normCode = row.normCode\n            this.rowData = row\n            if (row.dateDefinition) {\n                this.temp2.day = '自定义'\n                this.temp2.dayDetail = row.dateDefinition.split('-')[0]\n            }\n            if (row.monthDefinition) {\n                this.temp2.day = '自定义'\n                this.temp2.dayDetail = row.monthDefinition.split('-')[0]\n            }\n            if (this.rowData.calculationGranularity) {\n                this.rowData.calculationGranularity.split(',').map((item) => {\n                    if (item === '15分') {\n                        this.temp2.minuteFifteen = true\n                    }\n                    if (item === '30分') {\n                        this.temp2.minuteThirty = true\n                    }\n                    if (item === '1Hour') {\n                        this.temp2.hour = true\n                    }\n                    if (item === '1Day') {\n                        this.temp2.day = '自然天'\n                    }\n                    if (item === '1Month') {\n                        this.temp2.month = '自然月'\n                    }\n                    if (item === '1Year') {\n                        this.temp2.year = true\n                    }\n                })\n            }\n            this.dialogFormVisible2 = true\n        },\n        // 关闭粒度设置弹框\n        closeDialogGranularity() {\n            this.dialogFormVisible2 = false\n        },\n        // 粒度设置\n        createGranularity() {\n            if (this.temp2.day === '自定义' && this.temp2.dayDetail === '') {\n                this.$message.error('请选择天级自定义时间')\n            } else if (this.temp2.month === '自定义' && this.temp2.monthDetail === '') {\n                this.$message.error('请选择月级自定义月份')\n            } else {\n                let granularity = []\n                if (this.temp2.minuteFifteen) {\n                    granularity.push('15分')\n                }\n                if (this.temp2.minuteThirty) {\n                    granularity.push('30分')\n                }\n                if (this.temp2.hour) {\n                    granularity.push('1Hour')\n                }\n                if (this.temp2.day === '自然天') {\n                    granularity.push('1Day')\n                }\n                if (this.temp2.month === '自然月') {\n                    granularity.push('1Month')\n                }\n                if (this.temp2.year) {\n                    granularity.push('1Year')\n                }\n                let data = {\n                    granularity: granularity.join(),\n                    dateDefinition: this.temp2.day === '自定义' ? this.temp2.dayDetail + '-' + this.temp2.dayDetail : '',\n                    monthDefinition: this.temp2.month === '自定义' ? this.temp2.monthDetail + '-' + this.temp2.monthDetail : ''\n                }\n                api.granularitySetting(this.projectCode, this.deviceCode, this.normCode, data).then(() => {\n                    this.closeDialogGranularity()\n                    this.getList()\n                })\n            }\n        },\n        // 添加信息\n        createInfo: throttle(\n            function() {\n                this.$refs.tempRef.validate((valid) => {\n                    if (valid) {\n                        api.createInfo(this.projectCode, this.deviceCode, this.temp).then(() => {\n                            this.getList()\n                            this.closeDialog()\n                            this.$notify({\n                                title: '成功',\n                                message: '添加成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    } else {\n                        return false\n                    }\n                })\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        // 删除信息\n        deleteInfo(index, row) {\n            this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    api.deleteInfo(this.projectCode, this.deviceCode, row.normCode).then(() => {\n                        this.$message({\n                            title: '成功',\n                            message: '删除成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                        this.getList()\n                    })\n                })\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n        },\n        // 递归取第一个数据\n        getData(arr) {\n            if (arr[0].children) {\n                this.getData(arr[0].children)\n            } else {\n                this.handleNodeClick(arr[0])\n            }\n        },\n        getTreeData(projectCode) {\n            // 清空数据\n            this.treeData = []\n            this.titleName = ''\n            this.tableData = []\n            this.total = 0\n            this.deviceCode = ''\n            // 下拉框选中重新赋值\n            if (projectCode) {\n                this.projectCode = projectCode\n            }\n            //获取树数据\n            api.getTree(this.projectCode).then((response) => {\n                if (response.data.length !== 0) {\n                    let temp = response.data\n                    response.data.map((item, index) => {\n                        temp[index].rowId = item.code\n                        temp[index].parentId = item.parentCode\n                    })\n                    this.treeData = this.$myFun.addTreeRoot(temp)\n                    this.getData(this.treeData)\n                    this.treeData[0].name = '根⽬录'\n                }\n            })\n        },\n        //表格⾼度计算\n        setTableHeight() {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        //树⾼度设置\n        setTreeHeight() {\n            this.contentStyleObj.height = this.$myFun.getTreehHeight()\n        },\n        //树⾼度设置\n        getHeight() {\n            this.contentStyleObj.height = document.body.scrollHeight - 110 + 'px'\n        },\n        // 树型菜单点击触发\n        handleNodeClick(data) {\n            if (data.deviceCode) {\n                this.titleName = data.name\n                this.deviceCode = data.deviceCode\n                this.getList()\n            }\n        },\n        // 获取表格数据\n        getList() {\n            this.listLoading = true\n            api.getInfo(this.projectCode, this.deviceCode, this.listQuery).then((res) => {\n                let options = [this.iot_is_standard]\n                res.data.list = this.$myFun.codeToName(res.data.list, options, ['isStandard'])\n                this.tableData = res.data.list\n                this.total = res.data.pages.count\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n        }\n    }\n}\n",null]}