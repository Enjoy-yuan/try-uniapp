{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/database/errorType/rightcontent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/database/errorType/rightcontent.vue","mtime":1596610933480},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from '@/api/project/eas/database/faultType'\nimport Pagination from '@/components/Pagination'\nimport selectTree from '@/components/Select/selectTree' //下拉组件\nimport { queryRecords } from '@/api/project/eas/database/faultType'\n// import SelectTree from '@/components/SelectTree/index.vue'\n\nexport default {\n    name: 'faultTypeRightContent',\n    components: { Pagination, selectTree },\n    props: ['rowIndex'],\n    data() {\n        return {\n            list: null,\n            total: 0,\n            optionData: [],\n            isClearable: true, // 可清空（可选）\n            isAccordion: true, // 可收起（可选）\n            valueId: undefined, // 初始ID（可选）\n            props: {\n                // 配置项（必选）\n                rowId: 'rowId', // 父级唯一标识\n                children: 'children',\n                label: 'faultName'\n            },\n            DT_ORG_TYPE: 'dt_org_type_factory',\n            theight: 0, //表格高度\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15,\n                faultCode: undefined,\n                faultName: undefined,\n                preFaultCode: undefined\n            },\n            listQueryNode: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15,\n                preFaultCode: undefined,\n                faultCode: undefined,\n                faultName: undefined\n            },\n            faultCode: undefined,\n            faultName: undefined,\n            temp: {\n                faultCode: undefined,\n                faultName: undefined,\n                preFaultCode: undefined,\n                remark: undefined\n            },\n            preFaultCode: undefined,\n            dialogFormVisible: false,\n            dialogStatus: '',\n            tableKey: 0\n        }\n    },\n\n    mounted() {\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getListOne()\n        this.getOptionData()\n    },\n    methods: {\n        buildTree: (array, id, parent_id) => {\n            let temp = {}\n            let tree = []\n            for (let i in array) {\n                temp[array[i][id]] = array[i]\n            }\n            for (let i in temp) {\n                if (temp[i][parent_id] != 0) {\n                    if (!temp[temp[i][parent_id]].children) {\n                        temp[temp[i][parent_id]].children = []\n                    }\n                    temp[temp[i][parent_id]].children.push(temp[i])\n                } else {\n                    tree.push(temp[i])\n                }\n            }\n            return tree\n        },\n        getValue(value) {\n            this.temp.preFaultCode = value.faultCode\n        },\n        getList(node) {\n            if (node) {\n                this.listQueryNode.preFaultCode = node.faultCode\n                api.queryRecords(this.listQueryNode).then(res => {\n                    this.list = res.data.list\n                    this.total = res.data.pages.count\n                })\n            }\n        },\n        getListOne() {\n            api.queryRecords(this.listQueryNode).then(res => {\n                this.list = res.data.list\n                this.total = res.data.pages.count\n            })\n        },\n        getOptionData() {\n            queryRecords().then(res => {\n                this.optionData = [\n                    {\n                        faultName: '故障类型',\n                        faultCode: '0',\n                        rowId: 0,\n                        children: this.buildTree(\n                            res.data,\n                            'faultCode',\n                            'preFaultCode'\n                        )\n                    }\n                ]\n            })\n        },\n        //表格高度计算\n        setTableHeight() {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        handleChange() {\n            this.$emit('fresh')\n        },\n        //查询\n        handleQuery() {\n            this.listQueryNode.currentPage = 1\n            this.getListOne()\n        },\n        //新增弹窗\n        handleCreate() {\n            if (this.listQueryNode.preFaultCode) {\n                this.resetTemp()\n                this.temp.preFaultCode = ''\n                this.dialogStatus = 'create'\n                this.dialogFormVisible = true\n                this.temp.preFaultCode = this.listQueryNode.preFaultCode\n                this.$nextTick(() => {\n                    this.$refs['temp'].clearValidate()\n                    this.$refs.errSelect.valueTitle = this.$parent.$parent.$parent.selectedObj.faultName\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择左边上级菜单',\n                    type: 'warning'\n                })\n            }\n        },\n        //新增方法\n        create() {\n            api.addRecord(this.temp).then(() => {\n                this.getList(this.$parent.$parent.$parent.selectedObj)\n                this.handleChange()\n                this.getOptionData()\n                this.dialogFormVisible = false\n                this.$notify({\n                    title: '成功',\n                    message: '新增成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n        },\n\n        // 获取表格选中时的数据\n        selectRow(val) {\n            this.selectlistRow = val\n        },\n        //编辑弹窗\n        handleUpdate() {\n            if (!this.listQueryNode.preFaultCode) {\n                this.$message.warning('请选择对应上级故障类型编码！')\n                return\n            }\n            if (this.selectlistRow && this.selectlistRow.length == 1) {\n                this.temp = this.selectlistRow[0] // copy obj\n                this.dialogStatus = 'update'\n                this.dialogFormVisible = true\n                this.temp.preFaultCode = this.listQueryNode.preFaultCode\n                this.$nextTick(() => {\n                    this.$refs['temp'].clearValidate()\n                    this.$refs.errSelect.valueTitle = this.$parent.$parent.$parent.selectedObj.faultName\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //编辑\n        update() {\n            let faultTypeCode = this.selectlistRow[0].faultCode\n            api.updateRecord(faultTypeCode, this.temp).then(() => {\n                this.getList(this.$parent.$parent.$parent.selectedObj)\n                this.getOptionData()\n                this.handleChange()\n                this.dialogFormVisible = false\n                this.$message({\n                    title: '成功',\n                    message: '更新成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n        },\n        //删除列表\n        handleDelete() {\n            if (this.selectlistRow && this.selectlistRow.length == 1) {\n                this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        let faultTypeCode = this.selectlistRow[0].faultCode\n                        api.deleteRecord(faultTypeCode).then(() => {\n                            this.getList(\n                                this.$parent.$parent.$parent.selectedObj\n                            )\n                            this.getListOne()\n                            this.getOptionData()\n                            this.handleChange()\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n\n        resetTemp() {\n            this.temp = {\n                faultCode: undefined,\n                faultName: undefined,\n                preFaultCode: undefined,\n                remark: undefined\n            }\n        },\n        handleClose() {\n            this.resetTemp()\n            this.$refs.temp.resetFields()\n        }\n    }\n}\n",null]}