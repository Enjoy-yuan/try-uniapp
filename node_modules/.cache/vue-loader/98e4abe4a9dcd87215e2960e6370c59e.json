{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/equipmentMonitoring/em/capsuleBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/equipmentMonitoring/em/capsuleBar.vue","mtime":1600064963795},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"capsuleBar\",\n    props: ['id', 'data'],\n    data () {\n        return {\n            mycharts: undefined,\n        }\n    },\n    watch: {\n        data () {\n            this.getPie()\n        }\n    },\n    mounted () {\n        let _this = this\n        window.addEventListener('resize', function () {\n            if (_this.mycharts) {\n                _this.mycharts.resize()\n            }\n        })\n        this.getPie()\n    },\n    methods: {\n        getContent (max) {\n            let content = 0\n            if (max <= 10) {\n                content = 10\n            }\n            else if (max <= 50) {\n                content = Math.ceil(max / 10) * 10\n            } else if (max < 100) {\n                content = 100\n            } else if (max <= 1000) {\n                content = Math.ceil(max / 1000) * 1000\n            } else {\n                content = max\n            }\n            return content\n        },\n        getPie () {\n            if (!this.data) return false\n            this.myChart = this.$echarts.init(document.getElementById(this.id))\n            let subData = []\n            let max = Math.max.apply(null, this.data.data)\n            let content = this.getContent(max)\n            this.data.data.forEach((item) => {\n                subData.push({\n                    name: item,\n                    value: content\n                })\n            })\n            let option = {\n                grid: {   // 直角坐标系内绘图网格\n                    left: '25%',  //grid 组件离容器左侧的距离,\n                    //left的值可以是80这样具体像素值，\n                    //也可以是'80%'这样相对于容器高度的百分比\n                    top: '10',\n                    right: '15%',\n                    bottom: '10',\n                    containLabel: false   //gid区域是否包含坐标轴的刻度标签。为true的时候，\n                    // left/right/top/bottom/width/height决定的是包括了坐标轴标签在内的\n                    //所有内容所形成的矩形的位置.常用于【防止标签溢出】的场景\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {            // 坐标轴指示器，坐标轴触发有效\n                        type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'\n                    },\n                    formatter: function (params) {\n                        var showHtm = \"\"\n                        for (let i = 0; i < params.length; i++) {\n                            showHtm = params[0].axisValue + ':' + params[0].data\n                        }\n                        return showHtm\n                    }\n                },\n                xAxis: {  //直角坐标系grid中的x轴,\n                    //一般情况下单个grid组件最多只能放上下两个x轴,\n                    //多于两个x轴需要通过配置offset属性防止同个位置多个x轴的重叠。\n                    type: 'value',//坐标轴类型,分别有：\n                    //'value'-数值轴；'category'-类目轴;\n                    //'time'-时间轴;'log'-对数轴\n                    splitLine: { show: false },//坐标轴在 grid 区域中的分隔线\n                    axisLabel: { show: false },//坐标轴刻度标签\n                    axisTick: { show: false },//坐标轴刻度\n                    axisLine: { show: false },//坐标轴轴线\n                },\n                yAxis: {\n                    type: 'category',\n                    axisTick: { show: false },\n                    axisLine: { show: false },\n                    axisLabel: {\n                        color: '#FFF',\n                        fontSize: 12\n                    },\n                    data: this.data.yAxisData//类目数据，在类目轴（type: 'category'）中有效。\n                    //如果没有设置 type，但是设置了axis.data,则认为type 是 'category'。\n                },\n                series: [//系列列表。每个系列通过 type 决定自己的图表类型\n                    {\n                        name: '%',//系列名称\n                        type: 'bar',//柱状、条形图\n                        barWidth: 10,//柱条的宽度,默认自适应\n                        data: this.data.data.sort((a, b) => { return a - b }),//系列中数据内容数组\n                        itemStyle: {//图形样式\n                            normal: {  //normal 图形在默认状态下的样式;\n                                //emphasis图形在高亮状态下的样式\n                                barBorderRadius: [0, 10, 10, 0],//柱条圆角半径,单位px.\n                                //此处统一设置4个角的圆角大小;\n                                //也可以分开设置[10,10,10,10]顺时针左上、右上、右下、左下\n                                color: new this.$echarts.graphic.LinearGradient(\n                                    0, 0, 1, 0,\n                                    [{\n                                        offset: 0,\n                                        color: '#0569e1'//柱图渐变色起点颜色\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: '#05b4f7'//柱图渐变色终点颜色\n                                    }\n                                    ]\n                                )\n                            }\n                        },\n                        zlevel: 9//柱状图所有图形的 zlevel 值,\n                        //zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面\n                    },\n                    {\n                        name: '进度条背景',\n                        type: 'bar',\n                        barGap: '-100%',//不同系列的柱间距离，为百分比。\n                        // 在同一坐标系上，此属性会被多个 'bar' 系列共享。\n                        // 此属性应设置于此坐标系中最后一个 'bar' 系列上才会生效，\n                        //并且是对此坐标系中所有 'bar' 系列生效。\n                        barWidth: 10,\n                        data: subData,\n                        color: 'rgba(0,0,0,0.5)',//柱条颜色\n                        label: { //图形上的文本标签\n                            show: true,\n                            position: 'right',//标签的位置\n                            offset: [0, 0],  //标签文字的偏移，此处表示向上偏移40\n                            formatter: '{b}%',//标签内容格式器 {a}-系列名,{b}-数据名,{c}-数据值\n                            color: '#FFF',//标签字体颜色\n                            fontSize: 12  //标签字号\n                        },\n                        itemStyle: {\n                            normal: {\n                                barBorderRadius: [0, 10, 10, 0],//柱条圆角半径,单位px.\n                                color: 'rgba(255,255,255,0.5)',//柱条颜色\n                            }\n                        }\n                    }\n                ]\n            }\n            this.myChart.setOption(option, true)\n        }\n    }\n};\n",null]}