{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTGR/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTGR/main.vue","mtime":1600657324087},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from \"@/api/project/iot/IOT/ga\"\nimport { queryCurve } from \"@/api/project/iot/IOT/db\"\nimport { queryProjectCodes, queryCollects } from \"@/api/project/iot/IOT/em\"\nimport Pagination from \"@/components/Pagination\"\nimport gatewaySelect from \"../../components/gatewaySelect\"\nimport { mapState } from 'vuex'\nimport throttle from 'lodash/throttle'\nexport default {\n    name: \"GRMain\",\n    props: ['code', 'projectList'],\n    components: { Pagination, gatewaySelect },\n    computed: {\n        ...mapState({\n            iot_operator: state => state.iotDict.iot_operator,\n            iot_networking_way: state => state.iotDict.iot_networking_way,\n            iot_reporting_period: state => state.iotDict.iot_reporting_period,\n            iot_state_gateway: state => state.iotDict.iot_state_gateway,\n        })\n    },\n    watch: {\n        projectList (val) {\n            if (!this.projectCode) {\n                this.projectCode = val[0].projectCode\n                this.getList()\n            }\n        },\n        code (val) {\n            if (val) {\n                this.projectCode = val\n                this.getList()\n            }\n        },\n        'listQuerySub.deviceCode' (val) {\n            if (val) {\n                this.getAttribute()\n            }\n        }\n    },\n    data () {\n        return {\n            keyList: [],\n            listLoading: false,\n            theight: 0,//表格高度\n            projectCode: this.code,\n            list: [],\n            deviceList: [],\n            attributeList: [],\n            total: 0,\n            row: undefined,\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 10,\n                gatewayName: undefined\n            },\n            listQuerySub: {\n                deviceCode: undefined,\n                pointCode: undefined,\n                pointEndTime: undefined,\n                pointStartTime: undefined\n            },\n            dialogFormVisible: false,\n            dialogFormVisibleSub: false,\n            temp: {\n                gatewayName: undefined,\n                gatewaySn: undefined,\n                gatewayType: undefined,\n                installationAddress: undefined,\n                networkingWay: undefined,\n                operator: undefined,\n                projectCode: undefined,\n                remark: undefined,\n                reportingPeriod: undefined\n            },\n            rules: {\n                gatewayName: [\n                    {\n                        required: true,\n                        message: '网关名称不能为空',\n                        trigger: 'blur'\n                    },\n                    { max: 100, message: '长度不能超过100', trigger: 'blur' },\n                    {\n                        pattern: /^[a-zA-Z0-9#\\u4e00-\\u9fa5]+$/,\n                        message: '支持大小写中英文及#符号',\n                        trigger: 'blur'\n                    }\n                ],\n                gatewaySn: [\n                    {\n                        required: true,\n                        message: '序列号名称不能为空',\n                        trigger: ['blur', 'chnage']\n                    },\n                ],\n                gatewayType: [\n                    {\n                        required: true,\n                        message: '请选择产品型号',\n                        trigger: ['blur', 'chnage']\n                    },\n                ],\n                networkingWay: [\n                    {\n                        required: true,\n                        message: '请选择联网方式',\n                        trigger: ['blur', 'chnage']\n                    },\n                ],\n                operator: [\n                    {\n                        required: true,\n                        message: '请选择上报周期',\n                        trigger: ['blur', 'chnage']\n                    },\n                ],\n                reportingPeriod: [\n                    {\n                        required: true,\n                        message: '请选择产品型号',\n                        trigger: ['blur', 'chnage']\n                    },\n                ],\n            },\n            tableKey: 0 //表格索引\n        }\n    },\n    mounted () {\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n    },\n    methods: {\n        stateClass (state) {\n            if (state == '0') {\n                return 'iot-warning'\n            } else if (state == '1') {\n                return 'iot-success'\n            } else if (state == '2') {\n                return 'iot-info'\n            }\n        },\n        // 获取设备列表\n        getDeviceList () {\n            queryProjectCodes(this.row.projectCode).then(res => {\n                this.deviceList = res.data\n                if (res.data && res.data) {\n                    this.listQuerySub.deviceCode = res.data[0].deviceCode\n                }\n            })\n        },\n        getAttribute () {\n            queryCollects(this.row.projectCode, this.listQuerySub.deviceCode).then(res => {\n                this.attributeList = res.data\n                if (res.data && res.data.length) {\n                    this.$set(this.listQuerySub, 'pointCode', this.attributeList[0].pointCode)\n                }\n            })\n        },\n        //获取表格数据\n        getList () {\n            this.listLoading = true\n            api.queryGateways(this.projectCode, this.listQuery).then(response => {\n                this.list = response.data.list\n                this.list = this.$myFun.srmCodeToName(response.data.list, [this.iot_networking_way, this.iot_state_gateway], ['networkingWay', 'iotState'])\n                this.total = response.data.pages.count\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n        },\n        // 生成SN\n        getSN: throttle(\n            function () {\n                api.getGenerate(this.projectCode).then(res => {\n                    this.temp.gatewaySn = res.data\n                })\n            },\n            3000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        // 获取型号\n        getGatewayType (val) {\n            this.temp.gatewayType = val\n        },\n        //表格查询\n        handleQuery: throttle(\n            function () {\n                this.listQuery.currentPage = 1\n                this.getList()\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        //新增按钮单击事件方法\n        handleCreate () {\n            this.dialogFormVisible = true\n        },\n        create: throttle(\n            function () {\n                this.$refs.tempRef.validate(valid => {\n                    if (valid) {\n                        this.temp.projectCode = this.projectCode\n                        api.addGateway(this.projectCode, this.temp).then(() => {\n                            this.getList()\n                            this.dialogFormVisible = false\n                            this.resTemp()\n                            this.$notify({\n                                title: '成功',\n                                message: '新增成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    } else {\n                        return false\n                    }\n                })\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        // 数据补招\n        DataSR () {\n            api.getSR(this.row.projectCode, this.row.gatewayCode, this.listQuerySub.deviceCode, this.listQuerySub.pointStartTime, this.listQuerySub.pointEndTime).then(res => {\n                if (res.data == '1') {\n                    return this.$message({\n                        title: '成功',\n                        message: '补招成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                } else {\n                    this.$message({\n                        title: '失败',\n                        message: '补招失败',\n                        type: 'error',\n                        duration: 2000\n                    })\n                }\n            })\n        },\n        // 查看曲线\n        handleViewCurves (row) {\n            this.row = row\n            this.getDeviceList()\n            //获取当前时间\n            var day = new Date()\n            var now = new Date()\n            day.setTime(day.getTime() - 2 * 60 * 60 * 1000)\n            this.listQuerySub.pointStartTime = getDate(day)\n            this.listQuerySub.pointEndTime = getDate(now)\n            function getDate (day) {\n                var year = day.getFullYear()//得到年份\n                var month = day.getMonth() + 1 > 10 ? day.getMonth() + 1 : '0' + (day.getMonth() + 1)//得到月份\n                var date = day.getDate() > 10 ? day.getDate() : '0' + day.getDate()//得到日期\n                var hour = day.getHours() > 10 ? day.getHours() : '0' + day.getHours()//得到小时\n                var minu = day.getMinutes() > 10 ? day.getMinutes() : '0' + day.getMinutes()//得到分钟\n                var sec = day.getSeconds() > 10 ? day.getSeconds() : '0' + day.getSeconds()//得到秒\n                return `${year}-${month}-${date} ${hour}:${minu}:${sec}`\n            }\n            this.dialogFormVisibleSub = true\n        },\n        // 搜索曲线\n        handleQuerySub () {\n            queryCurve(this.row.projectCode, this.row.gatewayCode, this.listQuerySub.deviceCode, this.listQuerySub.pointCode, this.listQuerySub).then(res => {\n                this.chartList = res.data\n                this.drawLine()\n            })\n        },\n        //删除按钮单击事件方法\n        handleDelete (gatewayCode, iotState) {\n            if (iotState !== '2') {\n                return this.$message({\n                    title: this.$t('message.warning'),\n                    message: \"当前网关已物联，不能删除！\",\n                    type: \"warning\"\n                })\n            }\n            this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    api.deleteGateway(this.projectCode, gatewayCode).then(() => {\n                        this.getList()\n                        this.$message({\n                            title: '成功',\n                            message: '删除成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    }).catch(() => {\n                        this.getList()\n                    })\n                })\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n            // \n        },\n        resTemp () {\n            this.temp = {\n                gatewayName: undefined,\n                gatewaySn: undefined,\n                gatewayType: undefined,\n                installationAddress: undefined,\n                networkingWay: undefined,\n                operator: undefined,\n                projectCode: undefined,\n                remark: undefined,\n                reportingPeriod: undefined\n            }\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        drawLine () {\n            let xAxisData = this.chartList.map(item => {\n                return item.pointTime\n            })\n            let data = this.chartList.map(item => {\n                return {\n                    value: item.pointValue,\n                    name: item.pointName,\n                }\n            })\n            // 基于准备好的dom，初始化echarts实例\n            let myChart = this.$echarts.init(this.$refs.myChart)\n            // 绘制图表\n            myChart.setOption({\n                title: { text: '' },\n                tooltip: {\n                    formatter: '{b}<br/>{c}'\n                },\n                xAxis: {\n                    data: xAxisData\n                },\n                yAxis: {},\n                series: [\n                    {\n                        name: '',\n                        type: 'line',\n                        data: data\n                    }\n                ]\n            })\n        },\n        toInfo (row) {\n            this.$emit('setRow', row)\n            this.$emit('setCode', row.projectCode)\n            this.$emit('setPage', 'GR-Info')\n        },\n    }\n};\n",null]}