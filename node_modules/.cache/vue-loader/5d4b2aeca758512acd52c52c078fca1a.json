{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/priceManage/actuarialPrice/actuarialDetailCost/tab/tabBZcost.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/priceManage/actuarialPrice/actuarialDetailCost/tab/tabBZcost.vue","mtime":1596610933674},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex'\nexport default {\n    name: 'tabBZcost',\n    props: ['tabBZcostList'],\n    data () {\n        return {\n            type: null,\n            tableData: [],\n\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_srm_pdl: state => state.dict.dt_srm_pdl,\n        })\n    },\n    mounted () {\n\n        this.$store.dispatch('dict/getDicData', ['dt_srm_pdl'])\n\n    },\n    watch: {\n        tabBZcostList (val) {\n            if (this.type == 'add') {\n                let options = [this.dt_srm_pdl]\n                val = this.$myFun.srmCodeToName(val, options, ['packingType'])\n                let arr = JSON.parse(JSON.stringify(val))\n                arr.forEach(i => {\n                    i.actuarialUnitPrice = i.unitPrice ? i.unitPrice : 0 //单价精算\n                    if (i.packingType == 'PDL0') {\n                        i.actuarialPackingQuantity = i.packingQuantity ? i.packingQuantity : 0 //数量精算\n                        i.actuarialServiceLife = i.serviceLife ? i.serviceLife : 0 //年限精算\n                        i.actuarialAnnualMaintenanceCost = i.annualMaintenanceCost ? i.annualMaintenanceCost : 0 //费用精算\n                        i.actuarialAnnualAllocatedQuantity = i.annualAllocatedQuantity ? i.annualAllocatedQuantity : 0 //分摊量精算\n                        i.actuarialTotalPackingCost = i.actuarialUnitPrice * i.actuarialPackingQuantity || 0 //总费用精算\n                        i.actuarialSinglePartCost = (i.actuarialTotalPackingCost + i.actuarialServiceLife * i.actuarialAnnualMaintenanceCost) / i.actuarialServiceLife / i.actuarialAnnualAllocatedQuantity //单零件成本精算\n                    } else {\n                        i.actuarialPackingPerNumber = i.packingPerNumber ? i.packingPerNumber : 0 //每包精算\n                        i.actuarialSinglePartCost = i.actuarialPackingPerNumber / i.actuarialUnitPrice //单零件成本精算\n                    }\n                })\n                this.tableData = arr\n            } else {\n                let options = [this.dt_srm_pdl]\n                val = this.$myFun.srmCodeToName(val, options, ['packingType'])\n                let arr = JSON.parse(JSON.stringify(val))\n                this.tableData = arr\n            }\n\n        }\n    },\n    methods: {\n        checkValue (val) {\n            if (isNaN(val) || val == Infinity) {\n                return undefined\n            } else {\n                if (val.toString().indexOf('.') !== -1) {\n                    val = parseFloat(val).toFixed(2)\n                }\n                return val\n            }\n        },\n        getSummaries (param) {\n            const { columns, data } = param\n            const sums = []\n            columns.forEach((column, index) => {\n                if (index === 0) {\n                    sums[index] = '总计'\n                    return\n                }\n                const values = data.map(item => Number(item[column.property]))\n                if (!values.every(value => isNaN(value))) {\n                    if (column.property == 'packingTypeCN' || column.property == 'actuarialUnitPrice' || column.property == 'actuarialPackingPerNumber' || column.property == 'actuarialPackingQuantity' || column.property == 'totalPackingCost' || column.property == 'actuarialTotalPackingCost' ||\n                        column.property == 'actuarialServiceLife' || column.property == 'actuarialAnnualMaintenanceCost' || column.property == 'actuarialAnnualAllocatedQuantity' || column.property == 'actuarialSinglePartCost'\n                    ) {\n                        sums[index] = values.reduce((prev, curr) => {\n                            const value = Number(curr)\n                            if (!isNaN(value)) {\n                                return prev + curr\n                            } else {\n                                return prev\n                            }\n                        }, 0)\n                        // sums[index] += ' 元'\n                    } else {\n                        sums[index] = '--'\n                    }\n\n                } else {\n                    sums[index] = 0\n                }\n            })\n            columns.forEach((val, index) => {\n                //小计精算\n                if (val.property == 'actuarialSinglePartCost') {\n                    this.$store.dispatch('getData/getPart', sums[index])\n                }\n            })\n            return sums\n        },\n        getPriceCost (row) {\n            this.tableData.forEach(i => {\n                if (i.rowId == row.rowId) {\n                    if (i.packingType == 'PDL0') {\n                        i.actuarialTotalPackingCost = this.checkValue(i.actuarialUnitPrice * i.actuarialPackingQuantity) //总费用精算\n                        i.actuarialSinglePartCost = this.checkValue((i.actuarialTotalPackingCost + i.actuarialServiceLife * i.actuarialAnnualMaintenanceCost) / i.actuarialServiceLife / i.actuarialAnnualAllocatedQuantity) //单零件成本精算\n                    } else {\n                        i.actuarialSinglePartCost = this.checkValue(i.actuarialPackingPerNumber / i.actuarialUnitPrice) //单零件成本精算\n                    }\n                }\n            })\n        },\n        initData (val) {\n            this.type = val\n            this.tableData = []\n        }\n    }\n}\n",null]}