{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierSelection/options/optionsFormation/dialog/dialogErrorFeedBack.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierSelection/options/optionsFormation/dialog/dialogErrorFeedBack.vue","mtime":1599136050908},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from \"@/api/project/srm/supplierSelect/options/option\"\nimport Pagination from \"@/components/Pagination\"\nimport { mapState } from \"vuex\"\n\nexport default {\n    name: 'dialogFeedBack',\n    components: { Pagination },\n    props: ['unMutiple', 'title'],\n    data () {\n        return {\n            tableData: [],\n            total: 0,\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            formData: {\n                rowId: null,\n                businessType: null,\n                problemType: null,\n                stage: null,\n                occurrenceTime: null,\n                problem: null,\n                plannedSettlementDate: null,\n                problemDesc: null,\n                problemInfluence: null,\n                solution: null,\n                effectValidation: null,\n            },\n            listSelected: null,//已选项\n            selectRowData: null,\n            dialogVisible: false,\n            rules: {\n                businessType: [\n                    { required: true, message: '请选择', trigger: 'blur' }\n                ],\n                problemType: [\n                    { required: true, message: '请选择', trigger: 'blur' }\n                ]\n            },\n            oprateBtnConfig: [\n                { id: 0, class: 'filter-item', icon: 'el-icon-plus', clickMethod: 'showGys', name: '新增' },\n                { id: 1, class: 'filter-item ml_5', icon: 'el-icon-plus', clickMethod: 'handleRefresh', name: '刷新' },\n            ],\n            formConfig: [\n                { type: 'dictSelect', dType: 'dt_srm_pdo', label: '业务域', prop: 'businessType', width: '' },\n                { type: 'dictSelect', dType: 'dt_srm_pap', label: '问题类型', prop: 'problemType', width: '' },\n                { type: 'dictSelect', dType: 'dt_srm_pdp', label: '所处阶段', prop: 'stage', width: '' },\n                { type: 'datetime', label: '发生时间', prop: 'occurrenceTime', width: '' },\n                { type: 'commonInput', label: '问题', prop: 'problem', width: '' },\n                { type: 'date', label: '计划解决日期', prop: 'plannedSettlementDate', width: '' },\n                { type: 'textarea', label: '问题描述', prop: 'problemDesc', width: '800px', rows: \"2\" },\n                { type: 'textarea', label: '问题影响', prop: 'problemInfluence', width: '800px', rows: \"2\" },\n                { type: 'textarea', label: '解决措施', prop: 'solution', width: '800px', rows: \"2\" },\n                { type: 'textarea', label: '效果验证', prop: 'effectValidation', width: '800px', rows: \"2\" },\n            ],\n            tableConfig: [\n                { label: '状态', prop: 'stateCN', align: 'center', width: 'auto' },\n                { label: '业务域', prop: 'businessTypeCN', align: 'center', width: '150' },\n                { label: '所处阶段', prop: 'stageCN', align: 'center', width: 'auto' },\n                { label: '发生时间', prop: 'occurrenceTime', align: 'center', width: '150' },\n                { label: '问题', prop: 'problem', align: 'center', width: '150' },\n                { label: '问题描述', prop: 'problemDesc', align: 'center', width: '150' },\n                { label: '影响分析', prop: 'problemInfluence', align: 'center', width: '150' },\n                { label: '解决措施', prop: 'solution', align: 'center', width: '150' },\n                { label: '效果验证', prop: 'effectValidation', align: 'center', width: '150' },\n                { label: '计划完成时间', prop: 'plannedSettlementDate', align: 'center', width: '150' }\n            ],\n            dialogConfig: [\n                { title: '供应商信息', isRequired: false, unMutiple: false },\n                { title: '申请人选择', unMutiple: true, propCode: 'creator', propName: 'creatorName' },\n            ]\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_srm_p0: state => state.dict.dt_srm_p0,\n            dt_srm_pdo: state => state.dict.dt_srm_pdo,//业务域\n            dt_srm_pdp: state => state.dict.dt_srm_pdp,//所处阶段\n            dt_srm_pap: state => state.dict.dt_srm_pap,//问题类型\n        }),\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\"dt_srm_p0\", \"dt_srm_pdo\", \"dt_srm_pdp\", \"dt_srm_pap\"])\n    },\n    methods: {\n        getList () {\n            api.queryFeedback(this.listQuery).then(res => {\n                let options = [this.dt_srm_p0, this.dt_srm_pdo, this.dt_srm_pdp]\n                res.data = this.$myFun.codeToName(res.data, options, [\n                    'state', 'businessType', 'stage'\n                ])\n                this.tableData = res.data.list\n                this.total = res.data.pages.count\n            })\n        },\n        resetForm () {\n            for (let par in this.formData) {\n                this.$set(this.formData, par, null)\n            }\n            this.$refs['refForm'].resetFields()\n            this.$refs['refForm'].clearValidate()\n        },\n        handleConfirm () {\n            this.$refs.refForm.validate((valid) => {\n                if (valid) {\n                    this.$confirm('确认保存吗?', '提示', {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning'\n                    }).then(() => {\n                        console.log(this.formData.rowId)\n                        if (this.formData.rowId) {\n                            let cdata = {\n                                abnormalFeedbackDTO: this.formData,\n                                method: \"UPDATE\"\n                            }\n                            api.updateFeedback(this.formData.rowId, cdata).then(() => {\n                                this.getList()\n                                this.$message({\n                                    type: 'success',\n                                    message: '编辑成功'\n                                })\n                                this.resetForm()\n                            })\n                        } else {\n                            api.createFeedback(this.formData).then(() => {\n                                this.getList()\n                                this.resetForm()\n                                this.$message({\n                                    type: 'success',\n                                    message: '新增成功'\n                                })\n                            })\n\n                        }\n                    }).catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消'\n                        })\n                    })\n                }\n            })\n        },\n        handleUpdate (row) {\n            // this.formData = JSON.parse(JSON.stringify(row))\n            api.queryFeedbackRow(row.rowId).then(res => {\n                res = res.data\n                for (let key in res) {\n                    for (let par in this.formData) {\n                        if (par === key) {\n                            this.$set(this.formData, par, res[key])\n                        }\n                    }\n                }\n            })\n        },\n        //表格操作删除\n        handleDelete (row) {\n            this.$confirm('确认要删除该数据项吗?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(() => {\n                api.deleteFeedback(row.rowId).then(() => {\n                    this.$message({\n                        type: 'success',\n                        message: '删除成功'\n                    })\n                    this.getList()\n                })\n            }).catch(() => {\n                this.$message({\n                    type: 'info',\n                    message: '已取消'\n                })\n            })\n        }\n    }\n}\n",null]}