{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/components/SelectTree/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/components/SelectTree/index.vue","mtime":1596610933180},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"Pagination\",\n    props: {\n        // 接收绑定参数\n        value: {\n            required: false,\n            default: -1\n        },\n        // 输入框宽度\n        width: String,\n        // 选项数据\n        options: {\n            type: Array,\n            required: true\n        },\n        // 输入框占位符\n        placeholder: {\n            type: String,\n            required: false,\n            default: \"请选择\"\n        },\n        // 树节点配置选项\n        props: {\n            type: Object,\n            required: false,\n            default: () => ({\n                rowId: \"rowId\",\n                label: \"catalogName\",\n                children: \"children\"\n            })\n        }\n    },\n    // 设置绑定参数\n    model: {\n        prop: \"value\",\n        event: \"selected\"\n    },\n    computed: {\n        // 是否为树状结构数据\n        dataType() {\n            const jsonStr = JSON.stringify(this.options);\n            return jsonStr.indexOf(this.props.children) !== -1;\n        },\n        // 若非树状结构，则转化为树状结构数据\n        data() {\n            return this.dataType ? this.options : this.switchTree();\n        }\n    },\n    watch: {\n        labelModel(val) {\n            if (!val) {\n                this.valueModel = \"\";\n            }\n            this.$refs.tree.filter(val);\n        },\n        value(val) {\n            this.labelModel = this.queryTree(this.data, val);\n        }\n    },\n    data() {\n        return {\n            // 树状菜单显示状态\n            showStatus: false,\n            // 菜单宽度\n            treeWidth: \"auto\",\n            // 输入框显示值\n            labelModel: \"\",\n            // 实际请求传值\n            valueModel: \"0\"\n        };\n    },\n\n    created() {\n        // 检测输入框原有值并显示对应 label\n        if (this.value || this.value == 0) {\n            //初始值可能为0\n            this.labelModel = this.queryTree(this.data, this.value);\n        }\n        // 获取输入框宽度同步至树状菜单宽度\n        this.$nextTick(() => {\n            this.treeWidth = `${(this.width ||\n                this.$refs.input.$refs.input.clientWidth) - 24}px`;\n        });\n    },\n    methods: {\n        // 单击节点\n        onClickNode(node) {\n            this.labelModel = node[this.props.label];\n            this.valueModel = node[this.props.rowId];\n            this.onCloseTree();\n        },\n        // 偏平数组转化为树状层级结构\n        switchTree() {\n            return this.cleanChildren(this.buildTree(this.options, \"0\"));\n        },\n        // 隐藏树状菜单\n        onCloseTree() {\n            this.$refs.popover.showPopper = false;\n        },\n        // 显示时触发\n        onShowPopover() {\n            this.showStatus = true;\n            this.$refs.tree.filter(false);\n        },\n        // 隐藏时触发\n        onHidePopover() {\n            this.showStatus = false;\n            this.$emit(\"selected\", this.valueModel);\n        },\n        // 树节点过滤方法\n        filterNode(query, data) {\n            if (!query) return true;\n            return data[this.props.label].indexOf(query) !== -1;\n        },\n        // 搜索树状数据中的 ID\n        queryTree(tree, id) {\n            let stark = [];\n            stark = stark.concat(tree);\n            while (stark.length) {\n                const temp = stark.shift();\n                if (temp[this.props.children]) {\n                    stark = stark.concat(temp[this.props.children]);\n                }\n                if (temp[this.props.rowId] === id) {\n                    return temp[this.props.label];\n                }\n            }\n            return \"\";\n        },\n        // 将一维的扁平数组转换为多层级对象\n        buildTree(data, id = \"0\") {\n            const fa = parentId => {\n                const temp = [];\n                for (let i = 0; i < data.length; i++) {\n                    const n = data[i];\n                    if (n[this.props.parent] === parentId) {\n                        n.children = fa(n.rowGuid);\n                        temp.push(n);\n                    }\n                }\n                return temp;\n            };\n            return fa(id);\n        },\n        // 清除空 children项\n        cleanChildren(data) {\n            const fa = list => {\n                list.map(e => {\n                    if (e.children.length) {\n                        fa(e.children);\n                    } else {\n                        delete e.children;\n                    }\n                    return e;\n                });\n                return list;\n            };\n            return fa(data);\n        }\n    }\n};\n",null]}