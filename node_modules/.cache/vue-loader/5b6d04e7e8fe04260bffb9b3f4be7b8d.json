{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/system/organizationStructure/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/system/organizationStructure/index.vue","mtime":1597225152030},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\" // Secondary package based on el-pagination\nimport * as api from \"@/api/system/organization\"\nimport { parseTime } from \"@/utils\"\nimport { mapState } from \"vuex\"\nexport default {\n    name: \"organizationStructure\",\n    components: { Pagination },\n    data () {\n        return {\n            treeData: [],\n            defaultProps: {\n                children: \"children\",\n                label: \"organizationName\"\n            },\n            tableKey: 0,\n            theight: 0,//表格高度\n            list: [],\n            total: 0,\n            orgType: [],\n            orgFun: [],\n            orgName: [],\n            listLoading: true,\n            listQuery: {\n                parentOrgCode: undefined,\n                currentPage: 1,\n                pageSize: 15,\n                organizationCode: undefined,\n                organizationName: undefined\n            },\n            showReviewer: false,\n            temp: {\n                state: 1,\n                email: undefined,\n                postalCode: undefined\n            },\n            dialogFormVisible: false,\n            dialogStatus: \"\",\n            dialogPvVisible: false,\n            pvData: [],\n            rules: {\n                organizationCode: [\n                    {\n                        required: true,\n                        message: this.$t(\"validate.required\"),\n                        trigger: \"blur\"\n                    },\n                    {\n                        max: 32,\n                        message: this.$t(\"validate.max32\"),\n                        trigger: \"blur\"\n                    }\n                ],\n                organizationName: [\n                    {\n                        required: true,\n                        message: this.$t(\"validate.required\"),\n                        trigger: \"blur\"\n                    },\n                    {\n                        max: 32,\n                        message: this.$t(\"validate.max32\"),\n                        trigger: \"blur\"\n                    }\n                ],\n                parentId: [\n                    {\n                        required: true,\n                        message: this.$t(\"validate.required\"),\n                        trigger: \"blur\"\n                    }\n                ],\n                type: [\n                    {\n                        required: true,\n                        message: this.$t(\"validate.required\"),\n                        trigger: \"blur\"\n                    }\n                ],\n                businessFunction: [\n                    {\n                        required: true,\n                        message: this.$t(\"validate.required\"),\n                        trigger: \"blur\"\n                    }\n                ],\n                mobile: [\n                    {\n                        max: 32,\n                        message: this.$t(\"validate.max32\"),\n                        trigger: \"blur\"\n                    }\n                ]\n            },\n            contentStyleObj: {\n                height: \"\"\n            },\n            downloadLoading: false\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_org_type: state => state.dict.dt_org_type,\n            dt_org_function: state => state.dict.dt_org_function\n        })\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\n            \"dt_org_type\",\n            \"dt_org_function\"\n        ])\n        this.getList()\n        this.getHeight()\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n            this.setTreeHeight()\n        }\n        this.setTreeHeight()\n    },\n    methods: {\n        treeGetList () {\n            //点击树查询\n            api.selectlists(this.listQuery).then(response => {\n                let options = [this.dt_org_type, this.dt_org_function]\n                response.data.list = this.$myFun.codeToName(response.data.list, options, [\n                    \"type\",\n                    \"businessFunction\"\n                ])\n                this.list = response.data.list\n                this.total = response.data.pages.count\n            })\n        },\n        getList () {\n            //查询组织列表\n            setTimeout(() => {\n                api.selectlists(this.listQuery).then(response => {\n                    let options = [this.dt_org_type, this.dt_org_function]\n                    response.data = this.$myFun.codeToName(response.data, options, [\n                        \"type\",\n                        \"businessFunction\"\n                    ])\n                    this.list = response.data.list\n                    this.total = response.data.pages.count\n                }),\n                    api.selecttree().then(response => {\n                        //获取树数据\n                        this.treeData = this.$myFun.addTreeRoot(response.data)\n                        this.orgName = response.data.map(function (itmes) {\n                            return [itmes.rowId, itmes.organizationName]\n                        })\n                    })\n            }, 1.5 * 100)\n        },\n        handleFilter () {\n            //查询\n            this.listQuery.page = 1\n\n            api.selectlists(this.listQuery).then(response => {\n                let options = [this.dt_org_type, this.dt_org_function]\n                response.data = this.$myFun.codeToName(response.data, options, [\n                    \"type\",\n                    \"businessFunction\"\n                ])\n                this.list = response.data.list\n            })\n        },\n        resetTemp () {\n            //重置temp\n            this.temp = {\n                state: 1,\n                parentId: this.temp.parentId\n            }\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        //树高度设置\n        setTreeHeight () {\n            this.contentStyleObj.height = this.$myFun.getTreehHeight()\n        },\n        filertOrgName (val) {\n            for (let i = 0; i < this.orgName.length; i++) {\n                if (this.orgName[i][0] == val) {\n                    return this.orgName[i][1]\n                }\n                if (val == 0) {\n                    return \"根目录\"\n                }\n            }\n        },\n        handleCreate () {\n            //新增弹窗调用\n            if (this.temp.parentId || this.temp.parentId == 0) {\n                this.resetTemp()\n                this.dialogStatus = \"create\"\n                this.dialogFormVisible = true\n                this.$nextTick(() => {\n                    this.$refs[\"dataForm\"].clearValidate()\n                })\n            } else {\n                this.$message({\n                    title: \"警告\",\n                    message: \"请选择上级菜单\",\n                    type: \"warning\"\n                })\n            }\n        },\n        createData () {\n            //新增\n            this.$refs[\"dataForm\"].validate(valid => {\n                if (valid) {\n                    api.creat(this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.$message({\n                            title: this.$t(\"message.success\"),\n                            message: this.$t(\"message.createSuccessed\"),\n                            type: \"success\",\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n        handleUpdate () {\n            if (this.selectlistRow && this.selectlistRow.length == 1) {\n                api.selectlist(this.selectlistRow[0].organizationCode).then(res => {\n                    res = res.data\n                    this.temp = res // copy obj\n                    this.dialogStatus = \"update\"\n                    this.dialogFormVisible = true\n                    this.$nextTick(() => {\n                        this.$refs[\"dataForm\"].clearValidate()\n                    })\n                })\n\n\n            } else {\n                this.$message({\n                    title: \"警告\",\n                    message: \"请选择一条信息\",\n                    type: \"warning\"\n                })\n            }\n        },\n        updateData () {\n            this.$refs[\"dataForm\"].validate(valid => {\n                if (valid) {\n                    api.updatalist(this.temp.organizationCode, this.temp).then(\n                        () => {\n                            this.getList()\n                            this.dialogFormVisible = false\n                            this.$message({\n                                title: \"成功\",\n                                message: \"更新成功\",\n                                type: \"success\",\n                                duration: 2000\n                            })\n                        }\n                    )\n                }\n            })\n        },\n        // 获取表格选中时的数据\n        selectRow (val) {\n            if (val.length > 1) {\n                this.$refs.tb_a.clearSelection() //清除其他行的选中\n                this.$refs.tb_a.toggleRowSelection(\n                    val[val.length - 1],\n                    \"selected\"\n                ) //单击行绑定点击事件\n            } else if (val.length === 1) {\n                this.selectlistRow = val\n            }\n        },\n        rowClick (val) {\n            this.$refs.tb_a.clearSelection() //清除其他行的选中\n            this.$refs.tb_a.toggleRowSelection(val) //单击行绑定点击事件\n        },\n        handleDelete () {\n            //删除列表\n            if (this.selectlistRow && this.selectlistRow.length == 1) {\n                this.$confirm(\"此操作将删除所选中数据, 是否继续?\", \"提示\", {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                })\n                    .then(() => {\n                        this.listLoading = true\n                        let ids = []\n                        this.selectlistRow.forEach((val, index) => {\n                            ids[index] = val.organizationCode\n                        })\n                        api.deletelist(ids).then(() => {\n                            this.getList(),\n                                this.$message({\n                                    title: \"成功\",\n                                    message: \"删除成功\",\n                                    type: \"success\",\n                                    duration: 2000\n                                })\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: \"info\",\n                            message: \"已取消删除\"\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: \"警告\",\n                    message: \"请选择一条信息\",\n                    type: \"warning\"\n                })\n            }\n        },\n        handleDownload () {\n            this.downloadLoading = true\n            import(\"@/vendor/Export2Excel\").then(excel => {\n                const tHeader = [\n                    \"编码\",\n                    \"名称\",\n                    \"类型\",\n                    \"父级ID\",\n                    \"联系人\",\n                    \"地址\",\n                    \"邮箱\",\n                    \"业务类型\",\n                    \"电话\",\n                    \"备注\",\n                    \"状态\",\n                    \"邮编\"\n                ]\n                const filterVal = [\n                    \"organizationCode\",\n                    \"organizationName\",\n                    \"typeCN\",\n                    \"parentId\",\n                    \"contact\",\n                    \"adress\",\n                    \"email\",\n                    \"businessFunctionCN\",\n                    \"mobile\",\n                    \"remark\",\n                    \"state\",\n                    \"postalCode\"\n                ]\n                const data = this.formatJson(filterVal, this.list)\n                excel.export_json_to_excel({\n                    header: tHeader,\n                    data,\n                    filename: \"table-list\"\n                })\n                this.downloadLoading = false\n            })\n        },\n        formatJson (filterVal, jsonData) {\n            return jsonData.map(v =>\n                filterVal.map(j => {\n                    if (j === \"timestamp\") {\n                        return parseTime(v[j])\n                    } else {\n                        return v[j]\n                    }\n                })\n            )\n        },\n        getHeight () {\n            this.contentStyleObj.height =\n                document.body.scrollHeight - 110 + \"px\"\n        },\n        handleNodeClick (data) {\n            //点击树查询\n            this.temp.parentId = data.rowId\n            this.listQuery.parentOrgCode = data.rowId\n            this.treeGetList()\n        }\n    }\n};\n",null]}