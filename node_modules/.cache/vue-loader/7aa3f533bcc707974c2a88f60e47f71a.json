{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierManagement/supplierAccess/platformNote/tab/tabDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierManagement/supplierAccess/platformNote/tab/tabDetail.vue","mtime":1599136050846},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\"\nimport { getPropsalDetail, recommendSc, createRecords } from \"@/api/project/srm/supplierManage/supplierAccess/platformNote\"\nimport Pagination from \"@/components/Pagination\" // 分页组件\nexport default {\n    name: 'tabDetail',\n    components: { Pagination },\n    data () {\n        return {\n            spanArr: [],\n            theight: 0,\n            total: 0,\n            listQuery: {\n                pageSize: 10,\n                currentPage: 1\n            },\n            currentSelectedRow: null,//当前选中的行\n            selectedRows: [],//多选时选中的所有行\n            tableData: [],\n            setData: null,\n            oprateBtnConfig: [\n                { id: 0, class: 'filter-item', icon: 'el-icon-setting', clickMethod: 'handleSet', name: '批量设置' },\n                { id: 1, class: 'filter-item ml_5', icon: 'el-icon-circle-plus-outline', clickMethod: 'handleCreate', name: '生成' }\n            ],\n            tableConfig: [\n                { label: '提案号', prop: 'proposalNo', align: 'center', width: '150' },\n                { label: '供应商名称', prop: 'supplierName', align: 'center', width: 'auto' },\n                { label: '物料分类', prop: 'materielClassName', align: 'center', width: 'auto' },//wu\n                { label: '系列', prop: 'platformSeriesCN', align: 'center', width: 'auto' },//wu\n                { label: '定位', prop: 'positionCN', align: 'center', width: 'auto' },//wu\n                { label: '评价结论', prop: 'evaluateModel', width: '130', align: 'center' },\n                { type: 'checkbox', label: '资质是否合格', prop: 'qualification', align: 'center' },\n                { type: 'checkbox', label: '是否引入', prop: 'introduction', align: 'center' },\n                { type: 'dictSelect', dType: 'dt_srm_pae', label: '资质类型', prop: 'qualifiedType', align: 'center', width: '130' },\n                { type: 'dictSelect', dType: 'dt_srm_pao', label: '引入类型', prop: 'introduceType', align: 'center', width: '130' },\n                { type: 'inputBtnRecommend', label: '分配供应商编码', prop: 'supplierCode', align: 'center', width: '180' },//wu\n                { label: '准入评价时间', prop: 'no3', align: 'center', width: '150' },//wu\n                { label: '准入评价分数', prop: 'score', align: 'center', width: '120' },//wu\n                { label: '准入评价等级', prop: 'grade', align: 'center', width: '120' },//wu\n                { label: '准入评价人', prop: 'evaluationPerson', align: 'center', width: '120' }//wu\n            ]\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_srm_pam: state => state.dict.dt_srm_pam,//综合评价等级\n            dt_srm_pae: state => state.dict.dt_srm_pae,//资质类型\n            dt_cate_platformSeries: state => state.srmBisSelect.dt_cate_platformSeries,//平台系列\n            dt_srm_pad: state => state.dict.dt_srm_pad,//定位\n            dt_srm_pao: state => state.dict.dt_srm_pao,//引入类型\n        })\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\"dt_srm_pam\", \"dt_srm_pae\", \"dt_srm_pad\", \"dt_srm_pao\"])\n        this.$store.dispatch(\"srmBisSelect/getBisData\", [\"dt_cate_platformSeries\"])\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n    },\n    methods: {\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight() - 70\n        },\n        getList () {\n            getPropsalDetail(this.listQuery).then(res => {\n                let options = [this.dt_cate_platformSeries.data, this.dt_srm_pad]\n                res.data = this.$myFun.transCodeToName(res.data, options, [['platformSeries', 'code', 'name'], 'position'])\n                this.tableData = res.data.list\n                this.total = res.data.pages.count\n                this.getSpanArr(this.tableData)\n            })\n        },\n        getSpanArr (data) {\n            data.sort(this.compareObj(\"supplierRowId\"))\n            for (var i = 0; i < data.length; i++) {\n                if (i === 0) {\n                    this.spanArr.push(1)\n                    this.pos = 0\n                } else {\n                    // 判断当前元素与上一个元素是否相同\n                    if (data[i].supplierRowId === data[i - 1].supplierRowId) {\n                        this.spanArr[this.pos] += 1\n                        this.spanArr.push(0)\n                    } else {\n                        this.spanArr.push(1)\n                        this.pos = i\n                    }\n                }\n            }\n        },\n        compareObj (prop) {\n            return function (obj1, obj2) {\n                let val1 = obj1[prop]\n                let val2 = obj2[prop]\n                if (val1 < val2) {\n                    return -1\n                } else if (val1 > val2) {\n                    return 1\n                } else {\n                    return 0\n                }\n            }\n        },\n        objectSpanMethod ({ rowIndex, columnIndex }) {\n            if (columnIndex === 1 || columnIndex === 4 || columnIndex === 9 || columnIndex === 10 || columnIndex === 11 || columnIndex === 12 || columnIndex === 13) {\n                const _row = this.spanArr[rowIndex]\n                const _col = _row > 0 ? 1 : 0\n                return {\n                    rowspan: _row,\n                    colspan: _col\n                }\n            }\n        },\n        //操作按钮事件\n        oprateClick (id) {\n            switch (id) {\n                case 0: {\n                    this.handleSet()\n                    break\n                }\n                case 1: {\n                    this.handleCreate()\n                    break\n                }\n            }\n        },\n        handleSet () {\n            this.$emit('handleSet')\n        },\n        handleSetData (sdata) {\n            this.setData = sdata\n            this.tableData.forEach((item, index) => {\n                for (let obj in sdata) {\n                    this.$set(this.tableData[index], obj, sdata[obj])\n                }\n            })\n        },\n        handleCreate () {\n            if (this.selectedRows) {\n                if (this.selectedRows.length > 0) {\n                    let createable = true\n                    this.selectedRows.forEach(item => {\n                        if (!item.supplierCode || !item.qualifiedType || !item.introduceType) {\n                            createable = false\n                        }\n                    })\n                    if (createable) {\n                        let rowIdArr = []\n                        let oprateArr = []\n\n                        this.selectedRows.forEach((item, index) => {\n                            if (index === 0) {\n                                rowIdArr.push(item.supplierRowId)\n                                oprateArr.push([])\n                                oprateArr[0].push(item)\n                            } else {\n                                let rindex = rowIdArr.indexOf(item.supplierRowId)\n                                if (rindex === -1) {\n                                    rowIdArr.push(item.supplierRowId)\n                                    oprateArr.push([])\n                                    oprateArr[rowIdArr.length - 1].push(item)\n                                } else {\n                                    oprateArr[rindex].push(item)\n                                }\n                            }\n                        })\n\n                        oprateArr.forEach((oitem, oindex) => {\n                            if (!oitem.qualification) {\n                                oitem.qualification = false\n                            } else {\n                                oitem.qualification = true\n                            }\n                            if (!oitem.introduction) {\n                                oitem.introduction = false\n                            } else {\n                                oitem.introduction = true\n                            }\n\n\n                            let cdata = { noticeItemDTOs: [] }\n                            cdata.auditState = oitem[oindex].auditState\n                            cdata.completionDate = oitem[oindex].completionDate || this.setData.completionDate\n                            cdata.feedbackDate = oitem[oindex].feedbackDate || this.setData.feedbackDate\n                            cdata.introduceType = oitem[oindex].introduceType\n                            cdata.noticeExplain = oitem[oindex].noticeExplain\n                            cdata.orgCode = oitem[oindex].orgCode\n                            cdata.orgName = oitem[oindex].orgName\n                            cdata.qualifiedType = oitem[oindex].qualifiedType || this.setData.qualifiedType\n                            cdata.questionDesc = oitem[oindex].questionDesc || this.setData.questionDesc\n                            cdata.questionType = oitem[oindex].questionType || this.setData.questionType\n                            cdata.state = oitem[oindex].state\n                            cdata.supplierCode = oitem[oindex].supplierCode\n                            cdata.supplierName = oitem[oindex].supplierName\n                            cdata.supplierRowId = oitem[oindex].supplierRowId\n                            oitem.forEach((item, index) => {\n                                cdata.noticeItemDTOs.push({})\n                                cdata.noticeItemDTOs[index].introduction = oitem[oindex].introduction || this.setData.introduction\n                                cdata.noticeItemDTOs[index].qualification = oitem[oindex].qualification || this.setData.qualification\n                                cdata.noticeItemDTOs[index].proposalNo = item.proposalNo\n                                cdata.noticeItemDTOs[index].materielClass = item.materielClass\n                                cdata.noticeItemDTOs[index].materielClassName = item.materielClassName\n                                cdata.noticeItemDTOs[index].remark = item.remark\n                            })\n                            console.log(cdata, '生成数据')\n                            createRecords(cdata).then(() => {\n                                this.$message({ type: 'success', message: '生成操作成功' })\n                                this.$emit('getList')\n                            })\n                        })\n                    } else {\n                        this.$message({ type: 'warning', message: '请先选完所选内容对应的资质类型，引入类型，推荐分配供应商编码再生成' })\n                    }\n                } else {\n                    this.$message({ type: 'warning', message: '请先选择要生成入平台通知的数据' })\n                }\n            } else {\n                this.$message({ type: 'warning', message: '请先选择要生成入平台通知的数据' })\n            }\n        },\n        handleDelete (index, row) {\n            console.log(index, row)\n            this.tableData = this.tableData.filter((item, indexf) => {\n                console.log(item)\n                return indexf !== index\n            })\n        },\n        // initTableData (data) {\n        //     data.forEach((item, index) => {\n        //         for (let key in item) {\n        //             if (key === 'introduction' || key === 'qualification') {\n        //                 if (!item[key]) {\n        //                     item[key] = false\n        //                 }\n        //             }\n        //         }\n        //     })\n        //     this.tableData = data\n        // },\n        initTable (data) {\n            this.tableData = data\n        },\n        // 表格选择框选中 注:参数为选中的所有行的数组\n        selectChange (val) {\n            if (this.isSingle) {\n                if (val.length > 1) {\n                    this.$refs.tb.clearSelection() //清除其他行的选中\n                    this.$refs.tb.toggleRowSelection(val[val.length - 1], \"selected\") //单击行绑定点击事件\n                } else if (val.length === 1) {\n                    this.selectedRows = val\n                    this.selectSameProp(this.tableData, \"supplierRowId\", val)\n                } else if (val.length === 0) {\n                    this.selectedRows = val\n                    // this.itemList = []\n                }\n            } else {\n                this.selectSameProp(this.tableData, \"supplierRowId\", val)\n                // this.selectedRows = val\n            }\n        },\n        selectSameProp (data, prop, val) {\n            this.selectedRows = []\n            for (let j = 0; j < val.length; j++) {\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i][prop] === val[j][prop]) {\n                        this.selectedRows.push(data[i])\n                    }\n                }\n            }\n        },\n        recommendScode (index, row) {\n            if (row.introduceType && row.qualifiedType) {\n                let params = {\n                    introduceType: row.introduceType,\n                    qualifiedType: row.qualifiedType\n                }\n                recommendSc(params).then(res => {\n                    this.$set(this.tableData[index], 'supplierCode', res.data)\n                })\n            } else {\n                this.$message({ type: 'warning', message: '请先选择资质类型和引入类型' })\n            }\n        }\n    }\n}\n",null]}