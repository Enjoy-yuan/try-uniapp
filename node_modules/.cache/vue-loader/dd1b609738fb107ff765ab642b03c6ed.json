{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/system/employeesManagement/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/system/employeesManagement/index.vue","mtime":1596610934240},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport Pagination from \"@/components/Pagination\" // Secondary package based on el-pagination\nimport { selectlists, creat, deletelist, updatalist, adduser, selectuser, deleteuser } from '@/api/system/employees'\nimport { selecttree } from '@/api/system/organization'\n\n\nexport default {\n    name: \"employeesManagement\",\n    components: { Pagination },\n    data () {\n        let validatePassword = (rule, value, callback) => {\n            const reg = /(^[1-9]\\d{5,11}$)/\n            if (value == '' || value == undefined || value == null) {\n                callback()\n            } else {\n                if ((!reg.test(value)) && value != '') {\n                    callback(new Error('请输入正确的密码'))\n                } else {\n                    callback()\n                }\n            }\n        }\n        return {\n            modalnum: null,//模板编号\n            theight: 0,//表格高度\n            isSingle: true,//表格是否单选 点击各按钮根据流程逻辑控制单多选\n            currentSelectedRow: null,//当前选中的行\n            selectedRows: null,//多选时选中的所有行\n            //树高度样式\n            contentStyleObj: {\n                height: \"\"\n            },\n            treeData: [],\n            defaultProps: {\n                children: \"children\",\n                label: \"organizationName\"\n            },\n            tableKey: 0,//表格索引，虚拟dom渲染表格时使用\n            list: [],\n            total: 0,\n            orgName: [],\n            listLoading: true,\n            listQuery: {\n                currentPage: 1,\n                pageSize: 15,\n                page: 1,\n                scope: false\n            },\n            listuser: [],//关联员工记录\n            frametotal: 0,//弹框的条数\n            readonly: false,\n            temp: {},\n            dialogFormVisible: false,\n            dialogFormUser: false,\n            dialogStatus: '',\n            rules: {\n                employeeCode: [\n                    { required: true, message: this.$t('validate.required'), trigger: 'blur' },\n                    { max: 32, message: this.$t('validate.max32'), trigger: 'blur' },\n\n                ],\n                employeeName: [\n                    { required: true, message: this.$t('validate.required'), trigger: 'blur' },\n                    { max: 32, message: this.$t('validate.max32'), trigger: 'blur' }\n                ],\n                state: [\n                    { required: true, message: this.$t('validate.required'), trigger: 'blur' }\n                ],\n                userName: [\n                    { required: true, message: this.$t('validate.required'), trigger: 'blur' }\n                ],\n                realName: [\n                    { required: true, message: this.$t('validate.required'), trigger: 'blur' }\n                ],\n                // password: [\n                //     { required: true, message: this.$t('validate.required'), trigger: 'blur' }\n                // ],\n                password: [\n                    { required: true, validator: validatePassword, trigger: \"blur\", message: \"请输入6-12位数字\", }\n                ],\n                officePhone: [\n                    { max: 32, message: this.$t('validate.max32'), trigger: 'blur' }\n                ]\n            },\n            dialogPvVisible: false,\n            pvData: [],\n\n        }\n    },\n    computed: {\n        organizationId: {\n            get: function () {\n                return this.organizationId //获取的时候直接获取值\n            },\n            set: function (listQuery) {\n                this.organizationId = listQuery.organizationName //设置的时候变为大写\n            }\n        }\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\n            \"dt_org_type\",\n            \"dt_org_function\"\n        ])\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n            this.setTreeHeight()\n        }\n        this.getList()\n        this.setTreeHeight()\n    },\n    methods: {\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        treeGetList () {\n            //点击树查询\n            this.listLoading = true\n            selectlists(this.listQuery).then(response => {\n                this.list = response.data.list\n                this.total = response.data.pages.count\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n\n        },\n        getList () {\n            //查询\n            this.listLoading = true\n            selectlists(this.listQuery).then(response => {\n                this.list = response.data.list\n                this.total = response.data.pages.count\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            }),\n                selecttree().then(response => {//获取树数据\n                    this.treeData = this.$myFun.addTreeRoot(response.data)\n\n                    this.orgName = response.data.map(function (itmes) {\n                        return [itmes.rowId, itmes.organizationName]\n                    })\n                    setTimeout(() => {\n                        this.listLoading = false\n                    }, 1.5 * 100)\n                })\n        },\n        filertOrgName (val) {\n            for (let i = 0; i < this.orgName.length; i++) {\n                if (this.orgName[i][0] == val) {\n                    return this.orgName[i][1]\n                }\n                if (val == 0) {\n                    return \"根目录\"\n                }\n            }\n        },\n        handleFilter () {//查询组织列表\n            this.listQuery.page = 1\n            this.listLoading = true\n            selectlists(this.listQuery).then(response => {\n                this.list = response.data.list\n                this.total = response.data.pages.count\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n        },\n        resetTemp () {\n            this.temp = {\n                sex: 1,\n                state: 1,\n                isLog: 1\n            }\n        },\n        handleCreate () {//新增弹窗\n            if (this.listQuery.orgId || this.listQuery.orgId == 0) {\n                this.resetTemp()\n                this.dialogStatus = 'create'\n                this.dialogFormVisible = true\n                this.temp.organizationId = this.listQuery.orgId\n                this.readonly = true//组织编码可以编写\n                selecttree().then(response => {//获取树数据\n                    this.treeData = this.$myFun.addTreeRoot(response.data)\n                })\n                this.$nextTick(() => {\n                    this.$refs['dataForm'].clearValidate()\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择上级菜单',\n                    type: 'warning'\n                })\n            }\n\n        },\n        createData () {//新增\n            this.$refs['dataForm'].validate((valid) => {\n                if (valid) {\n                    creat(this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.$message({\n                            title: '成功',\n                            message: '创建成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n        handleUpdate () {//编辑弹窗\n            if (this.selectedRows && this.selectedRows.length == 1) {\n                this.readonly = true//员工编码不可以编写\n                this.temp = this.selectedRows[0] // copy obj\n                this.dialogStatus = 'update'\n                this.dialogFormVisible = true\n                this.$nextTick(() => {\n                    this.$refs['dataForm'].clearValidate()\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        updateData () {//编辑\n            this.$refs['dataForm'].validate((valid) => {\n                if (valid) {\n                    // const tempData = Object.assign({}, this.temp)\n                    // tempData.timestamp = +new Date(tempData.timestamp) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464\n                    updatalist(this.temp.employeeCode, this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.$message({\n                            title: '成功',\n                            message: '更新成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n        //查询关联的员工记录\n        getUserList (code) {\n            selectuser(code).then(response => {\n                this.listuser = response.data\n                this.frametotal = response.data.length\n                // this.total = response.data.pages.count\n            })\n        },\n        handadduser () {//添加\n            adduser(this.selectedRows[0].employeeCode, this.temp).then(() => {\n                this.handleUser()\n                this.$message({\n                    title: '成功',\n                    message: '创建成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n        },\n        handdeleltuser () {//删除\n            if (this.selectedRowsUser && this.selectedRowsUser.length == 1) {\n                this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning',\n\n                }).then(() => {\n                    let name = []\n                    for (let i = 0; i < this.selectedRowsUser.length; i++) {\n                        name[i] = this.selectedRowsUser[i].userName\n                    }\n                    deleteuser(this.selectedRows[0].employeeCode, name).then(() => {\n                        this.dialogFormUser = true\n                        this.handleUser()\n                    })\n                }).catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条员工信息',\n                    type: 'warning'\n                })\n            }\n        },\n        handleUser () {//用户维护\n            if (this.selectedRows && this.selectedRows.length == 1) {\n                this.getUserList(this.selectedRows[0].employeeCode)\n                this.resetTemp()\n                this.temp.employeeCode = this.selectedRows[0].employeeCode\n                this.temp.employeeName = this.selectedRows[0].employeeName\n                this.dialogFormUser = true\n                this.$nextTick(() => {\n                    this.$refs['dataForm'].clearValidate()\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条员工信息',\n                    type: 'warning'\n                })\n            }\n\n        },\n        handleAddUser () {\n            adduser()\n        },\n        // 表格选择框选中 注:参数为选中的所有行的数组\n        selectChange (val) {\n            if (this.isSingle) {\n                if (val.length > 1) {\n                    this.$refs.tb.clearSelection() //清除其他行的选中\n                    this.$refs.tb.toggleRowSelection(val[val.length - 1], \"selected\") //单击行绑定点击事件\n                } else if (val.length === 1) {\n                    this.selectedRows = val\n                    this.currentSelectedRow = val[val.length - 1]\n                }\n            } else {\n                this.selectedRows = val\n                this.currentSelectedRow = val[val.length - 1]\n            }\n        },\n        //点击某行时执行\n        rowClick (val) {\n            if (this.isSingle) {\n                this.$refs.tb.clearSelection() //清除其他行的选中\n            }\n            this.$refs.tb.toggleRowSelection(val) //单击行绑定点击事件\n        },\n        //删除\n        handleDelete () {\n            if (this.selectedRows && this.selectedRows.length == 1) {\n                this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning',\n                }).then(() => {\n                    let ids = []\n                    this.selectedRows.forEach((val, index) => {\n                        ids[index] = val.employeeCode\n                    })\n                    deletelist(ids).then(() => {\n                        this.getList(),\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                    })\n                }).catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //树高度设置\n        setTreeHeight () {\n            this.contentStyleObj.height = this.$myFun.getTreehHeight()\n        },\n        handleNodeClick (data) {\n            //点击树查询\n            this.listQuery.orgCode = data.organizationCode\n            this.listQuery.orgId = data.rowId\n            this.treeGetList()\n        }, selectRowUser (val) {\n            this.selectedRowsUser = val\n        }\n    }\n};\n",null]}