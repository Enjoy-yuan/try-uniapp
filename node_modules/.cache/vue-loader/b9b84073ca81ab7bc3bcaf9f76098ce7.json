{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierManagement/supplierAccess/investigatePlan/tab/addTab/tabProject.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierManagement/supplierAccess/investigatePlan/tab/addTab/tabProject.vue","mtime":1596610933930},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { queryRecordTree as queryModel } from \"@/api/project/srm/contractManage/evaluationModel\"\nimport { deleteProject } from \"@/api/project/srm/supplierManage/supplierAccess/investigatePlan\"\nimport caiGou from '@/components/Select/xtpt/caigou'//下拉组件\nimport { DICT_CODE } from '@/utils/constant'\nimport { mapState } from \"vuex\"\n\n\nexport default {\n    name: 'tabProject',\n    props: ['orgCode'],\n    components: { caiGou },\n    data () {\n        return {\n            DICT_CODE: DICT_CODE,\n            tableData: [],\n            modelArr: [],//模型选择框\n            modelPar: {\n                method: 'combobox',\n                level: 1,\n                type: 'PAK1',\n                purchaseOrg: null,\n                category: 'PB20',\n                state: 'PAS0',\n                evaluationItem: null\n            },\n            oprateBtnConfig: [\n                { id: 0, class: 'filter-item', icon: 'el-icon-plus', clickMethod: 'handleAdd', name: '新增' },\n                { id: 1, class: 'filter-item ml_5', icon: 'el-icon-plus', clickMethod: 'handleRefresh', name: '刷新' },\n            ],\n            tableConfig: [\n                { label: '考察项', dType: 'dt_srm_pb4', prop: 'item', align: 'center', width: '120', type: 'dictSelect', optionArr: [] },\n                { label: '是否反馈', prop: 'feedback', align: 'center', width: 'auto', type: 'checkbox' },\n                { label: '是否考察', prop: 'investigate', align: 'center', width: 'auto', type: 'checkbox' },\n                { label: '考察部门', prop: 'department', align: 'center', width: '120', type: 'selectcaiGou', copmNum: 0 },\n                { label: '任务接收人', prop: 'taskUserName', propCode: 'taskUser', propName: 'taskUserName', align: 'center', width: '120', type: 'inputBtnPerson', copmNum: 1 },\n                { label: '考察人', prop: 'investigateUser', align: 'center', width: '120', type: 'commonInput', copmNum: 1 },\n                { label: '评价人', prop: 'evaluateUserName', propCode: 'evaluateUser', propName: 'evaluateUserName', align: 'center', width: '120', type: 'inputBtnPerson', copmNum: 1 },\n                { label: '评价模型号', dType: 'dt_yw_pjmx', prop: 'evaluateModel', align: 'center', width: '200', type: 'bisSelect', key: 'classificationCode', value: 'classificationCode', optionArr: [] },\n                { label: '考察理由', prop: 'reason', align: 'center', width: '220', type: 'commonInput' }\n            ],\n            dataIndex: null\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_srm_pb1: state => state.dict.dt_srm_pb1,//评价分类\n            dt_srm_pb4: state => state.dict.dt_srm_pb4//考察项\n        })\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\"dt_srm_pb1\", \"dt_srm_pb4\"])\n    },\n    watch: {\n        'orgCode' () {\n            this.getModelNoArray()\n        }\n    },\n    methods: {\n        //评价模型号异步获取处理\n        async getModelNoArray(){\n            for(let index=0;index<this.tableData.length;index++){\n                let modelpar = this.modelPar\n                modelpar.purchaseOrg = this.orgCode\n                modelpar.evaluationItem = this.tableData[index].item\n                await queryModel(modelpar).then(res => {\n                    this.modelArr[index] = res.data\n                    this.modelArr[index].map(item => {\n                        item.evaluateModel = item.classificationCode\n                    })\n                    let options = [this.dt_srm_pb1]\n                    this.modelArr[index] = this.$myFun.codeToName(this.modelArr[index], options, ['classification'])\n                    let changeValue = true\n                    this.modelArr[index].forEach(item => {\n                        if (item.classificationCode === this.tableData[index].evaluateModel) {\n                            changeValue = false\n                        }\n                    })\n                    this.$set(this.modelArr, index, this.modelArr[index])\n                    if (changeValue) {\n                        if (this.modelArr[index].length > 0) {\n                            this.tableData[index].evaluateModel = this.modelArr[index][0].classificationCode\n                        } else {\n                            this.tableData[index].evaluateModel = null\n                        }\n                    }\n                })\n            }\n        },\n        // setModelNo () {\n        //     this.tableData.forEach((item, index) => {\n        //         this.getModelNo(index, item.item)\n        //     })\n        // },\n        getModelNo (index, evaluationItem) {\n            let modelpar = this.modelPar\n            modelpar.purchaseOrg = this.orgCode\n            modelpar.evaluationItem = evaluationItem\n            queryModel(modelpar).then(res => {\n                this.modelArr[index] = res.data\n                this.modelArr[index].map(item => {\n                    item.evaluateModel = item.classificationCode\n                })\n                let options = [this.dt_srm_pb1]\n                this.modelArr[index] = this.$myFun.codeToName(this.modelArr[index], options, ['classification'])\n                let changeValue = true\n                this.modelArr[index].forEach(item => {\n                    if (item.classificationCode === this.tableData[index].evaluateModel) {\n                        changeValue = false\n                    }\n                })\n                this.$set(this.modelArr, index, this.modelArr[index])\n                if (changeValue) {\n                    if (this.modelArr[index].length > 0) {\n                        this.tableData[index].evaluateModel = this.modelArr[index][0].classificationCode\n                    } else {\n                        this.tableData[index].evaluateModel = null\n                    }\n                }\n            })\n        },\n        handleAdd () {\n            this.$emit('checkAdd', 'project')\n        },\n        oprateAdd () {\n            let obj = {\n                item: null,\n                orgCode: null,\n                feedback: false,\n                investigate: false,\n                department: null,\n                departmentName: null,\n                taskUser: null,\n                investigateUser: null,\n                evaluateUser: null,\n                evaluateModel: null,\n                position: null,\n            }\n            this.tableData.push(obj)\n            this.modelArr.push([])\n        },\n        handleRefresh () {\n            console.log('刷新')\n        },\n        handleDelete (index, row) {\n            this.modelArr.splice(index, 1)\n            if (row.rowId) {\n                deleteProject(row.investigateNo, row.rowId).then(() => {\n                    this.$message({ type: 'success', message: '删除成功' })\n                    this.tableData = this.tableData.filter((item, indexf) => {\n                        this.modelArr.splice(indexf, 1)\n                        return item.rowId !== row.rowId\n                    })\n                })\n            } else {\n                this.tableData = this.tableData.filter((item, indexf) => {\n                    return indexf !== index\n                })\n            }\n        },\n        initTable (data) {\n            this.tableData = data\n            this.tableData.forEach(() => {\n                this.modelArr.push([])\n            })\n            this.getModelNoArray()\n        },\n        showPerson (propCode, propName, index) {\n            let title = ''\n            switch (propCode) {\n                case 'taskUser': {\n                    title = '任务接收人选择'\n                    break\n                }\n                case 'evaluateUser': {\n                    title = '评价人选择'\n                    break\n                }\n            }\n            this.dataIndex = index\n            this.$emit('showPerson', title, propCode, propName)\n        },\n        personConfirm (propCode, propName, val) {\n            if (propCode === 'taskUser') {\n                this.$set(this.tableData[this.dataIndex], 'investigateUser', val[0].employeeName)\n\n                this.$set(this.tableData[this.dataIndex], 'evaluateUser', val[0].employeeCode)\n                this.$set(this.tableData[this.dataIndex], 'evaluateUserName', val[0].employeeName)\n            }\n            this.$set(this.tableData[this.dataIndex], propCode, val[0].employeeCode)\n            this.$set(this.tableData[this.dataIndex], propName, val[0].employeeName)\n        },\n        changeItem (index, value) {\n            this.getModelNo(index, value)\n        },\n        setCaigou (options) {\n            if (options) {\n                if (options.length > 0) {\n                    this.listQuery.orgCode = options[0].organizationCode\n                    this.getList()\n                }\n            }\n        },\n        selectName (name, index) {\n            this.tableData[index].departmentName = name\n        }\n    }\n}\n",null]}