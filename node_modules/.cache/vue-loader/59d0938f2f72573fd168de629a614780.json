{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/contractManage/supplierPerformance/problemManage/problemHandling/content/problemManage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/contractManage/supplierPerformance/problemManage/problemHandling/content/problemManage.vue","mtime":1599136050787},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from \"@/api/project/srm/contractManage/problemManagement\"\nimport resume from \"../dialog/resume\" //履历\nimport { DICT_CODE } from '@/utils/constant'\nimport caiGou from '@/components/Select/xtpt/caigou'//下拉组件\nimport Pagination from \"@/components/Pagination\"\nimport { mapState } from \"vuex\"\n\nexport default {\n    name: \"problemHandling\",\n    components: { Pagination, caiGou, resume },\n    data () {\n        return {\n            modalnum: null,//模板编号\n            theight: 0,\n            isSingle: true,//表格是否单选 点击各按钮根据流程逻辑控制单多选\n            currentSelectedRow: null,//当前选中的行\n            selectedRows: null,//多选时选中的所有行\n            list: null,\n            listSub: null,\n            total: 0,\n            selectedrow: null,//主表选中行\n            DICT_CODE: DICT_CODE,\n            tableConfig: [\n                { label: '序号', prop: 'rowId', align: 'center', width: '80px' },\n                { label: '组织编码', prop: 'orgName', align: 'center', width: 'auto' },\n                { label: '问题计划号', prop: 'questionNo', align: 'center', width: '120px' },\n                { label: '问题状态', prop: 'stateCN', align: 'center', width: 'auto' },\n                { label: '严重等级', prop: 'severityLevelCN', align: 'center', width: 'auto' },\n                { label: '问题大类', prop: 'statisticalBigClassCN', align: 'center', width: 'auto' },\n                { label: '供应商', prop: 'supplierCode', align: 'center', width: 'auto' },\n                { label: '供应商名称', prop: 'supplierName', align: 'center', width: '150px' },\n                { label: '物料分类', prop: 'materielClass', align: 'center', width: 'auto' },\n                { label: '物料', prop: 'materielCode', align: 'center', width: 'auto' },\n                { label: '物料名称', prop: 'materielName', align: 'center', width: 'auto' },\n                { label: '问题描述', prop: 'questionDesc', align: 'center', width: 'auto' },\n                { label: '发现时间', prop: 'firstFindTime', align: 'center', width: 'auto' },\n                { label: '创建人', prop: 'creatorName', align: 'center', width: 'auto' },\n                { label: '创建时间', prop: 'createTime', align: 'center', width: 'auto' },\n                { label: '修改人', prop: 'updatorName', align: 'center', width: 'auto' },\n                { label: '修改时间', prop: 'updateTime', align: 'center', width: 'auto' }\n            ],\n            subtableConfig: [\n                { label: '序号', prop: 'rowId', align: 'center', width: '80px' },\n                { label: '处理单号', prop: 'questionNo', align: 'center', width: '120px' },\n                { label: '问题计划号', prop: 'handleOrderNo', align: 'center', width: '120px' },\n                { label: '类型', prop: 'handleTypeCodeCN', align: 'center', width: 'auto' },\n                { label: '状态', prop: 'handleState', align: 'center', width: 'auto' },\n                { label: '解决对策', prop: 'solutions', align: 'center', width: 'auto' },\n                { label: '方案审核', prop: 'auditStateCN', align: 'center', width: 'auto' },\n                { label: '审核说明', prop: 'auditExplain', align: 'center', width: 'auto' },\n                { label: '负责人', prop: 'handler', align: 'center', width: 'auto' },\n                { label: '预计完成时间', prop: 'predictCompletionTime', align: 'center', width: 'auto' },\n                { label: '预计关闭日期', prop: 'closeTime', align: 'center', width: 'auto' },\n                { label: '实际解决日期', prop: 'realSolveTime', align: 'center', width: 'auto' },\n                { label: '创建人', prop: 'creator', align: 'center', width: 'auto' },\n                { label: '创建时间', prop: 'createTime', align: 'center', width: 'auto' },\n                { label: '修改人', prop: 'updator', align: 'center', width: 'auto' },\n                { label: '修改时间', prop: 'updateTime', align: 'center', width: 'auto' }\n            ],\n            listQuery: {\n                purchaseOrg: 'dtcg0001',\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            sublistQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            tableKey: [0, 1]//表格索引，虚拟dom渲染表格时使用\n\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_srm_pc3: state => state.dict.dt_srm_pc3,\n            dt_srm_pc4: state => state.dict.dt_srm_pc4,\n            dt_srm_pb4: state => state.dict.dt_srm_pb4,\n            dt_srm_pc5: state => state.dict.dt_srm_pc5,\n            dt_srm_pcl: state => state.dict.dt_srm_pcl,\n        })\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", ['dt_srm_pc3', 'dt_srm_pc4', 'dt_srm_pb4', 'dt_srm_pc5', 'dt_srm_pcl'])\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n    },\n    methods: {\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight() - 285\n        },\n        refresh () {\n            this.getList()\n        },\n        checked () {\n            this.$refs.tb.toggleRowSelection(this.list[0], true)//官网方法，重点\n        },\n        //显示主表\n        getList () {\n            api.queryRecord(this.listQuery).then(res => {\n                let options = [this.dt_srm_pc3, this.dt_srm_pc4, this.dt_srm_pb4]\n                res.data = this.$myFun.codeToName(res.data, options, ['state', 'severityLevel', 'statisticalBigClass'])\n                this.list = res.data.list\n                this.total = res.data.pages.count\n                this.$nextTick(function () {\n                    this.checked()\n                })\n            })\n        },\n        //显示从表\n        getSubList () {\n            let dto = {\n                currentPage: 1,\n                pageSize: 10,\n                rowId: this.selectlistRow.rowId\n            }\n            api.queryRecordItems(dto).then(res => {\n                let options = [this.dt_srm_pc5, this.dt_srm_pcl]\n                res.data = this.$myFun.codeToName(res.data, options, ['handleTypeCode', 'auditState'])\n                this.listSub = res.data.list\n            })\n        },\n\n        //履历\n        handleResume () {\n            if (this.selectlistRow) {\n                this.$refs.resume.dialogVisible = true\n                this.$refs.resume.rowId = this.selectlistRow.rowId\n                this.$refs.resume.getList()\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning',\n                    duration: 2000\n                })\n            }\n\n        },\n        //查询\n        handleQuery () {\n            this.listSub = []\n            this.listQuery.currentPage = 1\n            this.getList()\n        },\n        //从表查询按钮单击事件\n        handleSearch () {\n            if (this.selectlistRow) {\n                let dto = {\n                    currentPage: 1,\n                    pageSize: 10,\n                    rowId: this.selectlistRow.rowId\n                }\n                api.queryRecordItems(dto).then(res => {\n                    console.log(res, 'ppkkk')\n                    this.listSub = res.data.list\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning',\n                    duration: 2000\n                })\n            }\n        },\n        handleSee (index, val) {\n            api.queryRecordAll(val.rowId).then(res => {\n                console.log(res, 'kkkkkk')\n                this.$emit('setState', 'search', res.data)\n            })\n        },\n        //从表方案处理按钮单击事件\n        handlePlan () {\n            if (this.selectlistRow) {\n                if (this.selectlistRow.state == 'PC31') {\n                    let status = this.listSub.every(v => {\n                        return v.handleStateCode !== 'PCJ0'\n                    })\n                    if (status) {\n                        this.$emit('setState', 'create', this.selectlistRow)\n                    } else {\n                        this.$message({\n                            title: '警告',\n                            message: '含有编制状态不可处理方案',\n                            type: 'warning',\n                            duration: 2000\n                        })\n                    }\n                } else {\n                    this.$message({\n                        title: '警告',\n                        message: '非问题解决状态不能执行此操作',\n                        type: 'warning',\n                        duration: 2000\n                    })\n                }\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning',\n                    duration: 2000\n                })\n            }\n        },\n        handleUpdateItems (index, val) {\n            this.$emit('setState', 'update', val)\n        },\n        //从表提交按钮单击事件\n        handleSubmit () {\n            if (this.selectlistRow && this.selectlistRow.state == 'PC32') {\n                if (this.selectedRowsSub) {\n                    this.$confirm(`是否提交？`, \"提示\", {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }).then(() => {\n                        let dto = {\n                            rowId: this.selectedRowsSub.rowId\n                        }\n                        api.submitRecord(dto).then(() => {\n                            this.$message({\n                                title: '成功',\n                                message: '提交成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                            this.getList()\n                        })\n                    }).catch(() => {\n                        this.$message({\n                            type: \"info\",\n                            message: \"已取消\"\n                        })\n                    })\n                } else {\n                    this.$message({\n                        title: '警告',\n                        message: '请选择一条信息',\n                        type: 'warning',\n                        duration: 2000\n                    })\n                }\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '非解决中状态不可执行此操作',\n                    type: 'warning',\n                    duration: 2000\n                })\n            }\n        },\n        //问题解决按钮单击事件\n        handleSolve () {\n            if (this.selectlistRow && this.selectlistRow.state == 'PC32') {\n                if (this.selectedRowsSub) {\n                    this.$confirm(`确认已按处理方案解决问题？确认后将由相关负责人进行复检；处理单号：${this.selectedRowsSub.questionNo}`, \"提示\", {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }).then(() => {\n                        let dto = {\n                            rowId: this.selectedRowsSub.rowId\n                        }\n                        api.solveRecord(dto).then(() => {\n                            this.$message({\n                                title: '成功',\n                                message: '解决成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                            this.getList()\n                        })\n                    }).catch(() => {\n                        this.$message({\n                            type: \"info\",\n                            message: \"已取消\"\n                        })\n                    })\n                } else {\n                    this.$message({\n                        title: '警告',\n                        message: '请选择一条信息',\n                        type: 'warning',\n                        duration: 2000\n                    })\n                }\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '非解决中状态不可执行此操作',\n                    type: 'warning',\n                    duration: 2000\n                })\n            }\n\n        },\n        //从表删除按钮单击事件\n        handleDeleteSub (index, val) {\n            console.log(index, val)\n            this.$confirm(\"是否删除该信息\", \"提示\", {\n                confirmButtonText: \"确定\",\n                cancelButtonText: \"取消\",\n                type: \"warning\"\n            }).then(() => {\n                api.deleteRecordItems(val.rowId).then(() => {\n                    this.$message({\n                        title: '成功',\n                        message: '删除成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                    this.getList()\n                })\n            }).catch(() => {\n                this.$message({\n                    type: \"info\",\n                    message: \"已取消\"\n                })\n            })\n        },\n        //每页大小变化\n        handleSizeChange (val) {\n            this.listQuery.pageSize = val\n            this.getList()\n        },\n        //当前页变化\n        handleCurrentChange (val) {\n            this.listQuery.currentPage = val\n            this.getList()\n        },\n        // 表格选择框选中 注:参数为选中的所有行的数组\n        selectChange (val) {\n            this.selectlistRow = val[val.length - 1]\n            if (val.length > 1) {\n                this.$refs.tb.clearSelection()\n                this.$refs.tb.toggleRowSelection(val.pop())\n            }\n            if (this.selectlistRow) {\n                this.getSubList()\n            }\n            this.$refs.tb.setCurrentRow(this.selectlistRow)\n        },\n        //点击表格某一行\n        rowClick (val) {\n            this.$refs.tb.clearSelection()\n            this.$refs.tb.toggleRowSelection(val)\n        },\n        selectChangeSub (val) {\n            this.selectedRowsSub = val[val.length - 1]\n            if (val.length > 1) {\n                this.$refs.tbSub.clearSelection()\n                this.$refs.tbSub.toggleRowSelection(val.pop())\n            }\n            this.$refs.tbSub.setCurrentRow(this.selectedRowsSub)\n        },\n        //加载时默认选中第一行\n        setFirstLine () {\n            this.$nextTick(() => {\n                this.$refs.tbmain.setCurrentRow(this.list[0])\n            })\n        }\n    }\n};\n",null]}