{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/priceManage/actuarialPrice/actuarialDetailCost/tab/tabJGcost.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/priceManage/actuarialPrice/actuarialDetailCost/tab/tabJGcost.vue","mtime":1596610933674},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import { queryRecords } from \"@/api/project/srm/supplierSelection/constantParameters\"\nexport default {\n    name: 'tabJGcost',\n    props: ['tabJGcostList'],\n    data () {\n        return {\n            type: null,\n            tableData: [],\n        }\n    },\n    watch: {\n        tabJGcostList (val) {\n            if (this.type == 'add') {\n                let arr = JSON.parse(JSON.stringify(val))\n                arr.forEach(i => {\n                    i.actuarialProcessHour = i.processHour ? i.processHour : 0 //工时精算\n                    i.actuarialOperatorCount = i.operatorCount ? i.operatorCount : 0 //人数精算\n                    i.actuarialProcessUnitPrice = i.processUnitPrice ? i.processUnitPrice : 0 //单价精算\n                    i.actuarialConsumptionQuota = i.consumptionQuota ? i.consumptionQuota : 0 //消耗定额精算\n                    i.actuarialDeviceOriginalValue = i.deviceOriginalValue ? i.deviceOriginalValue : 0 //设备原值精算\n                    i.actuarialUnitPrice = i.unitPrice ? i.unitPrice : 0 //单价精算\n                    i.actuarialRejectRate = i.rejectRate ? i.rejectRate : 0 //废品率精算\n\n                    i.actuarialLaborCost = this.checkValue(i.actuarialProcessHour * i.actuarialOperatorCount * i.actuarialProcessUnitPrice) || 0//人工费精算\n                    i.actuarialBurningCharge = this.checkValue(i.ratedPower * i.powerUtilization * i.electricityTariff * i.actuarialProcessHour) || 0 //燃动费精算\n                    i.actuarialDeviceAllocationWork = this.checkValue(i.actuarialDeviceOriginalValue * 0.95 / 10 / 12 / 21.75 / 8 / i.constantValue) || 0 //设备分摊工时费精算\n                    i.actuarialDeviceAllocation = this.checkValue(i.actuarialDeviceAllocationWork * i.actuarialProcessHour) || 0 //设备分摊精算\n                    i.actuarialAuxiliaryMaterialCost = this.checkValue(i.actuarialConsumptionQuota * i.actuarialUnitPrice) || 0 //辅料成本精算\n                    i.actuarialSubtotalCost = this.checkValue(i.actuarialLaborCost + i.actuarialBurningCharge + i.actuarialDeviceAllocation + i.actuarialAuxiliaryMaterialCost) || 0 //费用精算\n                    i.actuarialWasteLoss = this.checkValue(i.actuarialRejectRate * i.actuarialSubtotalCost) || 0 //废品损失精算\n                })\n                this.tableData = arr\n\n            } else {\n                let arr = JSON.parse(JSON.stringify(val))\n                this.tableData = arr\n            }\n        }\n    },\n    methods: {\n        checkValue (val) {\n            if (isNaN(val) || val == Infinity) {\n                return undefined\n            } else {\n                if (val.toString().indexOf('.') !== -1) {\n                    val = parseFloat(val).toFixed(2)\n                }\n                return val\n            }\n        },\n        getSummaries (param) {\n            const { columns, data } = param\n\n            const sums = []\n            columns.forEach((column, index) => {\n                if (index === 0) {\n                    sums[index] = '总计'\n                    return\n                }\n                const values = data.map(item => Number(item[column.property]))\n                if (!values.every(value => isNaN(value))) {\n                    if (column.property == 'partName' || column.property == 'actuarialProcessHour' || column.property == 'actuarialOperatorCount' || column.property == 'actuarialProcessUnitPrice' || column.property == 'actuarialLaborCost' || column.property == 'ratedPower' || column.property == 'actuarialBurningCharge' ||\n                        column.property == 'actuarialDeviceOriginalValue' || column.property == 'actuarialDeviceAllocationWork' || column.property == 'actuarialDeviceAllocation' || column.property == 'actuarialConsumptionQuota' || column.property == 'actuarialUnitPrice' ||\n                        column.property == 'actuarialAuxiliaryMaterialCost' || column.property == 'actuarialSubtotalCost' || column.property == 'actuarialRejectRate' || column.property == 'actuarialWasteLoss'\n                    ) {\n                        sums[index] = values.reduce((prev, curr) => {\n                            const value = Number(curr)\n                            if (!isNaN(value)) {\n                                return prev + curr\n                            } else {\n                                return prev\n                            }\n                        }, 0)\n                        // sums[index] += ' 元'\n                    } else {\n                        sums[index] = '--'\n                    }\n\n                } else {\n                    sums[index] = 0\n                }\n            })\n            columns.forEach((val, index) => {\n                //小计精算\n                if (val.property == 'actuarialSubtotalCost') {\n                    this.$store.dispatch('getData/getJgSums', sums[index])\n                }\n                //设备额定功率\n                if (val.property == 'ratedPower') {\n                    this.$store.dispatch('getData/getRatedPower', sums[index])\n                }\n            })\n            return sums\n        },\n        getPriceCost (row) {\n            this.tableData.forEach(i => {\n                if (i.rowId == row.rowId) {\n                    i.actuarialLaborCost = this.checkValue(i.actuarialProcessHour * i.actuarialOperatorCount * i.actuarialProcessUnitPrice)//人工费精算\n                    i.actuarialBurningCharge = this.checkValue(i.ratedPower * i.powerUtilization * i.electricityTariff * i.actuarialProcessHour) //燃动费精算\n                    i.actuarialDeviceAllocationWork = this.checkValue(i.actuarialDeviceOriginalValueactuarialDeviceOriginalValue * 0.95 / 10 / 12 / 21.75 / 8 / i.constantValue) || 0 //设备分摊工时费精算\n                    i.actuarialDeviceAllocation = this.checkValue(i.actuarialDeviceAllocationWork * i.actuarialProcessHour) //设备分摊精算\n                    i.actuarialAuxiliaryMaterialCost = this.checkValue(i.actuarialConsumptionQuota * i.actuarialUnitPrice) //辅料成本精算\n                    i.actuarialSubtotalCost = this.checkValue(i.actuarialLaborCost + i.actuarialBurningCharge + i.actuarialDeviceAllocation + i.actuarialAuxiliaryMaterialCost) //费用精算\n                    i.actuarialWasteLoss = this.checkValue(i.actuarialRejectRate * i.actuarialSubtotalCost) //废品损失精算\n                }\n            })\n        },\n        initData (val) {\n            this.type = val\n            this.tableData = []\n        }\n\n    }\n}\n",null]}