{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/system/roleManagement/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/system/roleManagement/index.vue","mtime":1596610934267},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport changeModuleSelect from '@/components/template/changeMoudleSelect'\nimport * as api from '@/api/system/role'\nimport Pagination from '@/components/Pagination'\n\nimport { refreshMenu } from '@/utils/tool'\nimport { mapState } from 'vuex'\nimport { selectDatas } from '@/api/system/menu'\nexport default {\n    name: 'roleManagement',\n    components: { Pagination, changeModuleSelect },\n    data () {\n        return {\n            data1: [],\n            defaultProps: {\n                children: 'children',\n                label: 'catalogName'\n            },\n            list: [],\n            list2: [],\n            total: 0,\n            theight: 0, //表格高度\n            listQuery: {\n                //查询\n                page: true,\n                currentPage: 1,\n                pageSize: 15\n            },\n            listQuery2: {\n                //查询\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            listQuery3: {\n                //查询\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            temp: {\n                //新增创建\n                roleCode: undefined,\n                roleName: undefined,\n                roleType: undefined,\n                domainScope: undefined,\n                remark: undefined\n            },\n            checkeddatas: [],\n            roleCode: undefined,\n            selectCode: [],\n            dialogFormVisible: false,\n            dialogFormVisible1: false,\n            dialogFormVisible2: false,\n            dialogStatus: '',\n            selectedrow: {},\n            selectedrow1: {},\n            tableKey: 0,\n            rules: {\n                roleCode: [\n                    {\n                        required: true,\n                        message: this.$t('validate.required'),\n                        trigger: 'blur'\n                    },\n                    {\n                        max: 30,\n                        message: this.$t('validate.max32'),\n                        trigger: 'blur'\n                    }\n                ],\n                roleName: [\n                    {\n                        required: true,\n                        message: this.$t('validate.required'),\n                        trigger: 'blur'\n                    },\n                    {\n                        max: 100,\n                        message: this.$t('validate.max32'),\n                        trigger: 'blur'\n                    }\n                ],\n                roleType: [\n                    {\n                        max: 100,\n                        message: this.$t('validate.max32'),\n                        trigger: 'blur'\n                    }\n                ],\n                remark: [\n                    {\n                        max: 200,\n                        message: this.$t('validate.max200'),\n                        trigger: 'blur'\n                    }\n                ]\n            }\n        }\n    },\n    created () {\n        // this.$store.dispatch(\"mesDict/getDicData\", [\"dt_role_type\"])\n    },\n    computed: {\n        ...mapState({\n            dt_role_type: state => state.dict.dt_role_type\n        })\n    },\n    mounted () {\n        this.$store.dispatch('dict/getDicData', ['dt_role_type'])\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n    },\n    watch: {\n        dt_role_type: function () {\n            this.getList()\n        }\n    },\n    methods: {\n        getList () {\n            api.selectrole(this.listQuery).then(response => {\n                let options = [this.dt_role_type]\n                response.data = this.$myFun.codeToName(response.data, options, [\n                    'roleType'\n                ])\n                this.list = response.data.list\n                this.total = response.data.pages.count\n                // Just to simulate the time of the request\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n        },\n        changeMoudle (val) {\n            this.$emit('changeSelect', val)\n        },\n        handleCheckChange () {\n            return this.$refs.tree\n                .getCheckedNodes()\n                .concat(this.$refs.tree.getHalfCheckedNodes()) //获取选中和半选中状态下的数据\n        },\n        getList1 () {\n            api.authorizationRecord(this.selectedrow.roleCode).then(res => {\n                this.list2 = res.data\n                this.total = res.data.pages.count\n            })\n        },\n\n        handleQuery () {\n            this.listQuery.currentPage = 1\n            this.getList()\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n\n        handleSizeChange (val) {\n            this.listQuery.pageSize = val\n            this.getList()\n        },\n        handleCurrentChange (val) {\n            this.listQuery.currentPage = val\n            this.getList()\n        },\n        handleCreate () {\n            //新增按钮单击事件方法\n            this.resetTemp()\n            this.dialogStatus = 'create'\n            this.dialogFormVisible = true\n        },\n        handleCreate1 () {\n            //功能授权按钮单击事件方法\n            if (this.selectedrow && this.selectedrow.length == 1) {\n                this.listQuery2.roleCodes = this.selectedrow[0].roleCode\n                let dd = []\n                selectDatas(this.listQuery2).then(res => {\n                    this.checkeddatas = this.$myFun\n                        .reDataToTree(res.data)\n                        .filter(function (items) {\n                            //默认选中项,解决多层级父节点半选中问题\n                            if (items.children) {\n                                let getSelectTree = function (v) {\n                                    v.filter(function (em) {\n                                        if (em.children) {\n                                            getSelectTree(em.children)\n                                        } else {\n                                            dd.push(em.rowId)\n                                        }\n                                    })\n                                }\n\n                                getSelectTree(items.children)\n                            }\n                            return dd\n                        })\n                    this.checkeddatas = dd\n                })\n                api.selectRecord().then(res => {\n                    this.dialogStatus = 'create'\n                    this.dialogFormVisible1 = true\n                    this.data1 = this.$myFun.addTreeRoot(res.data)\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        // 获取表格选中时的数据\n        selected (val) {\n            if (val.length > 1) {\n                this.$refs.tb_a.clearSelection() //清除其他行的选中\n                this.$refs.tb_a.toggleRowSelection(\n                    val[val.length - 1],\n                    'selected'\n                ) //单击行绑定点击事件\n            } else if (val.length === 1) {\n                this.selectedrow = val\n            }\n        },\n        rowClick (val) {\n            this.$refs.tb_a.clearSelection() //清除其他行的选中\n            this.$refs.tb_a.toggleRowSelection(val) //单击行绑定点击事件\n        },\n        selected1 (val) {\n            this.selectedrow1 = val\n        },\n        handleCreate2 () {\n            //授权用户按钮单击事件方法\n            if (this.selectedrow && this.selectedrow.length == 1) {\n                this.dialogFormVisible2 = true\n                this.dialogStatus = 'create'\n                this.listQuery3.roleCode = this.selectedrow[0].roleCode\n                api.roleToUser(this.listQuery3).then(res => {\n                    this.list2 = res.data.list\n                    this.total = res.data.pages.count\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        handleUpdate () {\n            //编辑按钮单击事件方法\n            if (this.selectedrow && this.selectedrow.length == 1) {\n                this.roleCode = this.selectedrow[0].roleCode\n                api.getRecord(this.selectedrow[0].roleCode).then(res => {\n                    this.temp = res.data\n                    this.dialogStatus = 'update'\n                    this.dialogFormVisible = true\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        handleDelete () {\n            //表格删除按钮单击事件方法\n            if (this.selectedrow && this.selectedrow.length == 1) {\n                let codes = []\n                codes.push(this.selectedrow[0].roleCode)\n                this.delete(codes)\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //删除用户授权\n        handleDelete1 () {\n            let userNames = []\n            this.selectedrow1.forEach(item => {\n                userNames.push(item.userName)\n            })\n            let data = {\n                methods: 'USER',\n                userNames: userNames\n            }\n            api.addMenu(this.selectedrow[0].roleCode, data).then(() => {\n                this.handleCreate2()\n                this.$notify({\n                    title: '成功',\n                    message: '删除成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n        },\n        deleteUsers (codes) {\n            this.$confirm('此操作将永久删除记录, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(() => {\n                api.deleteUser(codes).then(() => {\n                    this.handleCreate2()\n                    this.$notify({\n                        title: '成功',\n                        message: '删除成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                })\n            })\n        },\n        delete (codes) {\n            this.$confirm('此操作将永久删除记录, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(() => {\n                api.deleteRecord(codes).then(() => {\n                    this.getList()\n                    this.$notify({\n                        title: '成功',\n                        message: '删除成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                })\n            })\n        },\n        create () {\n            //新增弹窗确定按钮单击事件方法\n            this.$refs.temp.validate(valid => {\n                if (valid) {\n                    api.addRecord(this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.$notify({\n                            title: '成功',\n                            message: '新增成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                } else {\n                    return false\n                }\n            })\n        },\n        create1 () {\n            //功能授权弹窗确定按钮单击事件方法\n            let catalogs = this.handleCheckChange().map(function (item) {\n                return item.catalogCode\n            })\n            api.addMenu(this.selectedrow[0].roleCode, {\n                catalogCodes: catalogs\n            }).then(() => {\n                this.$notify({\n                    title: '成功',\n                    message: '授权成功',\n                    type: 'success',\n                    duration: 2000\n                })\n                // this.reload()//允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效\n\n                // this.$router.go(0) //刷新当前体验不好，会出现空白\n                refreshMenu() //刷新菜单解决体验不好\n            })\n\n            this.dialogFormVisible1 = false\n        },\n        create2 () {\n            //授权用户弹窗确定按钮单击事件方法\n            this.dialogFormVisible2 = false\n        },\n        update () {\n            //编辑弹窗确定按钮单击事件方法\n            this.$refs.temp.validate(valid => {\n                if (valid) {\n                    api.updateRecord(this.roleCode, this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.$notify({\n                            title: '成功',\n                            message: '更新成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                        this.$refs.temp.resetFields()\n                    })\n                } else {\n                    return false\n                }\n            })\n        },\n        cancel () {\n            this.dialogFormVisible = false\n            this.dialogFormVisible1 = false\n            this.dialogFormVisible2 = false\n        },\n        resetTemp () {\n            this.temp = {\n                roleCode: undefined,\n                roleName: undefined,\n                roleType: undefined,\n                remark: undefined\n            }\n        },\n        handleClose () {\n            this.resetTemp()\n            // this.$refs.temp.resetFields()\n        },\n        handleSelectionChange (selection) {\n            this.selectCode = selection.map(v => v.roleCode)\n        }\n    }\n}\n",null]}