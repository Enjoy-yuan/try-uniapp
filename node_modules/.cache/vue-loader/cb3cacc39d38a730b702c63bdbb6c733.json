{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/database/groups/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/database/groups/index.vue","mtime":1596610933484},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from '@/api/project/eas/database/groups'\nimport * as org from '@/api/system/organization'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\n// import { mapState } from 'vuex'\nimport addMain from './dialog/addMain'\nimport dialogEmployeeSelect from '@/components/EamDialog/dialogEmployeeSelect'\nimport dialogWorkSelect from '@/components/EamDialog/dialogWorkSelect'\nexport default {\n    name: 'groups',\n    components: { Pagination, addMain, dialogEmployeeSelect, dialogWorkSelect },\n    data () {\n        return {\n            activeContent: 'content1',\n            defaultProps: {\n                children: 'children',\n                label: 'organizationName'\n            },\n            filterWorkCenterCode: [],\n            filterEmployeeCode: [],\n            tableKey: [0, 1, 2],\n            theight: 0, //表格高度\n            treeData: [],\n            list: [],\n            groupList: [], //班组人员\n            workcenterList: [], //班组工作中心\n            total: 0,\n            groupTotal: 0,\n            workcenterTotal: 0,\n            person: undefined,\n            parentId: null,\n            parentData: null, //当前树节点\n            parentRowId: null,\n            listQuery: {\n                currentPage: 1,\n                pageSize: 15,\n                orgCode: undefined, //'dtcg0001'\n                teamCode: undefined,\n                teamName: undefined\n            },\n            groupListQuery: {\n                currentPage: 1,\n                pageSize: 15,\n                teamCode: undefined\n            },\n            workcenterListQuery: {\n                currentPage: 1,\n                pageSize: 15,\n                teamCode: undefined\n            },\n            selectlistRow: null,\n            selectlistRowGroups: null,\n            selectlistRowWorks: null,\n            contentStyleObj: {\n                height: ''\n            }\n        }\n    },\n    computed: {\n        // ...mapState({\n        //     dt_srm_p0: state => state.eamDict.dt_srm_p0\n        // })\n    },\n    mounted () {\n        // this.$store.dispatch('eamDict/getDicData', ['dt_srm_p0'])\n        this.getTree()\n        this.getList()\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n            this.setTreeHeight()\n        }\n        this.setTreeHeight()\n    },\n    filters: {\n        platformFilter: function (a) {\n            if (a === false) {\n                return '否'\n            } else {\n                return '是'\n            }\n        }\n    },\n    methods: {\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight() / 2 - 60\n        },\n        //树高度设置\n        setTreeHeight () {\n            this.contentStyleObj.height = this.$myFun.getTreehHeight()\n        },\n        treeGetList (rowId) {\n            //点击树查询\n            let dto = {\n                classCode: rowId,\n                currentPage: 1,\n                pageSize: 15,\n                orgCode: this.parentData.organizationCode //   'dtcg0001'\n            }\n            api.queryRecords(dto).then(res => {\n                this.list = res.data.list\n                this.total = res.data.pages.count\n            })\n        },\n        refresh () {\n            this.getTree()\n            this.getList()\n        },\n        getTree () {\n            org.selectlists().then(res => {\n                this.treeData = this.$myFun.addTreeRoot(\n                    res.data.filter(\n                        item =>\n                            item.type == 'dt_org_type_group' ||\n                            item.type == 'dt_org_type_factory' ||\n                            item.type == 'dt_org_type_company'\n                    )\n                )\n            })\n        },\n        //查询主表信息\n        getList () {\n            api.queryRecords(this.listQuery).then(res => {\n                this.list = res.data.list\n                this.total = res.data.pages.count\n                this.groupList = null\n                this.groupTotal = 0\n                this.workcenterList = null\n                this.workcenterTotal = 0\n            })\n        },\n        //查询班组人员表信息\n        getGroupList () {\n            this.groupListQuery.teamCode = this.selectlistRow.teamCode\n            api.queryTeamEmployee(\n                this.selectlistRow.teamCode,\n                this.groupListQuery\n            ).then(res => {\n                this.groupList = res.data.list\n                this.groupTotal = res.data.pages.count\n            })\n        },\n        //查找班组工作中心\n        getWorkList () {\n            this.workcenterListQuery.teamCode = this.selectlistRow.teamCode\n            api.queryWorkcenter(\n                this.selectlistRow.teamCode,\n                this.workcenterListQuery\n            ).then(res => {\n                res.data.list.forEach(i => {\n                    i.teamName = this.selectlistRow.teamName\n                })\n                this.workcenterList = res.data.list\n                this.workcenterTotal = res.data.pages.count\n            })\n        },\n        handleQuery () {\n            this.getTree()\n            this.getList()\n        },\n        handleCreate () {\n            //新增弹窗调用\n            if (!this.parentData) {\n                this.$message({\n                    title: '警告',\n                    message: '请选择工厂类型菜单',\n                    type: 'warning'\n                })\n                return\n            }\n            if (this.parentData.type !== 'dt_org_type_factory') {\n                this.$message({\n                    title: '警告',\n                    message: '请选择工厂类型菜单',\n                    type: 'warning'\n                })\n                return\n            }\n            if (this.parentId || this.parentId == 0) {\n                this.$refs.addMain.resetTemp()\n                this.$refs.addMain.dialogStatus = 'create'\n                this.$refs.addMain.temp.parentRowId = this.parentId\n                this.$refs.addMain.temp.orgName = this.parentData.organizationName\n                this.$refs.addMain.temp.orgCode = this.parentData.organizationCode\n                this.$refs.addMain.dialogVisible = true\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择上级菜单',\n                    type: 'warning'\n                })\n            }\n        },\n        //编辑按钮单击事件\n        handleUpdate () {\n            if (this.selectlistRow) {\n                this.$refs.addMain.dialogStatus = 'update'\n                this.$refs.addMain.temp = JSON.parse(\n                    JSON.stringify(this.selectlistRow)\n                )\n                this.$refs.addMain.dialogVisible = true\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //删除按钮单击事件\n        handleDelete () {\n            if (this.selectlistRow) {\n                this.$confirm('是否删除该信息', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        api.deleteRecord(this.selectlistRow.teamCode).then(\n                            () => {\n                                this.$message({\n                                    title: '成功',\n                                    message: '删除成功',\n                                    type: 'success',\n                                    duration: 2000\n                                })\n                                this.getTree()\n                                this.getList()\n                            }\n                        )\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //班组人员新增\n        handleGroupCreate () {\n            if (this.selectlistRow) {\n                this.filterEmployeeCode = this.groupList.map(v => {\n                    return v.employeeCode\n                })\n                this.$refs.dialogEmployeeSelect.dialogVisible = true\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条班组信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //班组人员新增确定按钮单击事件\n        personConfirm (val) {\n            let data = []\n            val.forEach(item => {\n                data.push({\n                    employeeCode: item.employeeCode,\n                    employeeName: item.employeeName,\n                    teamCode: this.selectlistRow.teamCode,\n                    teamName: this.selectlistRow.teamName\n                })\n            })\n            api.addTeamEmployee(data, this.groupListQuery.teamCode).then(() => {\n                this.getGroupList()\n                this.$message({\n                    title: '成功',\n                    message: '新增成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n        },\n        // 班组人员删除\n        handleGroupDelect () {\n            if (this.selectlistRowGroups) {\n                this.$confirm('是否删除该信息', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        let data = this.selectlistRowGroups.map(i => {\n                            return i.employeeCode\n                        })\n                        api.deleteTeamEmployee(\n                            data,\n                            this.selectlistRow.teamCode\n                        ).then(() => {\n                            this.getGroupList()\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //工作中心人员选择\n        handleWorkCreate () {\n            if (this.selectlistRow) {\n                this.$refs.dialogWorkSelect.dialogVisible = true\n                this.filterWorkCenterCode = this.workcenterList.map(v => {\n                    return v.workCenterCode\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条班组信息',\n                    type: 'warning'\n                })\n            }\n        },\n        //工作中心人员选择确定按钮单击事件\n        workConfirm (val) {\n            let data = []\n            val.forEach(item => {\n                data.push({\n                    state: 'string',\n                    teamCode: this.selectlistRow.teamCode,\n                    teamName: this.selectlistRow.teamName,\n                    workCenterCode: item.workCenterCode,\n                    workCenterName: item.workCenterName\n                })\n            })\n            api.addWorkcenter(data, this.groupListQuery.teamCode).then(() => {\n                this.getWorkList()\n                this.$message({\n                    title: '成功',\n                    message: '新增成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n        },\n        // 工作中心人员删除\n        handleWorkDelect () {\n            if (this.selectlistRowWorks) {\n                this.$confirm('是否删除该信息', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        let data = this.selectlistRowWorks.map(i => {\n                            return i.workCenterCode\n                        })\n                        api.deleteWorkcenter(\n                            data,\n                            this.selectlistRow.teamCode\n                        ).then(() => {\n                            this.getWorkList()\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        // 获取表格选中时的数据(主表)\n        selectRow (val) {\n            this.selectlistRow = val[val.length - 1]\n            if (val.length > 1) {\n                this.$refs.tb.clearSelection()\n                this.$refs.tb.toggleRowSelection(val.pop())\n            }\n            if (this.selectlistRow) {\n                this.getGroupList()\n                this.getWorkList()\n            }\n            this.$refs.tb.setCurrentRow(this.selectlistRow)\n        },\n        rowClick (val) {\n            this.$refs.tb.clearSelection()\n            this.$refs.tb.toggleRowSelection(val)\n        },\n        // 获取表格选中时的数据(班组人员信息表)\n        selectRowGroup (val) {\n            // this.selectlistRowGroup = val[val.length - 1]\n            this.selectlistRowGroups = val\n            // if (val.length > 1) {\n            //     this.$refs.tbGroup.clearSelection()\n            //     this.$refs.tbGroup.toggleRowSelection(val.pop())\n            // }\n            // this.$refs.tbGroup.setCurrentRow(this.selectlistRowGroup)\n        },\n        rowClickGroup (val) {\n            this.$refs.tbGroup.clearSelection()\n            this.$refs.tbGroup.toggleRowSelection(val)\n        },\n        // 获取表格选中时的数据(班组工作中心表)\n        selectRowWork (val) {\n            // this.selectlistRowWork = val[val.length - 1]\n            this.selectlistRowWorks = val\n            // if (val.length > 1) {\n            //     this.$refs.tbWork.clearSelection()\n            //     this.$refs.tbWork.toggleRowSelection(val.pop())\n            // }\n            // this.$refs.tbWork.setCurrentRow(this.selectlistRowWork)\n        },\n        rowClickWork (val) {\n            this.$refs.tbWork.clearSelection()\n            this.$refs.tbWork.toggleRowSelection(val)\n        },\n        handleNodeClick (data) {\n            //点击树查询\n            this.parentId = data.rowId\n            this.parentData = data\n            this.listQuery.orgCode = data.organizationCode\n            this.getList()\n            this.treeGetList(data.classCode)\n        },\n        getDialogVisible (data) {\n            // 接收弹出层的值\n            if (!data) {\n                this.getList()\n            }\n        }\n    }\n}\n",null]}