{"remainingRequest":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/cf_web/src/views/project/IOT/PM/equipmentProducts/tabs/mainInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/cf_web/src/views/project/IOT/PM/equipmentProducts/tabs/mainInfo.vue","mtime":1600927611518},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/cf_web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from \"@/api/project/iot/PM/equipmentProducts\"\nimport listCar from '../../../components/listCar'\nimport throttle from 'lodash/throttle'\nimport { mapState } from 'vuex'\nexport default {\n    name: \"EPMainInfo\",\n    props: ['code'],\n    data () {\n        return {\n            form: {\n                ctacle: undefined,\n                industry: undefined,\n                remark: undefined,\n                typeCode: undefined,\n                typeName: undefined\n            },\n            temp: {\n                ctacle: undefined,\n                industry: undefined,\n                remark: undefined,\n                typeCode: undefined,\n                typeName: undefined\n            },\n            namePlate: null,\n            namePlateFrom: {\n                data: null\n            },\n            dialogFormVisible: false,\n            dialogFormVisibleName: false,\n            rules: {\n                ctacle: [\n                    {\n                        required: true,\n                        message: '请选择适用场景',\n                        trigger: 'change'\n                    }\n                ],\n                industry: [\n                    {\n                        required: true,\n                        message: '请选择所属行业',\n                        trigger: 'change'\n                    }\n                ],\n                typeCode: [\n                    {\n                        required: true,\n                        message: '设备类型编码不能为空',\n                        trigger: 'blur'\n                    },\n                    {\n                        pattern: /^[a-zA-Z0-9]{0,32}$/,\n                        message: '由大写字母、数字组成，长度为32',\n                        trigger: 'blur'\n                    }\n                ],\n                typeName: [\n                    {\n                        required: true,\n                        message: '设备类型名称不能为空',\n                        trigger: 'blur'\n                    },\n                    { max: 100, message: '长度不能超过100', trigger: 'blur' }\n                ],\n                remark: undefined\n            }\n        }\n    },\n    components: { listCar },\n    computed: {\n        ...mapState({\n            // code: state => state.goPage.code,\n            iot_locked_industry: state => state.iotDict.iot_locked_industry,\n            iot_trial_scenario: state => state.iotDict.iot_trial_scenario\n        }),\n        listLength: function () {\n            return this.namePlate ? this.namePlate.length : false\n        }\n    },\n    mounted () {\n        this.getList()\n    },\n    methods: {\n        getList () {\n            if (this.$route.name == \"equipmentProducts\") {\n                Promise.all([api.queryRecord(this.code), api.queryNamePlate(this.code)]).then(\n                    val => {\n                        let options = [this.iot_locked_industry, this.iot_trial_scenario]\n                        val[0].data = this.$myFun.codeToNameS(val[0].data, options, ['industry', 'ctacle'])\n                        this.form = val[0].data\n                        this.namePlate = val[1].data\n                    }\n                )\n            }\n        },\n        handleUpdate () {\n            this.temp = JSON.parse(JSON.stringify(this.form))\n            this.dialogFormVisible = true\n        },\n        update: throttle(\n            function () {\n                this.$refs.tempRef.validate(valid => {\n                    if (valid) {\n                        api.updateRecord(this.code, this.temp).then(() => {\n                            this.getList()\n                            this.dialogFormVisible = false\n                            this.$notify({\n                                title: '成功',\n                                message: '修改成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    } else {\n                        return false\n                    }\n                })\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        handleUpdateName () {\n            this.namePlateFrom.data = JSON.parse(JSON.stringify(this.namePlate))\n            this.dialogFormVisibleName = true\n        },\n        updateName: throttle(\n            function () {\n                let arr = this.namePlateFrom.data.filter(i => {\n                    return !i.tagCode || !i.tagName\n                })\n                if (arr.length || !this.namePlateFrom.data.length) {\n                    this.$message({\n                        title: this.$t('message.warning'),\n                        message: \"铭牌编码或名称不能为空\",\n                        type: \"warning\"\n                    })\n                    return\n                }\n                let regArr = this.namePlateFrom.data.filter(i => {\n                    return i.tagCode && i.tagName\n                })\n                var reg = /^[\\u4e00-\\u9fa5]+$/\n                var codeReg = /^[a-zA-Z0-9]+$/\n                let getRes = new Promise((resolve, reject) => {\n                    regArr.forEach(i => {\n                        let result = reg.exec(i.tagName)\n                        let resultCode = codeReg.exec(i.tagCode)\n                        if (!result) {\n                            return reject('铭牌铭牌请输入中文')\n                        }\n                        if (!resultCode) {\n                            return reject('编码请输入大小写英文及数字字符')\n                        }\n                    })\n                    resolve(true)\n                })\n\n\n                getRes.then(res => {\n                    if (res) {\n                        api.updateNamePlate(this.code, this.namePlateFrom.data).then(() => {\n                            this.getList()\n                            this.dialogFormVisibleName = false\n                            this.$notify({\n                                title: '成功',\n                                message: '编辑成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        }).catch(error => {\n                            if (\n                                error.response.data.violations &&\n                                error.response.data.violations.length\n                            ) {\n                                let message = error.response.data.violations[0].message\n                                this.$message({\n                                    message: message,\n                                    type: 'error',\n                                    duration: 5 * 1000,\n                                })\n                            }\n                        })\n                    }\n                }).catch(error => {\n                    this.$message({\n                        title: this.$t('message.warning'),\n                        message: error,\n                        type: \"warning\"\n                    })\n                    return\n                })\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        addDomain () {\n            this.namePlateFrom.data.push({\n                tagCode: undefined,\n                tagName: undefined\n            })\n        },\n        removeDomain (item) {\n            var index = this.namePlateFrom.data.indexOf(item)\n            if (index !== -1) {\n                this.namePlateFrom.data.splice(index, 1)\n            }\n        }\n    }\n};\n",null]}