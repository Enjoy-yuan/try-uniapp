{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/database/staticDictionary/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/database/staticDictionary/index.vue","mtime":1596610933497},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from '@/api/project/eas/database/dict'\nimport Pagination from '@/components/Pagination'\nimport { DICT_TYPE_OPTIONS } from '@/utils/constant'\n\nexport default {\n    name: 'dict',\n    components: { Pagination },\n    data() {\n        return {\n            list: null,\n            list1: [],\n            total: 0,\n            total1: 0,\n            tableKey: [0, 1], //表格索引，虚拟dom渲染表格时使用\n            theight: 0,\n            stheight: 0, //右子表高度\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15,\n                dictCode: undefined,\n                dictName: undefined,\n                dictType: undefined,\n                dictItemKey: undefined,\n                dictItemValue: undefined\n            },\n            listQuery1: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15\n            },\n            temp: {\n                dictCode: undefined,\n                dictName: undefined,\n\n                dictType: undefined,\n                dictItemDTOs: []\n            },\n            dictCode: undefined,\n            selectCode: [],\n            dialogFormVisible: false,\n            dialogFormVisible1: false,\n            dialogFormVisible2: false,\n            dialogStatus: '',\n            textMap: {\n                update: '编辑',\n                create: '新增',\n                update1: '编辑',\n                create1: '新增'\n            },\n            dictTypeOptions: DICT_TYPE_OPTIONS,\n            dictItems: [],\n            rules: {\n                dictCode: [\n                    {\n                        required: true,\n                        message: '字典编码不能为空',\n                        trigger: 'blur'\n                    },\n                    { max: 32, message: '长度不能超过32', trigger: 'blur' }\n                ],\n                dictName: [\n                    {\n                        required: true,\n                        message: '字典名称不能为空',\n                        trigger: 'blur'\n                    },\n                    { max: 32, message: '长度不能超过32', trigger: 'blur' }\n                ]\n            }\n        }\n    },\n    created() {\n        this.getList()\n    },\n    mounted() {\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n    },\n    methods: {\n        getList() {\n            api.queryRecords(this.listQuery).then(res => {\n                this.list = res.data.list\n                this.total = res.data.pages.count\n                this.list1 = []\n            })\n        },\n        //表格高度计算\n        setTableHeight() {\n            this.theight = this.$myFun.getSingleTbHeight() - 2\n            this.stheight = this.theight + 58\n        },\n        getList1() {\n            //查询明细\n            api.getRecord(this.selectlistRow.dictCode).then(res => {\n                this.list1 = res.data.dictItemDTOs\n                this.total1 = res.data.dictItemDTOs.length\n            })\n        },\n        handleQuery() {\n            this.listQuery.currentPage = 1\n            this.getList()\n        },\n        handleSizeChange(val) {\n            this.listQuery.pageSize = val\n            this.getList()\n        },\n        handleCurrentChange(val) {\n            this.listQuery.currentPage = val\n            this.getList()\n        },\n        handleCreate() {\n            this.resetTemp()\n            this.dialogStatus = 'create'\n            this.dialogFormVisible = true\n        },\n        handleCreate1() {\n            //新增明细弹窗\n            if (this.selectlistRow) {\n                this.readonly = true //员工编码不可以编写\n                this.temp = this.selectlistRow // copy obj\n                api.getRecord(this.temp.dictCode).then(res => {\n                    this.temp = res.data\n                    this.dialogStatus = 'create1'\n                    this.dialogFormVisible1 = true\n                    this.$nextTick(() => {\n                        this.$refs['temp'].clearValidate()\n                    })\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        create1() {\n            //新增明细弹窗方法\n            this.$refs['temp'].validate(valid => {\n                if (valid) {\n                    this.temp.dictItemDTOs = this.temp.dictItemDTOs.filter(\n                        v => v.dictItemKey != '' && v.dictItemKey != ''\n                    )\n\n                    api.updateRecord(this.temp.dictCode, this.temp).then(() => {\n                        this.getList1()\n\n                        this.dialogFormVisible1 = false\n                        this.$message({\n                            title: '成功',\n                            message: '更新成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n\n        // 获取表格1选中时的数据\n        selectRow(val) {\n            this.selectlistRow = val[val.length - 1]\n            if (val.length > 1) {\n                this.$refs.tb.clearSelection()\n                this.$refs.tb.toggleRowSelection(val.pop())\n            }\n            this.$refs.tb.setCurrentRow(this.selectlistRow)\n            if (this.selectlistRow) {\n                this.getList1()\n            }\n        },\n        // 获取表格2选中时的数据\n        selectRow1(val) {\n            this.selectlistRow1 = val\n        },\n        rowClick1(val) {\n            //点击表格某一行\n            this.$refs.tb1.toggleRowSelection(val, 'selected') //单击行绑定点击事件\n        },\n        selectRow2(val) {\n            //表一单击行选中方法\n            this.selectlistRow2 = val\n            this.$refs.tb.clearSelection()\n            this.$refs.tb.toggleRowSelection(val) //单击行绑定点击事件\n        },\n        handleUpdate() {\n            //编辑弹窗\n            if (this.selectlistRow) {\n                this.readonly = true //员工编码不可以编写\n                this.temp = this.selectlistRow // copy obj\n                api.getRecord(this.temp.dictCode).then(res => {\n                    this.temp = res\n                    this.list1 = res.dictItemDTOs\n                    this.dialogStatus = 'update'\n                    this.dialogFormVisible = true\n                    this.$nextTick(() => {\n                        this.$refs['temp'].clearValidate()\n                    })\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        update() {\n            //编辑\n            this.$refs['temp'].validate(valid => {\n                if (valid) {\n                    this.temp.dictItemDTOs = this.temp.dictItemDTOs.filter(\n                        v => v.dictItemKey != '' && v.dictItemKey != ''\n                    )\n\n                    api.updateRecord(this.temp.dictCode, this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.dialogFormVisible1 = false\n                        this.$message({\n                            title: '成功',\n                            message: '更新成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n\n        handleUpdate1() {\n            //明细编辑弹窗\n            // if (!this.selectlistRow2.dictCode) {\n            //   this.$message.warning('请选择对应分类编码！')\n            //   return\n            // }\n            if (this.selectlistRow1 && this.selectlistRow1.length == 1) {\n                this.readonly = true //员工编码不可以编写\n                this.selectlistRow.dictItemDTOs[0] = this.selectlistRow1[0] //\n                this.temp.dictItemDTOs[0] = this.selectlistRow1[0]\n                this.dialogStatus = 'update1'\n                this.dialogFormVisible2 = true\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        update1() {\n            //明细编辑弹窗\n            this.$refs['temp'].validate(valid => {\n                if (valid) {\n                    this.temp.dictItemDTOs = this.temp.dictItemDTOs.filter(\n                        v => v.dictItemKey != '' && v.dictItemKey != ''\n                    )\n                    let index = this.list1.indexOf(this.selectlistRow1[0])\n                    if (index !== -1) {\n                        this.list1.splice(index, 1, this.selectlistRow1[0])\n                    }\n                    this.selectlistRow.dictItemDTOs = this.list1 //\n                    api.updateRecord(\n                        this.selectlistRow.dictCode,\n                        this.selectlistRow\n                    ).then(() => {\n                        this.getList1()\n                        this.dialogFormVisible2 = false\n                        this.$message({\n                            title: '成功',\n                            message: '更新成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n\n        handleDeleteBatch() {\n            if (this.selectCode.length == 0) {\n                this.$message.warning('请勾选记录！')\n                return\n            }\n            this.delete(this.selectCode)\n        },\n        handleDelete() {\n            //删除字典列表\n            if (this.selectlistRow) {\n                this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        // let ids = [];\n                        // this.selectlistRow.forEach((val, index) => {\n                        // ids[index] = val.dictCode;\n                        // });\n                        api.deleteRecord(this.selectlistRow.dictCode).then(\n                            () => {\n                                this.getList(),\n                                    this.$message({\n                                        title: '成功',\n                                        message: '删除成功',\n                                        type: 'success',\n                                        duration: 2000\n                                    })\n                            }\n                        )\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        handleDelete1() {\n            //删除明细列表\n            if (this.selectlistRow1 && this.selectlistRow1.length == 1) {\n                this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        let index = this.list1.indexOf(this.selectlistRow1[0])\n                        if (index !== -1) {\n                            this.list1.splice(index, 1)\n                        }\n                        this.selectlistRow.dictItemDTOs = this.list1 //\n                        api.updateRecord(\n                            this.selectlistRow.dictCode,\n                            this.selectlistRow\n                        ).then(() => {\n                            this.getList1(),\n                                this.$message({\n                                    title: '成功',\n                                    message: '删除成功',\n                                    type: 'success',\n                                    duration: 2000\n                                })\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n            }\n        },\n        create() {\n            //新增数据字典\n            this.$refs.temp.validate(valid => {\n                if (valid) {\n                    this.temp.dictItemDTOs = this.temp.dictItemDTOs.filter(\n                        v => v.dictItemKey != '' && v.dictItemKey != ''\n                    )\n                    api.addRecord(this.temp).then(() => {\n                        this.getList()\n                        this.dialogFormVisible = false\n                        this.$notify({\n                            title: '成功',\n                            message: '新增成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                } else {\n                    return false\n                }\n            })\n        },\n        resetTemp() {\n            this.temp = {\n                dictCode: undefined,\n                dictName: undefined,\n                dictType: undefined,\n                dictItemDTOs: []\n            }\n        },\n        handleClose() {\n            this.resetTemp()\n            this.$refs.temp.resetFields()\n        },\n        handleSelectionChange(selection) {\n            this.selectCode = selection.map(v => v.dictCode)\n        },\n        addDictItem() {\n            this.temp.dictItemDTOs.push({\n                dictItemKey: '',\n                dictItemValue: '',\n                key: Date.now()\n            })\n        },\n        deleteDictItem(item) {\n            var index = this.temp.dictItemDTOs.indexOf(item)\n            if (index !== -1) {\n                this.temp.dictItemDTOs.splice(index, 1)\n            }\n        }\n    }\n}\n",null]}