{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/WMS/stokMove/allocationIndicate/index.vue?vue&type=template&id=3602caea&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/WMS/stokMove/allocationIndicate/index.vue","mtime":1596610934211},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"app-container\" }, [\n    _c(\"div\", { staticClass: \"filter-container\" }, [\n      _c(\n        \"div\",\n        { staticClass: \"filter-items\" },\n        [\n          _c(\"AuthoType\", {\n            staticClass: \"filter-item\",\n            attrs: {\n              selectType: 1,\n              placeholder: _vm.$t(\"allocationInstructions.orgCode\")\n            },\n            nativeOn: {\n              keyup: function($event) {\n                if (\n                  !$event.type.indexOf(\"key\") &&\n                  _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                ) {\n                  return null\n                }\n                return _vm.handleQuery($event)\n              }\n            },\n            model: {\n              value: _vm.listQuery.orgCode,\n              callback: function($$v) {\n                _vm.$set(_vm.listQuery, \"orgCode\", $$v)\n              },\n              expression: \"listQuery.orgCode\"\n            }\n          }),\n          _vm._v(\" \"),\n          !_vm.listQuery.orgCode\n            ? _c(\"AuthoType\", {\n                staticClass: \"filter-item\",\n                attrs: {\n                  selectType: 3,\n                  placeholder: _vm.$t(\n                    \"allocationInstructions.arrivalCompanyFirst\"\n                  )\n                },\n                nativeOn: {\n                  keyup: function($event) {\n                    if (\n                      !$event.type.indexOf(\"key\") &&\n                      _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                    ) {\n                      return null\n                    }\n                    return _vm.handleQuery($event)\n                  }\n                },\n                model: {\n                  value: _vm.listQuery.warehouseCode,\n                  callback: function($$v) {\n                    _vm.$set(_vm.listQuery, \"warehouseCode\", $$v)\n                  },\n                  expression: \"listQuery.warehouseCode\"\n                }\n              })\n            : _c(\"AuthoType\", {\n                staticClass: \"filter-item\",\n                attrs: {\n                  selectType: 3,\n                  cascading: _vm.listQuery.orgCode,\n                  placeholder: _vm.$t(\"allocationInstructions.warehouseCode\")\n                },\n                nativeOn: {\n                  keyup: function($event) {\n                    if (\n                      !$event.type.indexOf(\"key\") &&\n                      _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                    ) {\n                      return null\n                    }\n                    return _vm.handleQuery($event)\n                  }\n                },\n                model: {\n                  value: _vm.listQuery.warehouseCode,\n                  callback: function($$v) {\n                    _vm.$set(_vm.listQuery, \"warehouseCode\", $$v)\n                  },\n                  expression: \"listQuery.warehouseCode\"\n                }\n              }),\n          _vm._v(\" \"),\n          _c(\"AuthoType\", {\n            staticClass: \"filter-item\",\n            attrs: {\n              selectType: 1,\n              placeholder: _vm.$t(\"allocationInstructions.toOrgCode\")\n            },\n            nativeOn: {\n              keyup: function($event) {\n                if (\n                  !$event.type.indexOf(\"key\") &&\n                  _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                ) {\n                  return null\n                }\n                return _vm.handleQuery($event)\n              }\n            },\n            model: {\n              value: _vm.listQuery.toOrgCode,\n              callback: function($$v) {\n                _vm.$set(_vm.listQuery, \"toOrgCode\", $$v)\n              },\n              expression: \"listQuery.toOrgCode\"\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\n            \"el-select\",\n            {\n              staticClass: \"filter-item\",\n              attrs: {\n                size: \"small\",\n                placeholder: _vm.$t(\"table.businessType\"),\n                clearable: \"\"\n              },\n              nativeOn: {\n                keyup: function($event) {\n                  if (\n                    !$event.type.indexOf(\"key\") &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.getList($event)\n                }\n              },\n              model: {\n                value: _vm.listQuery.businessType,\n                callback: function($$v) {\n                  _vm.$set(_vm.listQuery, \"businessType\", $$v)\n                },\n                expression: \"listQuery.businessType\"\n              }\n            },\n            _vm._l(_vm.dt_business_type_screenGroupNum_db.options, function(\n              item\n            ) {\n              return _c(\"el-option\", {\n                key: item.wareRuleCode,\n                attrs: { label: item.wareRuleName, value: item.wareRuleCode }\n              })\n            }),\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"el-select\",\n            {\n              staticClass: \"filter-item\",\n              attrs: {\n                size: \"small\",\n                placeholder: _vm.$t(\"allocationInstructions.state\"),\n                clearable: \"\"\n              },\n              nativeOn: {\n                keyup: function($event) {\n                  if (\n                    !$event.type.indexOf(\"key\") &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.handleQuery($event)\n                }\n              },\n              model: {\n                value: _vm.listQuery.state,\n                callback: function($$v) {\n                  _vm.$set(_vm.listQuery, \"state\", $$v)\n                },\n                expression: \"listQuery.state\"\n              }\n            },\n            _vm._l(_vm.dt_instruction_state, function(item) {\n              return _c(\"el-option\", {\n                key: item.dictItemKey,\n                attrs: { label: item.dictItemValue, value: item.dictItemKey }\n              })\n            }),\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\"el-input\", {\n            staticClass: \"filter-item\",\n            attrs: {\n              size: \"small\",\n              placeholder: _vm.$t(\"allocationInstructions.allocNumber\")\n            },\n            nativeOn: {\n              keyup: function($event) {\n                if (\n                  !$event.type.indexOf(\"key\") &&\n                  _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                ) {\n                  return null\n                }\n                return _vm.handleQuery($event)\n              }\n            },\n            model: {\n              value: _vm.listQuery.allocNumber,\n              callback: function($$v) {\n                _vm.$set(_vm.listQuery, \"allocNumber\", $$v)\n              },\n              expression: \"listQuery.allocNumber\"\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\"el-date-picker\", {\n            staticClass: \"filter-item range_date\",\n            attrs: {\n              size: \"small\",\n              type: \"daterange\",\n              \"start-placeholder\": _vm.$t(\"allocationInstructions.date\"),\n              \"end-placeholder\": _vm.$t(\"allocationInstructions.date\"),\n              \"value-format\": \"yyyy-MM-dd\"\n            },\n            model: {\n              value: _vm.value1,\n              callback: function($$v) {\n                _vm.value1 = $$v\n              },\n              expression: \"value1\"\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\n            \"el-button\",\n            {\n              staticClass: \"filter-item\",\n              attrs: { type: \"primary\", size: \"small\", icon: \"el-icon-search\" },\n              on: { click: _vm.handleQuery }\n            },\n            [_vm._v(_vm._s(_vm.$t(\"table.query\")))]\n          )\n        ],\n        1\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\n      \"div\",\n      { staticClass: \"table-container\" },\n      [\n        _c(\n          \"div\",\n          { staticClass: \"oprate_btn\" },\n          [\n            _c(\n              \"el-button\",\n              {\n                staticClass: \"filter-item\",\n                attrs: { size: \"small\", type: \"primary\", icon: \"el-icon-plus\" },\n                on: { click: _vm.handleCreate }\n              },\n              [_vm._v(_vm._s(_vm.$t(\"table.add\")))]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"el-button\",\n              {\n                staticClass: \"filter-item\",\n                attrs: {\n                  size: \"small\",\n                  type: \"primary\",\n                  icon: \"el-icon-delete\"\n                },\n                on: { click: _vm.handleDelete }\n              },\n              [_vm._v(_vm._s(_vm.$t(\"table.delete\")))]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"el-button\",\n              {\n                staticClass: \"filter-item\",\n                attrs: { size: \"small\", type: \"primary\", icon: \"el-icon-edit\" },\n                on: { click: _vm.handleUpdate }\n              },\n              [_vm._v(_vm._s(_vm.$t(\"table.edit\")))]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"el-button\",\n              {\n                staticClass: \"filter-item\",\n                attrs: {\n                  size: \"small\",\n                  type: \"primary\",\n                  icon: \"el-icon-document-delete\"\n                },\n                on: { click: _vm.handlezf }\n              },\n              [_vm._v(_vm._s(_vm.$t(\"table.close\")))]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"el-button\",\n              {\n                staticClass: \"filter-item\",\n                attrs: {\n                  size: \"small\",\n                  type: \"primary\",\n                  icon: \"el-icon-edit-outline\"\n                },\n                on: { click: _vm.handlePublish }\n              },\n              [_vm._v(_vm._s(_vm.$t(\"table.publish\")))]\n            )\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _c(\n          \"el-table\",\n          {\n            key: _vm.tableKey[0],\n            ref: \"tb\",\n            staticStyle: { width: \"100%\" },\n            attrs: {\n              data: _vm.list,\n              border: \"\",\n              fit: \"\",\n              height: _vm.theight,\n              \"highlight-current-row\": \"\",\n              size: \"mini\",\n              \"cell-class-name\": \"table-cell\",\n              \"header-cell-class-name\": \"header-cell\"\n            },\n            on: {\n              \"selection-change\": _vm.selectRow,\n              \"row-click\": _vm.selectRow2\n            }\n          },\n          [\n            _c(\"el-table-column\", {\n              attrs: {\n                type: \"selection\",\n                fixed: \"\",\n                width: \"30\",\n                align: \"center\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.stateName\"),\n                prop: \"stateName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.allocNumber\"),\n                prop: \"allocNumber\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.businessType\"),\n                prop: \"businessType\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.businessTypeName\"),\n                prop: \"businessTypeName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.orgCode\"),\n                prop: \"orgCode\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.orgName\"),\n                prop: \"orgName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.warehouseCode\"),\n                prop: \"warehouseCode\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.warehouseName\"),\n                prop: \"warehouseName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.toOrgCode\"),\n                prop: \"toOrgCode\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.toOrgName\"),\n                prop: \"toOrgName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.toWarehouseCode\"),\n                prop: \"toWarehouseCode\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.toWarehouseName\"),\n                prop: \"toWarehouseName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                \"min-width\": \"130\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.remark\"),\n                prop: \"remark\"\n              }\n            })\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _c(\"pagination\", {\n          staticClass: \"pagination-container\",\n          attrs: {\n            total: _vm.total,\n            page: _vm.listQuery.currentPage,\n            limit: _vm.listQuery.pageSize\n          },\n          on: {\n            \"update:page\": function($event) {\n              return _vm.$set(_vm.listQuery, \"currentPage\", $event)\n            },\n            \"update:limit\": function($event) {\n              return _vm.$set(_vm.listQuery, \"pageSize\", $event)\n            },\n            pagination: _vm.getList\n          }\n        }),\n        _vm._v(\" \"),\n        _c(\"hr\", { staticClass: \"hrtLineStyle\" }),\n        _vm._v(\" \"),\n        _c(\n          \"el-table\",\n          {\n            key: _vm.tableKey[1],\n            staticClass: \"border_t_1\",\n            staticStyle: { width: \"100%\" },\n            attrs: {\n              data: _vm.list1,\n              border: \"\",\n              fit: \"\",\n              height: _vm.theight,\n              \"highlight-current-row\": \"\",\n              size: \"mini\",\n              \"cell-class-name\": \"table-cell\",\n              \"header-cell-class-name\": \"header-cell\"\n            },\n            on: {\n              \"selection-change\": _vm.selectRow1,\n              \"row-click\": _vm.selectRow3\n            }\n          },\n          [\n            _c(\"el-table-column\", {\n              attrs: {\n                type: \"selection\",\n                fixed: \"\",\n                width: \"30\",\n                align: \"center\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"100\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.rowNo\"),\n                prop: \"rowNo\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"150\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.materielCode\"),\n                prop: \"materielCode\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"150\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.materielName\"),\n                prop: \"materielName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.wareAreaCode\"),\n                prop: \"wareAreaCode\"\n              },\n              scopedSlots: _vm._u([\n                {\n                  key: \"default\",\n                  fn: function(scope) {\n                    return [\n                      _c(\n                        \"el-select\",\n                        {\n                          attrs: { size: \"small\", clearable: \"\" },\n                          on: {\n                            change: function($event) {\n                              return _vm.changeAreaSela(\n                                scope.row.wareAreaCode,\n                                scope.$index\n                              )\n                            }\n                          },\n                          model: {\n                            value: scope.row.wareAreaCode,\n                            callback: function($$v) {\n                              _vm.$set(scope.row, \"wareAreaCode\", $$v)\n                            },\n                            expression: \"scope.row.wareAreaCode\"\n                          }\n                        },\n                        _vm._l(_vm.areaList, function(item) {\n                          return _c(\"el-option\", {\n                            key: item.areaCode,\n                            attrs: {\n                              label: item.areaName,\n                              value: item.areaCode\n                            }\n                          })\n                        }),\n                        1\n                      )\n                    ]\n                  }\n                }\n              ])\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.wareLocationCode\"),\n                prop: \"wareLocationCode\"\n              },\n              scopedSlots: _vm._u([\n                {\n                  key: \"default\",\n                  fn: function(scope) {\n                    return [\n                      _c(\n                        \"el-select\",\n                        {\n                          attrs: { size: \"small\", clearable: \"\" },\n                          model: {\n                            value: scope.row.wareLocationCode,\n                            callback: function($$v) {\n                              _vm.$set(scope.row, \"wareLocationCode\", $$v)\n                            },\n                            expression: \"scope.row.wareLocationCode\"\n                          }\n                        },\n                        _vm._l(_vm.locatorList[scope.$index], function(item) {\n                          return _c(\"el-option\", {\n                            key: item.locationCode,\n                            attrs: {\n                              label: item.locationName,\n                              value: item.locationCode\n                            }\n                          })\n                        }),\n                        1\n                      )\n                    ]\n                  }\n                }\n              ])\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"150\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.allocateQuantity\"),\n                prop: \"allocateQuantity\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.toWareAreaCode\"),\n                prop: \"toWareAreaName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.toWareLocationCode\"),\n                prop: \"toWareLocationName\"\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\"el-table-column\", {\n              attrs: {\n                \"show-overflow-tooltip\": \"\",\n                width: \"150\",\n                align: \"center\",\n                label: _vm.$t(\"allocationInstructions.measuringUnit\"),\n                prop: \"measuringUnit\"\n              }\n            })\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _c(\"pagination\", {\n          staticClass: \"pagination-container\",\n          attrs: {\n            total: _vm.total1,\n            page: _vm.listQuery1.currentPage,\n            limit: _vm.listQuery1.pageSize\n          },\n          on: {\n            \"update:page\": function($event) {\n              return _vm.$set(_vm.listQuery1, \"currentPage\", $event)\n            },\n            \"update:limit\": function($event) {\n              return _vm.$set(_vm.listQuery1, \"pageSize\", $event)\n            },\n            pagination: _vm.getItemsList\n          }\n        })\n      ],\n      1\n    ),\n    _vm._v(\" \"),\n    _c(\n      \"div\",\n      [\n        _c(\n          \"el-dialog\",\n          {\n            directives: [{ name: \"dialogDrag\", rawName: \"v-dialogDrag\" }],\n            staticClass: \"form_dialog\",\n            attrs: {\n              width: \"60%\",\n              \"custom-class\": \"dialog-custom\",\n              title:\n                _vm.dialogStatus == \"create\"\n                  ? _vm.$t(\"table.add\")\n                  : _vm.$t(\"table.edit\"),\n              visible: _vm.dialogFormVisible,\n              \"close-on-click-modal\": false\n            },\n            on: {\n              \"update:visible\": function($event) {\n                _vm.dialogFormVisible = $event\n              }\n            }\n          },\n          [\n            _c(\n              \"el-form\",\n              {\n                ref: \"dataForm\",\n                staticClass: \"small-space\",\n                attrs: {\n                  rules: _vm.rules,\n                  size: \"mini\",\n                  inline: true,\n                  model: _vm.temp,\n                  \"label-width\": \"120px\"\n                }\n              },\n              [\n                _c(\n                  \"el-form-item\",\n                  {\n                    attrs: {\n                      label: _vm.$t(\"allocationInstructions.allocNumber\"),\n                      prop: \"allocNumber\"\n                    }\n                  },\n                  [\n                    _c(\"el-input\", {\n                      attrs: { disabled: \"\" },\n                      model: {\n                        value: _vm.temp.allocNumber,\n                        callback: function($$v) {\n                          _vm.$set(_vm.temp, \"allocNumber\", $$v)\n                        },\n                        expression: \"temp.allocNumber\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  {\n                    attrs: {\n                      label: _vm.$t(\"allocationInstructions.orgCode\"),\n                      prop: \"orgCode\"\n                    }\n                  },\n                  [\n                    _c(\"orgSelect\", {\n                      staticClass: \"filter-item\",\n                      attrs: {\n                        placeholder: _vm.$t(\"EmergeMaterial.orgCode\"),\n                        orgType: _vm.DT_ORG_TYPE.factory,\n                        disabled: _vm.Edit\n                      },\n                      on: { selectName: _vm.orgname },\n                      model: {\n                        value: _vm.temp.orgCode,\n                        callback: function($$v) {\n                          _vm.$set(_vm.temp, \"orgCode\", $$v)\n                        },\n                        expression: \"temp.orgCode\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  {\n                    attrs: {\n                      label: _vm.$t(\"allocationInstructions.warehouseCode\"),\n                      prop: \"warehouseCode\"\n                    }\n                  },\n                  [\n                    _c(\"warehouseSelect\", {\n                      attrs: { orgCode: _vm.temp.orgCode, disabled: _vm.Edit },\n                      model: {\n                        value: _vm.temp.warehouseCode,\n                        callback: function($$v) {\n                          _vm.$set(_vm.temp, \"warehouseCode\", $$v)\n                        },\n                        expression: \"temp.warehouseCode\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  {\n                    attrs: {\n                      label: _vm.$t(\"allocationInstructions.businessType\"),\n                      prop: \"businessType\"\n                    }\n                  },\n                  [\n                    _c(\n                      \"el-select\",\n                      {\n                        attrs: {\n                          size: \"small\",\n                          disabled: _vm.Edit,\n                          placeholder: _vm.$t(\"table.businessType\"),\n                          clearable: \"\"\n                        },\n                        nativeOn: {\n                          keyup: function($event) {\n                            if (\n                              !$event.type.indexOf(\"key\") &&\n                              _vm._k(\n                                $event.keyCode,\n                                \"enter\",\n                                13,\n                                $event.key,\n                                \"Enter\"\n                              )\n                            ) {\n                              return null\n                            }\n                            return _vm.getList($event)\n                          }\n                        },\n                        model: {\n                          value: _vm.temp.businessType,\n                          callback: function($$v) {\n                            _vm.$set(_vm.temp, \"businessType\", $$v)\n                          },\n                          expression: \"temp.businessType\"\n                        }\n                      },\n                      _vm._l(\n                        _vm.dt_business_type_screenGroupNum_db.options,\n                        function(item) {\n                          return _c(\"el-option\", {\n                            key: item.wareRuleCode,\n                            attrs: {\n                              label: item.wareRuleName,\n                              value: item.wareRuleCode\n                            }\n                          })\n                        }\n                      ),\n                      1\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  {\n                    attrs: {\n                      label: _vm.$t(\"allocationInstructions.toOrgCode\"),\n                      prop: \"toOrgCode\"\n                    }\n                  },\n                  [\n                    _c(\"orgSelect\", {\n                      staticClass: \"filter-item\",\n                      attrs: {\n                        disabled: _vm.Edit,\n                        placeholder: _vm.$t(\"allocationInstructions.toOrgCode\"),\n                        orgType: _vm.DT_ORG_TYPE.factory\n                      },\n                      on: { selectName: _vm.orgname1 },\n                      model: {\n                        value: _vm.temp.toOrgCode,\n                        callback: function($$v) {\n                          _vm.$set(_vm.temp, \"toOrgCode\", $$v)\n                        },\n                        expression: \"temp.toOrgCode\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  {\n                    attrs: {\n                      label: _vm.$t(\"allocationInstructions.toWarehouseCode\"),\n                      prop: \"toWarehouseCode\"\n                    }\n                  },\n                  [\n                    _c(\"warehouseSelect\", {\n                      attrs: {\n                        disabled: _vm.Edit,\n                        orgCode: _vm.temp.toOrgCode\n                      },\n                      model: {\n                        value: _vm.temp.toWarehouseCode,\n                        callback: function($$v) {\n                          _vm.$set(_vm.temp, \"toWarehouseCode\", $$v)\n                        },\n                        expression: \"temp.toWarehouseCode\"\n                      }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-form-item\",\n                  { attrs: { label: _vm.$t(\"allocationInstructions.cause\") } },\n                  [\n                    _c(\"el-input\", {\n                      staticStyle: { width: \"465px\" },\n                      attrs: { type: \"textarea\" },\n                      model: {\n                        value: _vm.temp.remark,\n                        callback: function($$v) {\n                          _vm.$set(_vm.temp, \"remark\", $$v)\n                        },\n                        expression: \"temp.remark\"\n                      }\n                    })\n                  ],\n                  1\n                )\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"table-container\" },\n              [\n                _c(\n                  \"div\",\n                  { staticClass: \"oprate_btn\" },\n                  [\n                    _c(\n                      \"el-button\",\n                      {\n                        staticClass: \"filter-item\",\n                        attrs: {\n                          size: \"small\",\n                          type: \"primary\",\n                          icon: \"el-icon-plus\"\n                        },\n                        on: { click: _vm.handleCreatewl }\n                      },\n                      [_vm._v(_vm._s(_vm.$t(\"table.add\")))]\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"el-button\",\n                      {\n                        staticClass: \"filter-item\",\n                        attrs: {\n                          size: \"small\",\n                          type: \"primary\",\n                          icon: \"el-icon-delete\"\n                        },\n                        on: { click: _vm.handleDeleteitems }\n                      },\n                      [_vm._v(_vm._s(_vm.$t(\"table.delete\")))]\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"el-button\",\n                      {\n                        staticClass: \"filter-item\",\n                        attrs: {\n                          size: \"small\",\n                          type: \"primary\",\n                          icon: \"el-icon-refresh-right\"\n                        },\n                        on: { click: _vm.handelRefresh }\n                      },\n                      [_vm._v(_vm._s(_vm.$t(\"table.refresh\")))]\n                    )\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-table\",\n                  {\n                    staticStyle: { width: \"100%\" },\n                    attrs: {\n                      data: _vm.list2,\n                      border: \"\",\n                      fit: \"\",\n                      \"highlight-current-row\": \"\",\n                      height: \"200\",\n                      size: \"mini\",\n                      \"cell-class-name\": \"table-cell\",\n                      \"header-cell-class-name\": \"header-cell\"\n                    },\n                    on: { \"selection-change\": _vm.selectRow4 }\n                  },\n                  [\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        type: \"selection\",\n                        width: \"30\",\n                        prop: \"\",\n                        fixed: \"\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        \"show-overflow-tooltip\": \"\",\n                        label: _vm.$t(\"allocationInstructions.materielCode\"),\n                        prop: \"materielCode\",\n                        fixed: \"\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        \"show-overflow-tooltip\": \"\",\n                        label: _vm.$t(\"allocationInstructions.materielName\"),\n                        prop: \"materielName\",\n                        fixed: \"\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        \"show-overflow-tooltip\": \"\",\n                        label: _vm.$t(\"allocationInstructions.unitName\"),\n                        prop: \"unitName\",\n                        fixed: \"\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _vm.show\n                      ? _c(\"el-table-column\", {\n                          attrs: {\n                            \"show-overflow-tooltip\": \"\",\n                            width: \"130\",\n                            align: \"left\",\n                            label: _vm.$t(\"allocationInstructions.stockState\"),\n                            prop: \"stockState\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _vm.show\n                      ? _c(\"el-table-column\", {\n                          attrs: {\n                            \"show-overflow-tooltip\": \"\",\n                            width: \"130\",\n                            align: \"left\",\n                            label: _vm.$t(\"allocationInstructions.stockType\"),\n                            prop: \"stockType\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _vm.show\n                      ? _c(\"el-table-column\", {\n                          attrs: {\n                            \"show-overflow-tooltip\": \"\",\n                            width: \"130\",\n                            align: \"left\",\n                            label: _vm.$t(\n                              \"allocationInstructions.warehouseCode\"\n                            ),\n                            prop: \"warehouseCode\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        \"show-overflow-tooltip\": \"\",\n                        align: \"left\",\n                        label: _vm.$t(\"allocationInstructions.toWareAreaCode\"),\n                        prop: \"toWareAreaCode\"\n                      },\n                      scopedSlots: _vm._u([\n                        {\n                          key: \"default\",\n                          fn: function(scope) {\n                            return [\n                              _c(\n                                \"el-select\",\n                                {\n                                  attrs: { size: \"small\", clearable: \"\" },\n                                  on: {\n                                    change: function($event) {\n                                      return _vm.changeAreaSel(\n                                        scope.row.toWareAreaCode,\n                                        scope.$index\n                                      )\n                                    }\n                                  },\n                                  model: {\n                                    value: scope.row.toWareAreaCode,\n                                    callback: function($$v) {\n                                      _vm.$set(scope.row, \"toWareAreaCode\", $$v)\n                                    },\n                                    expression: \"scope.row.toWareAreaCode\"\n                                  }\n                                },\n                                _vm._l(_vm.areaList, function(item) {\n                                  return _c(\"el-option\", {\n                                    key: item.areaCode,\n                                    attrs: {\n                                      label: item.areaName,\n                                      value: item.areaCode\n                                    }\n                                  })\n                                }),\n                                1\n                              )\n                            ]\n                          }\n                        }\n                      ])\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        \"show-overflow-tooltip\": \"\",\n                        align: \"left\",\n                        label: _vm.$t(\n                          \"allocationInstructions.toWareLocationCode\"\n                        ),\n                        prop: \"toWareLocationCode\"\n                      },\n                      scopedSlots: _vm._u([\n                        {\n                          key: \"default\",\n                          fn: function(scope) {\n                            return [\n                              _c(\n                                \"el-select\",\n                                {\n                                  attrs: { size: \"small\", clearable: \"\" },\n                                  model: {\n                                    value: scope.row.toWareLocationCode,\n                                    callback: function($$v) {\n                                      _vm.$set(\n                                        scope.row,\n                                        \"toWareLocationCode\",\n                                        $$v\n                                      )\n                                    },\n                                    expression: \"scope.row.toWareLocationCode\"\n                                  }\n                                },\n                                _vm._l(_vm.locatorList[scope.$index], function(\n                                  item\n                                ) {\n                                  return _c(\"el-option\", {\n                                    key: item.locationCode,\n                                    attrs: {\n                                      label: item.locationName,\n                                      value: item.locationCode\n                                    }\n                                  })\n                                }),\n                                1\n                              )\n                            ]\n                          }\n                        }\n                      ])\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"el-table-column\", {\n                      attrs: {\n                        \"show-overflow-tooltip\": \"\",\n                        width: \"150\",\n                        align: \"left\",\n                        label: _vm.$t(\n                          \"allocationInstructions.allocateQuantity\"\n                        ),\n                        prop: \"allocateQuantity\"\n                      },\n                      scopedSlots: _vm._u([\n                        {\n                          key: \"default\",\n                          fn: function(scope) {\n                            return [\n                              _c(\"el-input\", {\n                                attrs: { rows: 2 },\n                                model: {\n                                  value: scope.row.allocateQuantity,\n                                  callback: function($$v) {\n                                    _vm.$set(scope.row, \"allocateQuantity\", $$v)\n                                  },\n                                  expression: \"scope.row.allocateQuantity\"\n                                }\n                              })\n                            ]\n                          }\n                        }\n                      ])\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _c(\"pagination\", {\n                  attrs: {\n                    total: _vm.total2,\n                    page: _vm.listQuery2.currentPage,\n                    limit: _vm.listQuery2.pageSize\n                  },\n                  on: {\n                    \"update:page\": function($event) {\n                      return _vm.$set(_vm.listQuery2, \"currentPage\", $event)\n                    },\n                    \"update:limit\": function($event) {\n                      return _vm.$set(_vm.listQuery2, \"pageSize\", $event)\n                    }\n                  }\n                })\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              {\n                staticClass: \"dialog-footer\",\n                attrs: { slot: \"footer\" },\n                slot: \"footer\"\n              },\n              [\n                _c(\n                  \"el-button\",\n                  {\n                    on: {\n                      click: function($event) {\n                        _vm.dialogFormVisible = false\n                      }\n                    }\n                  },\n                  [_vm._v(_vm._s(_vm.$t(\"table.cancel\")))]\n                ),\n                _vm._v(\" \"),\n                _c(\n                  \"el-button\",\n                  {\n                    attrs: { type: \"primary\" },\n                    on: {\n                      click: function($event) {\n                        _vm.dialogStatus === \"create\"\n                          ? _vm.create()\n                          : _vm.update()\n                      }\n                    }\n                  },\n                  [_vm._v(_vm._s(_vm.$t(\"table.confirm\")))]\n                )\n              ],\n              1\n            )\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _c(\n          \"el-dialog\",\n          {\n            staticClass: \"table_dialog\",\n            attrs: {\n              width: \"50%\",\n              \"custom-class\": \"dialog-custom\",\n              \"close-on-click-modal\": false,\n              \"close-on-press-escape\": false,\n              title: _vm.$t(\"warehouse.materialSelection\"),\n              visible: _vm.xzwlDialogFormVisible\n            },\n            on: {\n              \"update:visible\": function($event) {\n                _vm.xzwlDialogFormVisible = $event\n              }\n            }\n          },\n          [\n            _c(\"wlxzbykcz\", {\n              ref: \"wlxzRef\",\n              attrs: {\n                unMutiple: _vm.unMutiple,\n                orgCode: _vm.orgCode,\n                warehouseCode: _vm.warehouseCode\n              }\n            }),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              {\n                staticClass: \"dialog-footer\",\n                attrs: { slot: \"footer\" },\n                slot: \"footer\"\n              },\n              [\n                _c(\n                  \"el-button\",\n                  { attrs: { type: \"primary\" }, on: { click: _vm.materialxz } },\n                  [_vm._v(_vm._s(_vm.$t(\"table.confirm\")))]\n                )\n              ],\n              1\n            )\n          ],\n          1\n        )\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}