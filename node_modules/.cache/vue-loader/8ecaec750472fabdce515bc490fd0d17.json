{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/EM/equipmentMaintain/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/EM/equipmentMaintain/index.vue","mtime":1596611178208},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import * as api from '@/api/data-base/bom' // 增、删、改api引入\nimport * as api from '@/api/project/eas/em/equipmentMaintain' // 增、删、改api引入\nimport employeeSelect from '@/components/Select/employeesSelect'\nimport { DT_ORG_TYPE } from '@/utils/constant'\nimport expBaseSelect from \"../../components/expBaseSelect\"\nimport maintainPartSelect from '../../components/maintainPartSelect' //保养部位\nimport caiGou from '@/components/Select/xtpt/caigou' //下拉组件\nimport Pagination from '@/components/Pagination'\nimport teamSelect from '../../components/teamSelect'\nimport { selectlists } from '@/api/system/employees'\nimport { mapState } from 'vuex' // 基本数据引入\nimport moment from 'moment'\nimport wxbj from './wxbj'\nimport fileUpload from '../../components/fileUpload'\nimport { getName } from '@/utils/auth'\n\nexport default {\n\n    name: 'equipmentMaintain',\n    components: { Pagination, caiGou, teamSelect, maintainPartSelect, expBaseSelect, employeeSelect, wxbj, fileUpload },\n    data () {\n        var money = (rule, value, callback) => {\n            if (value) {\n                const reg = /((^[1-9]\\d*)|^0)(\\.\\d{0,1}){0,1}$/\n                if (reg.test(value)) {\n                    callback()\n                } else {\n                    return callback(new Error('由正数组成，保留1位小数，长度不能超过11'))\n                }\n            }\n        }\n        return {\n            pickerStartDate: {\n                disabledDate: time => {\n                    let endDateVal = this.temp.realityEndTime\n                    if (this.temp.realityEndTime) {\n                        return time.getTime() > new Date(endDateVal).getTime()\n                    }\n                }\n            },\n            pickerCloseDate: {\n                disabledDate: time => {\n                    let beginDateVal = this.temp.realityStartTime\n                    return time.getTime() < new Date(beginDateVal).getTime()\n                }\n            },\n            upkeepWorkOrderNumber: undefined,\n            selectlistRowA: null,\n            organizationCodeA: undefined,\n            currentTab: 'tab1',\n            timeRange: undefined,\n            checkList: [],\n            textarea: '',\n            theight: 0, //表格高度\n            isSingle: true, //表格是否单选 点击各按钮根据流程逻辑控制单多选\n            materielData: [],\n            list: [],\n            subList: [],\n            emplList: [],\n            fromList: [],\n            total: 0,\n            totalSub: 0,\n            tableKey: [0, 1, 2, 3, 4, 5], //表格索引\n            listQuery: {\n                materielCode: undefined,\n                applicant: undefined, //保养负责人 auth.getName()\n                teamCode: undefined,\n                orgCode: undefined,\n                createTimeStart: undefined,\n                createTimeEnd: undefined,\n                //查询\n                currentPage: 1,\n                pageSize: 15\n            },\n            states: [],\n            listQuerySub: {\n                //查询\n                currentPage: 1,\n                pageSize: 15,\n                applicant: getName(),\n                workOrderNumber: undefined\n            },\n            temp: {\n                organizationCodeA: undefined,\n                teamCode: undefined,\n                teamName: undefined,\n                applicant: undefined,\n                applicantName: undefined, //\n                entrustOuterCompanyCode: undefined,//委外单位\n                entrustOuterCompanyName: undefined,\n                experienceCode: undefined,//经验\n                disposeDescribe: undefined,//描述\n                ifMachineHalt: undefined,\n                machineHaltTime: 0,\n                maintainLevel: undefined,\n                upkeepSpendTimeHour: undefined,\n                upkeepSpendTimeMinute: undefined,\n                upkeepCost: 0, //保养费用\n                positionList: [],\n                spareList: [], //备件\n                personList: [],\n                realityEndTime: undefined,\n                realityStartTime: undefined\n            },\n            positionList: [], //保养部位\n            spareList: [], //备件\n            personList: [],  //保养工时\n            subTemp: {\n                orgCode: undefined,\n                deviceCode: undefined,\n                deviceName: undefined,\n                addressName: undefined,\n                useDeptName: undefined\n            },\n            dialogFormVisible: false,\n            fromDialogStatus: '',\n            fromDialogFormVisible: false,\n            maintainDialogFormVisible: false, //保养部位\n            expBaseDialogVisible: false,//经验库\n            employeeDialogVisible: false,//人员\n            selectFromList: null,//从表选中\n            expBaseRow: null,//经验库选择\n            employRow: null,//人员选择\n            curChange: false, //if the current row change\n            clickChange: false, //if click another row\n            currentSelectedRow: null, //当前选中行\n            selectedRows: [], //多选时选中的所有行\n            selectEmpList: [], // 维修工时选择行\n            selectPositionList: [],\n            DT_ORG_TYPE: DT_ORG_TYPE,\n            rules: {\n                disposeDescribe: [\n                    {\n                        required: true,\n                        message: '处理描述不能为空',\n                        trigger: ['blur', 'change']\n                    }\n                ],\n                experienceCode: [\n                    {\n                        required: true,\n                        message: '经验代码不能为空',\n                        trigger: ['blur', 'change']\n                    }\n                ],\n                personList: [\n                    {\n                        required: true\n                    }\n                ],\n                upkeepCost: [\n                    {\n                        validator: money,\n                        message: '由正数组成，保留1位小数，长度不能超过11',\n                        trigger: ['blur', 'change']\n                    }\n                ]\n            },\n\n        }\n    },\n    computed: {\n        // 过滤器下拉框item数据\n        ...mapState({\n            dt_upkeep_worder_state: state => state.eamDict.dt_upkeep_worder_state,\n            dt_upkeep_level: state => state.eamDict.dt_upkeep_level,\n            dt_bom_rank: state => state.eamDict.dt_bom_rank,\n            dt_yes_or_no: state => state.eamDict.dt_yes_or_no,\n            dt_file_equipment: state => state.eamDict.dt_file_equipment\n\n        })\n    },\n    watch: {\n        // 监听时间区间数组 写入到对应字段\n        'timeRange' (value) {\n            if (value) {\n                this.listQuery.createTimeStart = value[0]\n                this.listQuery.createTimeEnd = value[1]\n            }\n        },\n        'dt_upkeep_worder_state' (val) {\n            let value = JSON.parse(JSON.stringify(val))\n            let state = value.map(i => {\n                return i.dictItemKey\n            })\n            this.states = state.filter(item => {\n                return item != 'ukwos_10'\n            })\n            this.getList()\n        },\n    },\n    mounted () {\n        this.getList()\n        this.getEmpl()\n        this.$store.dispatch('eamDict/getDicData', [\n            'dt_yes_or_no',\n            'dt_bom_rank',\n            'dt_upkeep_worder_state',\n            'dt_upkeep_level',\n            'dt_file_equipment'\n        ])\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n    },\n    filters: {\n        normalFilter (val) {\n            return val == 'Y' ? '正常' : val == 'N' ? '异常' : ''\n        }\n    },\n    methods: {\n        // 所选维修工时\n        selectEmp (val) {\n            this.selectEmpList = val\n        },\n        selectPosition (val) {\n            this.selectPositionList = val\n        },\n        // 维修工时 删除\n        handleDeleEmp () {\n            // personList\n            let arr = this.personList.filter(x => this.selectEmpList.every(y => y.rowId !== x.rowId))\n            this.personList = arr\n        },\n        // 删除保养部位\n        handleDelePosition () {\n            let arr = this.positionList.filter(x => this.selectPositionList.every(y => y.rowId !== x.rowId))\n            this.positionList = arr\n        },\n        // 维修工时 保存\n        handleSaveEmp () {\n            let arr = this.personList.filter(i => {\n                return i.maintainSpendTime == undefined || ''\n            })\n            if (!arr.length) {\n                api.addSpare(this.currentSelectedRow.workOrderNumber, this.personList).then(() => {\n                    this.$message({\n                        title: '成功',\n                        message: '保存成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '开始和结束时间不能为空',\n                    type: 'warning'\n                })\n            }\n\n        },\n        // 备件使用保存\n        spareSave () {\n            api.saveSpar(this.temp.spareList).then(() => {\n                this.$message({\n                    title: '成功',\n                    message: '保存成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            })\n\n        },\n        // 计算保养用时\n        getLaborHour (row) {\n            if (row.startTime && row.endTime) {\n                const date1 = moment(row.startTime)\n                const date2 = moment(row.endTime)\n                let diff = date2.diff(date1, 'hours')\n                if (diff >= 0) {\n                    this.personList.forEach(item => {\n                        if (item.maintainerCode == row.maintainerCode) {\n                            item.maintainSpendTime = diff\n                        }\n                    })\n                } else {\n                    const target = this.personList.filter((item) => row.rowId === item.rowId)[0]\n                    target.endTime = undefined\n                    this.$message({\n                        title: '警告',\n                        message: '请重新选择时间',\n                        type: 'warning'\n                    })\n                    return\n                }\n            }\n        },\n        // 更新保养工单\n        maintainStart () {\n            let value = 'UPKEEP_START'\n            if (this.selectedRows.length == 1) {\n                if (this.selectedRows[0].state !== 'ukwos_20') {\n                    this.$message({\n                        title: '警告',\n                        message: '请选择派工状态工单',\n                        type: 'warning'\n                    })\n                    return\n                }\n                let arr = this.selectedRows.map(res => {\n                    return res.workOrderNumber\n                })\n                api.patchRecord(value, arr).then(res => {\n                    if (res.status == 201) {\n                        this.$message({\n                            title: '成功',\n                            message: '操作成功',\n                            type: 'success'\n                        })\n                        this.getList()\n                        this.subList = []\n                    }\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条数据',\n                    type: 'warning'\n                })\n            }\n        },\n        maintainEnd () {\n            let value = 'UPKEEP_END'\n            if (this.selectedRows.length == 1) {\n                if (this.selectedRows[0].state !== \"ukwos_30\") {\n                    this.$message({\n                        title: '警告',\n                        message: '请选择已开始的工单',\n                        type: 'warning'\n                    })\n                    return\n                }\n                let arr = this.selectedRows.map(res => {\n                    return res.workOrderNumber\n                })\n                api.patchRecord(value, arr).then(res => {\n                    if (res.status == 201) {\n                        this.$message({\n                            title: '成功',\n                            message: '操作成功',\n                            type: 'success'\n                        })\n                        this.getList()\n                        this.subList = []\n                    }\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条数据',\n                    type: 'warning'\n                })\n            }\n        },\n        //打开经验代码弹窗\n        handleExperience () {\n            this.expBaseDialogVisible = true\n        },\n        //经验父子传值\n        handleExpBase (row) {\n            this.expBaseRow = row\n        },\n        //经验代码确认\n        expBaseCreate () {\n            this.$set(this.temp, 'experienceCode', this.expBaseRow.experienceCode)\n            // this.temp.experienceCode = this.expBaseRow[0].experienceCode\n            this.temp.disposeDescribe = this.expBaseRow.disposeDescription\n            this.expBaseDialogVisible = false\n        },\n        //新增经验\n        experienceCreate () {\n            let dto = {\n                experienceType: \"et20\",\n                disposeDescription: this.temp.disposeDescribe,\n                faultDescription: '设备保养', // this.temp.faultDescription\n                deviceCode: this.temp.deviceCode,\n                deviceName: this.temp.deviceName,\n                deviceType: this.temp.deviceType,\n                faultTypeName: this.temp.faultTypeName,\n                faultTypeCode: this.temp.faultTypeCode,\n                workOrderNumber: this.temp.workOrderNumber\n            }\n            if (this.temp.disposeDescribe) {\n                api.addExperience(dto).then(res => {\n                    this.$set(this.temp, 'experienceCode', res.data)\n                    this.$message({\n                        title: '成功',\n                        message: '新增经验成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请输入处理描述',\n                    type: 'warning'\n                })\n                return\n            }\n        },\n        // 人员新增\n        employeeCreate () {\n            let arr = this.employRow.map(item => {\n                return {\n                    maintainerCode: item.employeeCode,\n                    maintainerName: item.employeeName,\n                    startTime: undefined,\n                    endTime: undefined,\n                    maintainSpendTime: undefined,\n                    realitySpendTime: undefined,\n                    remark: undefined\n                }\n            })\n            this.personList = this.personList.concat(arr)\n            let newArr = this.personList.filter(x => arr.some(y => y.employeeCode === x.employeeCode))\n            this.personList = newArr\n            this.employeeDialogVisible = false\n        },\n        //员工管理父子传值\n        handleEmployee (row) {\n            this.employRow = row\n        },\n        // 获取人员下拉框信息\n        getEmpl () {\n            selectlists().then(res => {\n                this.emplList = res.data\n            })\n        },\n        // 保养结束\n        changeTab () { },\n        handleCheckRow () { },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight() - 185\n        },\n        //获取表格数据\n        getList () {\n            api.queryRecords(this.listQuery, this.states).then(res => {\n                this.list = this.$myFun.codeToName(\n                    res.data,\n                    [\n                        this.dt_upkeep_worder_state, this.dt_yes_or_no\n                    ],\n                    ['state', 'ifNormal']\n                ).list\n                this.$nextTick(() => {\n                    this.$refs.tb.toggleRowSelection(this.list[0], true)\n                })\n                this.total = res.data.pages.count\n            })\n        },\n        getSubList () {\n            api.queryRecordSub(this.listQuerySub).then(res => {\n                // ifNormalCN\n                this.subList = res.data.list\n                this.totalSub = res.data.pages.count\n            })\n        },\n        resetTemp () {\n            this.temp = {\n            }\n        },\n        //表格查询\n        handleQuery () {\n            this.listQuery.currentPage = 1\n            this.getList()\n            this.subList = undefined\n        },\n        // 保养记录\n        handleCreate () {\n            //新增按钮单击事件方法\n            this.resetTemp()\n            if (this.currentSelectedRow) {\n                let row = JSON.parse(JSON.stringify(this.currentSelectedRow))\n                this.subTemp = row\n                Promise.all([api.queryOrder(row.workOrderNumber), api.querySp(this.currentSelectedRow.workOrderNumber), api.queryPerson(this.currentSelectedRow.workOrderNumber), api.queryPosition(this.currentSelectedRow.workOrderNumber)])\n                    .then(res => {\n                        this.temp = res[0].data\n                        this.positionList = res[3].data\n                        this.personList = res[2].data\n                        this.temp.spareList = res[1].data\n                        this.dialogFormVisible = true\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择一条信息',\n                    type: 'warning'\n                })\n                return\n            }\n\n        },\n        // 保养记录\n        update () {\n            this.$refs['refTemp'].validate(valid => {\n                if (valid) {\n                    let spareList = []\n                    this.temp.spareList.forEach(i => {\n                        {\n                            spareList.push(\n                                {\n                                    useQuantity: i.useQuantity,\n                                    returnQuantity: i.returnQuantity,\n                                    rowId: i.rowId,\n                                    remark: i.remark\n                                }\n                            )\n                        }\n                    })\n                    let positionList = []\n                    // temp.\n                    this.positionList.forEach(i => {\n                        {\n                            positionList.push(\n                                {\n                                    ifNormal: i.ifNormal,\n                                    maintenanceCode: i.maintenanceCode,\n                                    serialNumber: i.serialNumber\n                                }\n                            )\n                        }\n                    })\n\n                    if (!this.personList.length || !positionList.length || !this.temp.spareList.length) {\n                        this.$message({\n                            title: '警告',\n                            message: '列表不能为空',\n                            type: 'warning'\n                        })\n                        return\n                    }\n                    this.temp.personList = this.personList\n                    let arr = this.personList.filter(i => {\n                        return i.maintainSpendTime == undefined || ''\n                    })\n                    if (arr.length) {\n                        this.$message({\n                            title: '警告',\n                            message: '保养工时时间不能为空',\n                            type: 'warning'\n                        })\n                        return\n                    }\n                    this.temp.spareList = spareList\n                    this.temp.positionList = positionList\n                    api.patchRecordContent(this.temp.workOrderNumber, this.temp).then(() => {\n                        this.dialogFormVisible = false\n                        // this.getList()\n                        this.getSubList()\n                        this.$refs.tab2.getList()\n                        this.$message({\n                            title: '成功',\n                            message: '更新成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n                }\n            })\n        },\n        handleClose () {\n            this.resetTemp()\n            this.$refs.refTemp.resetFields()\n        },\n        //从表选择框选中\n        selectFromChange (val) {\n            this.selectFromList = val\n            if (val.length > 1) {\n                this.$refs.tb2.clearSelection()\n                this.$refs.tb2.toggleRowSelection(val[val.length - 1])\n            }\n            this.$refs.tb2.setCurrentRow(this.selectFromList[0])\n        },\n        handleCreateFrom () {\n            this.resetFromTemp()\n            if (this.selectedRows) {\n                this.fromDialogStatus = 'create'\n                this.fromDialogFormVisible = true\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择产品',\n                    type: 'warning'\n                })\n            }\n        },\n        createMaintain () {\n            var val = JSON.parse(JSON.stringify(this.$refs.maintainPartSelect.currentSelect))\n            this.maintainDialogFormVisible = false\n            this.$refs.maintainPartSelect.currentSelect = []\n            if (val) {\n\n                this.positionList = this.positionList.concat(val)\n                let newArr = this.positionList.filter(x => val.some(y => y.maintenanceCode === x.maintenanceCode))\n                this.positionList = newArr\n\n            } else {\n                return\n            }\n        },\n        // 删除备件使用\n        handleDelectSpareFrom () { },\n        rowClickFrom (val) {\n            this.$refs.tb2.toggleRowSelection(val, 'selected') //单击行绑定点击事件\n        },\n        //点击表格某一行\n        rowClick (row) {\n            if (JSON.stringify(this.currentSelectedRow) === JSON.stringify(row)) {\n                this.clickChange = false\n            } else {\n                this.clickChange = true\n            }\n            this.currentSelectedRow = row\n            let selectStatus = this.checkSelectStatus(null, row)\n            if (!this.currentSelectedRow) {\n                this.subList = null\n                return\n            } else {\n                if (selectStatus) {\n                    this.currentSelectedRow = row\n                    this.$refs.tb.toggleRowSelection(row, true)\n                    this.listQuerySub.workOrderNumber = this.currentSelectedRow.workOrderNumber\n                    this.upkeepWorkOrderNumber = this.currentSelectedRow.workOrderNumber\n                    this.selectlistRowA = this.currentSelectedRow\n                    this.organizationCodeA = this.currentSelectedRow.orgCode\n                    this.getSubList()\n                } else {\n                    if (this.clickChange) {\n                        if (this.currentSelectedRow) {\n                            this.$refs.tb.setCurrentRow(this.currentSelectedRow)\n                            this.listQuerySub.workOrderNumber = this.currentSelectedRow.workOrderNumber\n                            this.upkeepWorkOrderNumber = this.currentSelectedRow.workOrderNumber\n                            this.selectlistRowA = this.currentSelectedRow\n                            this.organizationCodeA = this.currentSelectedRow.orgCode\n                            this.getSubList()\n                        }\n\n                    }\n                }\n            }\n\n        },\n        selectChange (val) {\n            if (val.length > 0 && this.currentSelectedRow) {\n                this.selectedRows = val\n                if (this.clickChange) {\n                    this.upkeepWorkOrderNumber = this.currentSelectedRow.workOrderNumber\n                    this.selectlistRowA = this.currentSelectedRow\n                    this.$refs.tb.setCurrentRow(this.currentSelectedRow)\n                    this.organizationCodeA = this.currentSelectedRow.orgCode\n                    this.listQuerySub.workOrderNumber = this.currentSelectedRow.workOrderNumber\n                    this.getSubList()\n                } else {\n                    this.subList = null\n                }\n            }\n\n        },\n        tableSelect (rows, row) {\n            let selectStatus = this.checkSelectStatus(rows)\n            if (JSON.stringify(this.currentSelectedRow) === JSON.stringify(row)) {\n                this.clickChange = false\n            } else {\n                this.clickChange = true\n                this.currentSelectedRow = row\n            }\n            if (selectStatus) {\n                this.currentSelectedRow = row\n            } else {\n                this.curChange = false\n            }\n        },\n        checkSelectStatus (rows, row) {\n            let checkStatus = false\n            if (rows) {\n                if (\n                    this.selectedRows.length <= rows.length &&\n                    rows.length != 0\n                ) {\n                    checkStatus = true\n                }\n            }\n            if (row) {\n                if (\n                    JSON.stringify(this.selectedRows).indexOf(\n                        JSON.stringify(row)\n                    ) == -1\n                ) {\n                    checkStatus = true\n                }\n            }\n            return checkStatus\n        },\n    }\n}\n",null]}