{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/RF/expBase/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/EAS/RF/expBase/index.vue","mtime":1596610933417},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from '@/api/project/eas/rf/exBase'\nimport * as deviceApi from '@/api/project/eas/el/equipmentArchives'\nimport * as failureOrder from '@/api/project/eas/fm/failureRegister'\nimport Pagination from '@/components/Pagination'\nimport { mapState } from 'vuex'\nimport deviceType from '../../components/deviceTypeSelect'\nimport faultType from '../../components/faultTypeSelect'\nimport imgUpload from '../../components/imgUpload'\nimport fileUpload from '../../components/fileUpload'\n\nexport default {\n    name: 'expBase',\n    components: { Pagination, faultType, deviceType, imgUpload, fileUpload },\n    data () {\n        return {\n            list: [],\n            listSub: [],\n            baseList: [],\n            parts: [],\n            device: [],\n            workOrder: [],\n            faultCodes: [],\n            selectlistRow: [],\n            imgs: [],\n            total: 0,\n            total2: 0,\n            theight: 0, //表格高度\n            theight2: 0,\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            listQuery2: {\n                page: true,\n                currentPage: 1,\n                pageSize: 10\n            },\n            tabName: 'sbtp',\n            rules: {\n                experienceType: [\n                    {\n                        required: true,\n                        message: '经验类型不能为空',\n                        trigger: 'blur'\n                    }\n                ],\n                disposeDescription: [\n                    {\n                        required: true,\n                        message: '处理描述不能为空',\n                        trigger: 'blur'\n                    }\n                ],\n                faultDescription: [\n                    {\n                        required: true,\n                        message: '故障描述不能为空',\n                        trigger: 'blur'\n                    }\n                ]\n            },\n            temp: {\n                deviceCode: undefined,\n                deviceTypeCode: undefined,\n                disposeDescription: undefined,\n                experienceType: undefined,\n                faultCode: undefined,\n                faultDescription: undefined,\n                faultNumber: undefined,\n                faultTypeCode: undefined\n            },\n            temp2: {\n                functionCode: undefined,\n                fileType: 'img',\n                category: undefined\n            },\n            files: [],\n            fileList: [],\n            importDialogVisible: false,\n            dialogStatus: 'create',\n            tableKey: [0, 1, 2]\n        }\n    },\n    watch: {\n        'listQuery.deviceTypeCode' (value) {\n            this.queryParts(value)\n            this.listQuery.partCode = undefined\n        },\n        'temp.deviceTypeCode' (val, oldVal) {\n            this.queryFaultCode()\n            if (oldVal) {\n                this.temp.faultCode = ''\n            }\n        },\n        'dt_experience_type' () {\n            if (this.list && this.list.length) {\n                let options = [this.dt_experience_state, this.dt_experience_type]\n                this.list = this.$myFun.srmCodeToName(\n                    this.list,\n                    options,\n                    ['state', 'experienceType']\n                )\n            }\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_experience_state: state => state.eamDict.dt_experience_state,\n            dt_experience_type: state => state.eamDict.dt_experience_type,\n            dt_file_type: state => state.eamDict.dt_file_type,\n            dt_file_equipment: state => state.eamDict.dt_file_equipment\n        }),\n        getFunctionCode: function () {\n            if (this.selectlistRow.length) {\n                return this.selectlistRow[this.selectlistRow.length - 1]\n                    .experienceCode\n            } else {\n                return ''\n            }\n        }\n    },\n    created () {\n        this.getSetDefaults()\n    },\n    mounted () {\n        this.$store.dispatch('eamDict/getDicData', [\n            'dt_experience_state',\n            'dt_experience_type',\n            'dt_file_type',\n            'dt_file_equipment'\n        ])\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n        this.queryDevice()\n        this.queryFaultCode()\n    },\n    methods: {\n        forceUpdate () {\n            this.$forceUpdate()\n        },\n        getWorkOrder (val) {\n            if (!val) {\n                this.temp.deviceCode = undefined\n                this.temp.deviceName = undefined\n            }\n            this.workOrder.forEach(item => {\n                if (item.faultNumber == val) {\n                    this.temp.deviceCode = item.deviceCode\n                    this.temp.deviceName = item.deviceName\n                    return false\n                }\n            })\n        },\n        queryParts (typeCode) {\n            api.queryParts(typeCode).then(res => {\n                this.parts = res.data\n            })\n        },\n        queryFaultCode () {\n            api.queryFaultCode({\n                deviceTypeCode: this.temp.deviceTypeCode\n            }).then(res => {\n                this.faultCodes = res.data\n            })\n        },\n        queryDevice () {\n            deviceApi.queryRecords().then(res => {\n                this.device = res.data\n            })\n            // 查询待修故障单\n            failureOrder\n                .queryRecords({\n                    state: 'fs20'\n                })\n                .then(res => {\n                    this.workOrder = res.data\n                })\n            // 查询故障代码\n        },\n        //查主表\n        getList () {\n            api.queryRecords(this.listQuery).then(res => {\n                this.list = res.data.list\n                let options = [this.dt_experience_state, this.dt_experience_type]\n                this.list = this.$myFun.srmCodeToName(\n                    this.list,\n                    options,\n                    ['state', 'experienceType']\n                )\n                this.total = res.data.pages.count\n            })\n        },\n        getSubList () {\n            if (!this.selectlistRow.length) {\n                this.listSub = []\n                return false\n            }\n            api.queryFile(\n                Object.assign(\n                    {\n                        functionCode: this.selectlistRow[\n                            this.selectlistRow.length - 1\n                        ].experienceCode,\n                        fileType: this.tabName == 'sbtp' ? 'img' : 'document'\n                    },\n                    this.listQuery2\n                )\n            ).then(res => {\n                this.imgs = []\n                this.listSub = res.data.list\n                this.total2 = res.data.pages.count\n                if (this.tabName == 'sbtp') {\n                    for (var i = 0; i < this.listSub.length; i++) {\n                        api.queryPic(this.listSub[i].readName).then(res => {\n                            res.config.url = res.config.url.replace(\n                                process.env.VUE_APP_BASE_API10,\n                                process.env.VUE_APP_BASE_API10_URL\n                            )\n                            this.imgs.push(res.config.url)\n                        })\n                    }\n                }\n            })\n        },\n        selectRow (val) {\n            this.selectlistRow = val\n            if (this.selectlistRow.length != 0) {\n                this.getSubList()\n                this.temp2.functionCode = this.selectlistRow[\n                    this.selectlistRow.length - 1\n                ].experienceCode\n            } else {\n                this.listSub = []\n                this.imgs = []\n                this.temp2 = {\n                    functionCode: undefined,\n                    fileType: this.tabName == 'sbtp' ? 'img' : 'document',\n                    category: undefined\n                }\n            }\n        },\n        rowClick (val) {\n            this.$refs.mainList.toggleRowSelection(val)\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight() - 200\n            this.theight2 = this.$myFun.getSingleTbHeight() - 200 + 43\n        },\n        handleQuery () {\n            //查询\n            this.listQuery.currentPage = 1\n            this.getList()\n        },\n        handleCreate () {\n            this.resetTemp()\n            this.dialogStatus = 'create'\n            this.importDialogVisible = true\n        },\n        handleUpdate (row) {\n            this.dialogStatus = 'update'\n            this.importDialogVisible = true\n            this.$nextTick(() => {\n                this.temp = row\n                this.$refs.tempDeviceType.valueTitle = row.faultTypeName\n                this.$refs.tempFaultType.valueTitle = row.deviceTypeName\n            })\n        },\n        handleCommit (row) {\n            this.$confirm(`是否要提交经验编码${row.experienceCode}?`, '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    api.submitRecords(row.experienceCode).then(res => {\n                        if (res.status == 201) {\n                            this.getList()\n                            this.importDialogVisible = false\n                            this.$message({\n                                title: '成功',\n                                message: '提交成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        }\n                    })\n                })\n\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消'\n                    })\n                })\n        },\n        create () {\n            this.$refs.temp.validate(valid => {\n                if (valid) {\n                    api.addRecords(this.temp).then(res => {\n                        if (res.status == 200) {\n                            this.getList()\n                            this.importDialogVisible = false\n                            this.$message({\n                                title: '成功',\n                                message: '新增成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        }\n                    })\n                }\n            })\n        },\n        update () {\n            this.$refs.temp.validate(valid => {\n                if (valid) {\n                    api.patchRecords(this.temp.experienceCode, this.temp).then(\n                        res => {\n                            if (res.status == 201) {\n                                this.getList()\n                                this.importDialogVisible = false\n                                this.$message({\n                                    title: '成功',\n                                    message: '修改成功',\n                                    type: 'success',\n                                    duration: 2000\n                                })\n                            }\n                        }\n                    )\n                }\n            })\n        },\n        //删除列表\n        handleDelete () {\n            if (this.selectlistRow.length) {\n                this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                })\n                    .then(() => {\n                        var tmp = this.selectlistRow.map(item => {\n                            return item.experienceCode\n                        })\n                        api.deleteRecords(tmp).then(res => {\n                            if (res.status == 204) {\n                                this.getList()\n                                this.$message({\n                                    title: '成功',\n                                    message: '删除成功',\n                                    type: 'success',\n                                    duration: 2000\n                                })\n                            }\n                        })\n                    })\n                    .catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消删除'\n                        })\n                    })\n            } else {\n                this.$message({\n                    title: '警告',\n                    message: '请选择信息',\n                    type: 'warning'\n                })\n            }\n        },\n        handleClick () {\n            if (this.tabName == 'sbtp') {\n                this.temp2.fileType = 'img'\n            } else if (this.tabName == 'sbfj') {\n                this.temp2.fileType = 'document'\n            }\n            this.files = []\n            this.imgs = []\n            this.getSubList()\n        },\n        fileExceed () {\n            this.$message.error('一次最多上传10个文件')\n        },\n        beforeUpload (file) {\n            const isJPG = file.type === 'image/jpeg'\n            const isPNG = file.type === 'image/png'\n            const isPG = isJPG || isPNG //限制图片格式为jpg / png\n            const isLt2M = file.size / 1024 / 1024 < 10 //限制图片大小\n            if (!isPG) {\n                this.$message.error('上传头像图片只能是 JPG 或 PNG 格式!')\n            }\n            if (!isLt2M) {\n                this.$message.error('上传头像图片大小不能超过 10MB!')\n            }\n            return isPG && isLt2M\n        },\n        handleFile (file, fileList) {\n            this.files = fileList\n        },\n        handleUpload () {\n            if (this.temp2.functionCode == undefined) {\n                this.$message({\n                    title: '警告',\n                    message: '请选择设备',\n                    type: 'warning'\n                })\n                return false\n            }\n            if (this.temp2.category == undefined) {\n                this.$message({\n                    title: '警告',\n                    message: '请选择类别',\n                    type: 'warning'\n                })\n                return false\n            }\n            if (!this.files.length) {\n                this.$message({\n                    title: '警告',\n                    message: '请选择文件',\n                    type: 'warning'\n                })\n                return false\n            }\n            var data = new FormData()\n            this.files.forEach(file => {\n                data.append('files', file.raw)\n            })\n            api.uploadFile(this.temp2.functionCode, data, this.temp2)\n                .then(res => {\n                    if (res.status == 200) {\n                        this.$message({\n                            title: '成功',\n                            message: '上传成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    }\n                    this.getSubList()\n                    this.$refs.upload1.clearFiles()\n                    this.$refs.upload2.clearFiles()\n                    this.files = []\n                })\n                .catch(() => {\n                    this.$message({\n                        title: '警告',\n                        message: '不支持的文件类型',\n                        type: 'warning'\n                    })\n                    this.files = []\n                })\n        },\n        resetTemp () {\n            this.temp = {\n                deviceCode: undefined,\n                deviceTypeCode: undefined,\n                disposeDescription: undefined,\n                experienceType: undefined,\n                faultCode: undefined,\n                faultDescription: undefined,\n                faultNumber: undefined,\n                faultTypeCode: undefined\n            }\n            this.$nextTick(() => {\n                this.$refs.tempDeviceType.valueTitle = ''\n                this.$refs.tempFaultType.valueTitle = ''\n            })\n        },\n        getSetDefaults () {\n            this.$viewer.setDefaults({\n                inline: true,\n                button: true, //右上角按钮\n                navbar: true, //底部缩略图\n                title: false, //当前图片标题\n                toolbar: true, //底部工具栏\n                tooltip: false, //显示缩放百分比\n                movable: true, //是否可以移动\n                zoomable: false, //是否可以缩放\n                rotatable: false, //是否可旋转\n                scalable: false, //是否可翻转\n                transition: false, //使用 CSS3 过度\n                fullscreen: false, //播放时是否全屏\n                keyboard: true, //是否支持键盘\n                url: 'data-source',\n                viewed: function (e) {\n                    // 索引为 1 的图片旋转20度\n                    if (e.detail.index === 1) {\n                        this.viewer.rotate(20)\n                    }\n                }\n            })\n        },\n        handleDeleteFile (row) {\n            this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    api.deleteFile({ fileCode: row.fileCode }).then(res => {\n                        if (res.status == 204) {\n                            this.getSubList()\n                            this.$message({\n                                title: '成功',\n                                message: '删除成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        }\n                    })\n                })\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n        },\n        handleDownloadFile (row) {\n            api.download(row.readName).then(res => {\n                var blob = new Blob([res.data], {\n                    type:\n                        'application/vnd.openxmlformats-officedocument.wordprocessingml.document;charset=utf-8'\n                }) //application/vnd.openxmlformats-officedocument.wordprocessingml.document这里表示doc类型\n                var contentDisposition = res.headers['content-disposition'] //从response的headers中获取filename, 后端response.setHeader(\"Content-disposition\", \"attachment; filename=xxxx.docx\") 设置的文件名;\n                let filename = contentDisposition.substring(\n                    contentDisposition.indexOf('=') + 1\n                )\n                var downloadElement = document.createElement('a')\n                var href = window.URL.createObjectURL(blob) //创建下载的链接\n                downloadElement.style.display = 'none'\n                downloadElement.href = href\n                downloadElement.download = filename //下载后文件名\n                document.body.appendChild(downloadElement)\n                downloadElement.click() //点击下载\n                document.body.removeChild(downloadElement) //下载完成移除元素\n                window.URL.revokeObjectURL(href) //释放掉blob对象\n            })\n        }\n    }\n}\n",null]}