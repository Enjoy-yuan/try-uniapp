{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/PM/gatewayProducts/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/PM/gatewayProducts/main.vue","mtime":1596611178241},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from \"@/api/project/iot/PM/gatewayProducts\"\nimport Pagination from \"@/components/Pagination\"\nimport { mapState } from 'vuex'\nimport throttle from 'lodash/throttle'\nexport default {\n    name: \"GPMain\",\n    components: { Pagination },\n    computed: {\n        ...mapState({\n            iot_authentication: state => state.iotDict.iot_authentication,\n            iot_data_format: state => state.iotDict.iot_data_format,\n            iot_node_type: state => state.iotDict.iot_node_type\n        })\n    },\n    data () {\n        return {\n            theight: 0,//表格高度\n            listLoading: false,\n            list: null,\n            total: 0,\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15,\n                gatewayName: undefined\n            },\n            temp: {\n                gatewayCode: undefined,\n                gatewayName: undefined,\n                authentication: undefined,\n                dataFormat: undefined,\n                nodeType: undefined,\n                isTls: 0,\n                remark: undefined\n            },\n            rules: {\n                gatewayCode: [\n                    {\n                        required: true,\n                        message: '网关产品编码不能为空',\n                        trigger: 'blur'\n                    },\n                    {\n                        pattern: /^[a-zA-Z0-9]{0,32}$/,\n                        message: '由大小写字母、数字组成，长度为32',\n                        trigger: 'blur'\n                    }\n                ],\n                gatewayName: [\n                    {\n                        required: true,\n                        message: '网关产品名称不能为空',\n                        trigger: 'blur'\n                    },\n                    { max: 100, message: '长度不能超过100', trigger: 'blur' },\n                    {\n                        pattern: /^[\\u4e00-\\u9fa5a-zA-Z0-9]{0,32}$/,\n                        message: '由大写字母、数字及中文组成',\n                        trigger: 'blur'\n                    }\n                ],\n                authentication: [\n                    {\n                        required: true,\n                        message: '请选择认证方式',\n                        trigger: 'change'\n                    }\n                ],\n                dataFormat: [\n                    {\n                        required: true,\n                        message: '请选择数据格式',\n                        trigger: 'change'\n                    }\n                ],\n                nodeType: [\n                    {\n                        required: true,\n                        message: '请选择节点类型',\n                        trigger: 'change'\n                    }\n                ],\n                remark: [\n                    {\n                        max: 100,\n                        message: '长度不大于100字',\n                        trigger: 'blur'\n                    }\n                ]\n            },\n            dialogFormVisible: undefined,\n            currentSelectedRow: null,//当前选中的行\n            selectedRows: null,//多选时选中的所有行\n            tableKey: 0 //表格索引\n        }\n    },\n    mounted () {\n        this.setTableHeight()\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n    },\n    methods: {\n        //获取表格数据\n        getList () {\n            this.listLoading = true\n            api.queryRecords(this.listQuery).then(response => {\n                this.list = response.data.list\n                this.total = response.data.pages.count\n                let options = [this.iot_authentication, this.iot_data_format, this.iot_node_type]\n                this.list = this.$myFun.srmCodeToName(\n                    this.list,\n                    options,\n                    ['authentication', 'dataFormat', 'nodeType']\n                )\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n        },\n        //表格查询\n        handleQuery: throttle(\n            function () {\n                this.listQuery.currentPage = 1\n                this.getList()\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        toInfo (code) {\n            this.$emit('setCode', code)\n            this.$emit('setPage', 'info')\n        },\n        //新增按钮单击事件方法\n        handleCreate () {\n            this.reTemp()\n            this.dialogFormVisible = true\n        },\n        create: throttle(\n            function () {\n                this.$refs.tempRef.validate(valid => {\n                    if (valid) {\n                        api.addRecord(this.temp).then(() => {\n                            this.getList()\n                            this.dialogFormVisible = false\n                            this.reTemp()\n                            this.$notify({\n                                title: '成功',\n                                message: '新增成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    } else {\n                        return false\n                    }\n                })\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        //删除按钮单击事件方法\n        handleDelete (code) {\n            this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    api.deleteRecord(code).then(() => {\n                        this.getList()\n                        this.$message({\n                            title: '成功',\n                            message: '删除成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    }).catch(() => {\n                        this.getList()\n                    })\n                })\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        reTemp () {\n            this.temp = {\n                gatewayCode: undefined,\n                gatewayName: undefined,\n                authentication: undefined,\n                dataFormat: undefined,\n                nodeType: undefined,\n                isTls: 0,\n                remark: undefined\n            }\n        }\n    }\n};\n",null]}