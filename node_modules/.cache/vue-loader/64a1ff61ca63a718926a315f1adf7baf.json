{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTRW/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTRW/index.vue","mtime":1598577833757},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport getPageTitle from '@/utils/getPageName'\nimport { queryProjects } from \"@/api/project/iot/IOT/project\"\nimport { queryDeviceBind, updateAllDeliver } from \"@/api/project/iot/IOT/db\"\nimport timeData from \"./RWTabs/timeData\"\nimport warningEvents from \"./RWTabs/warningEvents\"\nimport accountInfo from \"./RWTabs/accountInfo\"\nexport default {\n    name: \"IOTRW\",\n    components: { timeData, warningEvents, accountInfo },\n    watch: {\n        '$route.params' (newval) {\n            if (newval && newval.code) {\n                if (this.code !== newval.code) {\n                    this.pages = 'main'\n                    this.code = newval.code\n                }\n            } else {\n                this.getProject()\n            }\n        },\n        name (val) {\n            let arr = this.list.filter(res => {\n                return res.deviceName == val\n            })\n            this.itemData = arr[0]\n        },\n        projectList (val) {\n            if (!this.code) {\n                this.code = val[0].projectCode\n                this.getList()\n            }\n        },\n        code (val) {\n            if (val) {\n                this.getList()\n            }\n        }\n    },\n    data () {\n        return {\n            code: this.$route.params.code, //一级页面项目编码\n            title: getPageTitle(this.$route.name),\n            projectList: null,\n            list: null,\n            activeName: 'timeData',\n            name: undefined,\n            itemData: undefined,\n            subList: null,\n            optionData: null,\n            expandedKeys: null,//默认展开\n            checkedKeys: null,// 默认勾选\n            info: undefined,\n            props: {\n                rowId: 'rowId',\n                label: 'deviceName',\n                children: 'children'\n            }\n        }\n    },\n    created () {\n        this.$store.dispatch('iotDict/getDicData', ['iot_attribute_type', 'iot_nameplate_state', 'iot_state'])\n        this.getProject()\n    },\n    methods: {\n        stateClass (state) {\n            if (state == '0') {\n                return 'iot-success'\n            } else if (state == '1') {\n                return 'iot-success'\n            } else if (state == '2') {\n                return 'iot-success'\n            }\n        },\n        // 获取项目\n        getProject () {\n            queryProjects().then(res => {\n                this.projectList = res.data\n            })\n        },\n        //获取表格数据\n        getList () {\n            queryDeviceBind(this.code).then(response => {\n                this.list = response.data\n                let treeData = this.buildTree(\n                    response.data,\n                    'rowId',\n                    'parentId'\n                )\n                this.expandedKeys = treeData.expandedKeys\n                this.checkedKeys = treeData.checkedKeys\n                this.optionData = treeData.tree\n                this.info = treeData.info\n                this.name = treeData.checkedKeyName\n            })\n        },\n        // 获取选中的节点\n        getCurrentNode (val) {\n            this.$refs.selectTree.setCheckedKeys([val.rowId])\n            this.name = val[this.props.label]\n            this.info = val.tipLanguage\n        },\n        // 点击节点时候\n        nodeClick (val) {\n            if (val.parentId) {\n                this.$refs.selectTree.setCheckedKeys([val.rowId])\n                this.name = val[this.props.label]\n                this.info = val.tipLanguage\n            } else {\n                return\n            }\n        },\n        // 获取实时数据需要批量交付的数据\n        getSubList (data) {\n            this.subList = data\n        },\n        handleCreate () {\n            this.$confirm('此操作将交付全部数据, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    let list = this.subList.filter(i => {\n                        return i.deliveryState == '未交付'\n                    })\n                    let data = list.map(i => {\n                        return i.pointCode\n                    })\n                    updateAllDeliver(this.code, this.itemData.gatewayCode, this.itemData.deviceCode, data).then(() => {\n                        this.$refs.timeData.getList()\n                        this.$message({\n                            title: '成功',\n                            message: '交付成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n\n                })\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消交付'\n                    })\n                })\n        },\n        buildTree: (array, id, parent_id) => {\n            let isExpandedKey = true\n            let isCheckedKeys = true\n            let info = undefined\n            // 创建临时对象\n            let temp = {}\n            // 创建需要返回的树形对象\n            let tree = []\n            let expandedKeys = []\n            let checkedKeys = []\n            let checkedKeyName = undefined\n            // 先遍历数组，将数组的每一项添加到temp对象中\n            for (let i in array) {\n                temp[array[i][id]] = array[i]\n            }\n            // 遍历temp对象，将当前子节点与父节点建立连接\n            for (let i in temp) {\n                // 判断是否是根节点下的项\n                if (temp[i][parent_id]) {\n                    if (!temp[temp[i][parent_id]].children) {\n                        temp[temp[i][parent_id]].children = []\n                    }\n                    if (isCheckedKeys) {\n                        checkedKeys.push(temp[i].rowId)\n                        checkedKeyName = temp[i].deviceName\n                        info = temp[i].tipLanguage\n                        expandedKeys.push(temp[i].rowId)\n                        isCheckedKeys = !isCheckedKeys\n                    }\n                    temp[temp[i][parent_id]].children.push(temp[i])\n                } else {\n                    let parTemp = temp[i]\n                    parTemp.deviceName = temp[i].gatewayName\n                    parTemp.disabled = true //禁用\n                    if (isExpandedKey) {\n                        expandedKeys.push(temp[i].rowId)\n                        isExpandedKey = !isExpandedKey\n                    }\n\n                    tree.push(parTemp)\n                }\n            }\n            let treeData = {\n                expandedKeys,\n                checkedKeys,\n                tree,\n                checkedKeyName,\n                info\n            }\n            return treeData\n        }\n    },\n};\n",null]}