{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTEM/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/IOT/IOT/IOTEM/main.vue","mtime":1599136050731},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from \"@/api/project/iot/IOT/em\"\nimport Pagination from \"@/components/Pagination\"\nimport throttle from 'lodash/throttle'\nimport deviceTypeSelect from '@/components/Select/deviceTypeSelect'\nimport attributeSelect from '@/components/Select/attributeSelect'\nimport { mapState } from 'vuex'\nexport default {\n    name: \"EMMain\",\n    props: ['code', 'manufacturersList', 'projectList'],\n    components: { Pagination, deviceTypeSelect, attributeSelect },\n    computed: {\n        ...mapState({\n            iot_state_device: state => state.iotDict.iot_state_device,\n            iot_attribute_type: state => state.iotDict.iot_attribute_type\n        })\n    },\n    watch: {\n        projectList (val) {\n            if (!this.projectCode) {\n                this.projectCode = val[0].projectCode\n                this.getList()\n            }\n        },\n        code (val) {\n            if (val) {\n                this.projectCode = val\n                this.getList()\n            }\n        }\n    },\n    data () {\n        return {\n            listLoading: false,\n            theight: 0,//表格高度\n            isSingle: true,//表格是否单选 点击各按钮根据流程逻辑控制单多选\n            list: [],\n            total: 0,\n            projectCode: this.code,\n            listQuery: {\n                page: true,\n                currentPage: 1,\n                pageSize: 15,\n                deviceName: undefined\n            },\n            temp: {\n                deviceCode: undefined,\n                deviceName: undefined,\n                brand: undefined,\n                typeCode: undefined,\n                manufacturersCode: undefined,\n                modelNumber: undefined,\n                leaveFactoryDate: undefined,\n                remark: undefined,\n                deviceCollectList: null,\n            },\n            rules: {\n                typeCode: [\n                    {\n                        required: true,\n                        message: '请选择设备类型',\n                        trigger: 'change'\n                    }\n                ],\n                deviceCode: [\n                    {\n                        required: true,\n                        message: '设备编码不能为空',\n                        trigger: 'blur'\n                    },\n                    {\n                        pattern: /^[a-zA-Z0-9]{0,32}$/,\n                        message: '由大小写字母、数字组成，长度为32',\n                        trigger: 'blur'\n                    }\n                ],\n                deviceName: [\n                    {\n                        required: true,\n                        message: '设备名称不能为空',\n                        trigger: 'blur'\n                    },\n                    { max: 100, message: '长度不能超过100', trigger: 'blur' },\n                    {\n                        pattern: /^[a-zA-Z0-9#\\u4e00-\\u9fa5]+$/,\n                        message: '支持大小写中英文及#符号',\n                        trigger: 'blur'\n                    }\n                ],\n                manufacturersCode: [\n                    {\n                        message: '请选择设备厂商',\n                        trigger: 'change'\n                    }\n                ],\n                leaveFactoryDate: [\n                    {\n                        message: '请选择生产日期',\n                        trigger: ['change', 'blur']\n                    }\n                ],\n                brand: [\n                    {\n                        message: '请选择设备品牌',\n                        trigger: ['change', 'blur']\n                    }\n                ],\n                modelNumber: [\n                    {\n                        message: '请选择设备品牌',\n                        trigger: ['change', 'blur']\n                    }\n                ]\n            },\n            deviceVal: undefined,\n            attributeList: null,\n            dialogFormVisible: false,\n            dialogFormVisibleDevice: false,\n            dialogFormVisibleAttribute: false,\n            currentSelectedRow: null,//当前选中的行\n            selectedRows: null,//多选时选中的所有行\n            tableKey: 0 //表格索引\n        }\n    },\n    mounted () {\n        this.setTableHeight()\n        //表格高度自适应\n        window.onresize = () => {\n            this.setTableHeight()\n        }\n        this.getList()\n    },\n    methods: {\n        stateClass (state) {\n            if (state == '0') {\n                return 'iot-warning'\n            } else if (state == '1') {\n                return 'iot-success'\n            } else if (state == '2') {\n                return 'iot-info'\n            }\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        toInfo (row) {\n            this.$emit('setCode', row.projectCode)\n            this.$emit('setRow', row)\n            this.$emit('setPage', 'EM-Info')\n        },\n        //获取表格数据\n        getList () {\n            this.listLoading = true\n            api.queryProjectCodes(this.projectCode, this.listQuery).then(response => {\n                this.list = response.data.list\n                let options = [this.iot_state_device]\n                this.list = this.$myFun.srmCodeToName(\n                    response.data.list,\n                    options,\n                    ['iotState']\n                )\n                if (response.data.list && this.manufacturersList) {\n                    for (let i = 0; i < response.data.list.length; i++) {\n                        for (let j = 0; j < this.manufacturersList.length; j++) {\n                            if (response.data.list[i].manufacturersCode == this.manufacturersList[j].manufacturersCode) {\n                                response.data.list[i].manufacturersName = this.manufacturersList[j].manufacturersName\n                                break\n                            }\n                        }\n                    }\n                }\n\n                this.total = response.data.pages.count\n                setTimeout(() => {\n                    this.listLoading = false\n                }, 1.5 * 100)\n            })\n        },\n        //表格查询\n        handleQuery: throttle(\n            function () {\n                this.listQuery.currentPage = 1\n                this.getList()\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        //新增按钮单击事件方法\n        handleCreate () {\n            this.dialogFormVisible = true\n        },\n        // 下一步\n        nextStep () {\n            this.$refs.tempRef.validate(valid => {\n                if (valid) {\n                    this.dialogFormVisibleAttribute = true\n                } else {\n                    return false\n                }\n            })\n        },\n        create: throttle(\n            function () {\n                this.$refs.tempRef.validate(valid => {\n                    if (valid) {\n                        if (!this.attributeList || !this.attributeList.length) {\n                            return this.$message({\n                                title: this.$t('message.warning'),\n                                message: \"请选择属性\",\n                                type: \"warning\"\n                            })\n                        }\n                        this.temp.deviceCollectList = this.attributeList\n                        api.addProjectCode(this.projectCode, this.temp).then(() => {\n                            this.getList()\n                            this.dialogFormVisibleAttribute = false\n                            this.dialogFormVisible = false\n                            this.resTemp()\n                            this.$notify({\n                                title: '成功',\n                                message: '新增成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                    } else {\n                        return false\n                    }\n                })\n            },\n            2000,\n            {\n                leading: true,\n                trailing: false\n            }\n        ),\n        //删除按钮单击事件方法\n        handleDelete (deviceCode, iotState) {\n            if (iotState != '2') {\n                return this.$message({\n                    title: this.$t('message.warning'),\n                    message: \"当前设备已物联,不能删除！\",\n                    type: \"warning\"\n                })\n            }\n            this.$confirm('此操作将删除所选中数据, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            })\n                .then(() => {\n                    api.deleteProjectCode(this.projectCode, deviceCode).then(() => {\n                        this.getList()\n                        this.$message({\n                            title: '成功',\n                            message: '删除成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    }).catch(() => {\n                        this.getList()\n                    })\n                })\n                .catch(() => {\n                    this.$message({\n                        type: 'info',\n                        message: '已取消删除'\n                    })\n                })\n        },\n        handleDeviceType () {\n            this.temp.typeCode = this.deviceVal ? this.deviceVal.typeCode : undefined\n            this.temp.typeName = this.deviceVal ? this.deviceVal.typeName : undefined\n            this.dialogFormVisibleDevice = false\n        },\n        getDeviceType (val) {\n            this.deviceVal = val\n        },\n        getAttribute (val) {\n            this.attributeList = val\n        },\n        resTemp () {\n            this.temp = {}\n        }\n    }\n};\n",null]}