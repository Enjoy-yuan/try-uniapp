{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierSelection/supplierRFQ/supplierRFQAnswer/tab/tabBZcost.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/SRM/supplierSelection/supplierRFQ/supplierRFQAnswer/tab/tabBZcost.vue","mtime":1599136050910},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { queryQuoteItem, createQuoteItem, updateQuoteItem, deleteQuoteItem, queryQuoteDetails } from \"@/api/project/srm/supplierSelect/supplierRFQ/supplierRFQAnswer\"\nimport { mapState } from 'vuex'\nexport default {\n    name: 'tabBZcost',\n    props: ['parentRowId'],\n    data () {\n        return {\n            tableData: [],\n            rules: {\n                packingName: [\n                    { required: true, message: '请填写', trigger: 'blur' }\n                ],\n                sizeSpecification: [\n                    { required: true, message: '请填写', trigger: 'blur' }\n                ]\n            },\n            formData: {\n                parentRowId: null,\n                rowId: null,\n                packingType: null,\n                packingName: null,\n                sizeSpecification: null,\n                packingMaterial: null,\n                unitPrice: null,\n                packingPerNumber: null,\n                packingQuantity: null,\n                totalPackingCost: null,\n                serviceLife: null,\n                annualMaintenanceCost: null,\n                annualAllocatedQuantity: null,\n                singlePartCost: null\n            },\n            //不可回收PDL1 可回收PDL0\n            formConfig: [\n                { type: 'dictSelect', dType: 'dt_srm_pdl', required: true, label: '包装类型', prop: 'packingType', width: '' },//dictType wu\n                { type: 'commonInput', required: true, label: '包装名称', prop: 'packingName', width: '' },\n                { type: 'commonInput', required: true, label: '尺寸规格', prop: 'sizeSpecification', width: '' },\n                { type: 'commonInput', label: '包装材质', prop: 'packingMaterial', width: '' },\n                { type: 'commonInput', label: '单价', prop: 'unitPrice', width: '' },//H1  H4\n                { type: 'commonInput', label: '每包件数', prop: 'packingPerNumber', width: '' },//H2\n                { type: 'commonInput', label: '包装数量', prop: 'packingQuantity', width: '' },//   H5\n                { type: 'commonInput', disabled: true, label: '包装总费用', prop: 'totalPackingCost', width: '' },//   H6  H4*H5\n                { type: 'commonInput', label: '使用年限', prop: 'serviceLife', width: '' },//H7\n                { type: 'commonInput', label: '年维护费', prop: 'annualMaintenanceCost', width: '' },//H8\n                { type: 'commonInput', label: '年分摊数量', prop: 'annualAllocatedQuantity', width: '' },//H3=H2/H1 H9\n                { type: 'commonInput', disabled: true, label: '单零件成本', prop: 'singlePartCost', width: '' }//H3=H2/H1  H10=(H6+H7*H8)/H7/H9\n            ],\n            tableConfig: [\n                { label: '包装类型', prop: 'packingTypeCN', align: 'center', width: 'auto' },\n                { label: '包装名称', prop: 'packingName', align: 'center', width: 'auto' },\n                { label: '包装尺寸规格', prop: 'sizeSpecification', align: 'center', width: 'auto' },\n                { label: '包装材质', prop: 'packingMaterial', align: 'center', width: 'auto' },\n                { label: '单价', prop: 'unitPrice', align: 'center', width: 'auto' },\n                { label: '每包件数', prop: 'packingPerNumber', align: 'center', width: 'auto' },\n                { label: '包装数量', prop: 'packingQuantity', align: 'center', width: 'auto' },\n                { label: '包装总费用', prop: 'totalPackingCost', align: 'center', width: 'auto' },\n                { label: '使用年限', prop: 'serviceLife', align: 'center', width: 'auto' },\n                { label: '年维修费用', prop: 'annualMaintenanceCost', align: 'center', width: 'auto' },\n                { label: '年分摊数量', prop: 'annualAllocatedQuantity', align: 'center', width: 'auto' },\n                { label: '单零件成本', prop: 'singlePartCost', align: 'center', width: 'auto' },\n                { label: '备注', prop: 'remark', align: 'center', width: 'auto' }//wu\n            ]\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_srm_pdl: state => state.dict.dt_srm_pdl\n        })\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\"dt_srm_pdl\"])\n        this.getItems()\n    },\n    watch: {\n        'formData.unitPrice' () {\n            this.calculate('unitPrice', this.formData)\n        },\n        'formData.packingPerNumber' () {\n            this.calculate('packingPerNumber', this.formData)\n        },\n        'formData.packingQuantity' () {\n            this.calculate('packingQuantity', this.formData)\n        },\n        'formData.serviceLife' () {\n            this.calculate('serviceLife', this.formData)\n        },\n        'formData.annualMaintenanceCost' () {\n            this.calculate('annualMaintenanceCost', this.formData)\n        },\n        'formData.totalPackingCost' () {\n            this.calculate('totalPackingCost', this.formData)\n        },\n        'formData.annualAllocatedQuantity' () {\n            this.calculate('annualAllocatedQuantity', this.formData)\n        }\n    },\n    methods: {\n        calculate (prop, row, index = null) {\n            if (row.packingType === 'PDL1') {\n                switch (prop) {\n                    case 'unitPrice': case 'packingPerNumber': {\n                        if (!index) {\n                            this.$set(this.formData, 'singlePartCost', (row.packingPerNumber / row.unitPrice).toFixed(4))\n                        } else {\n                            this.$set(this.tableData[index], 'singlePartCost', (row.packingPerNumber / row.unitPrice).toFixed(4))\n                        }\n                        break\n                    }\n                }\n            } else if (row.packingType === 'PDL0') {\n                switch (prop) {\n                    case 'unitPrice': case 'packingQuantity': {\n                        if (!index) {\n                            this.$set(this.formData, 'totalPackingCost', (row.unitPrice * row.packingQuantity).toFixed(4))\n                        } else {\n                            this.$set(this.tableData[index], 'totalPackingCost', (row.unitPrice * row.packingQuantity).toFixed(4))\n                        }\n                        break\n                    }\n                    case 'totalPackingCost': case 'serviceLife': case 'annualMaintenanceCost': case 'annualAllocatedQuantity': {\n                        if (!index) {\n                            this.$set(this.formData, 'singlePartCost', ((row.totalPackingCost + row.serviceLife * row.annualMaintenanceCost) / row.serviceLife / row.annualAllocatedQuantity).toFixed(4))\n                        } else {\n                            this.$set(this.tableData[index], 'singlePartCost', ((row.totalPackingCost + row.serviceLife * row.annualMaintenanceCost) / row.serviceLife / row.annualAllocatedQuantity).toFixed(4))\n                        }\n                        break\n                    }\n                }\n            }\n        },\n        getItems () {\n            if (this.parentRowId) {\n                queryQuoteDetails({ parentRowId: this.parentRowId, method: 'PACKING_COST' }).then(res => {\n                    let options = [this.dt_srm_pdl]\n                    res.data = this.$myFun.codeToName(res.data, options, ['packingType'])\n                    this.tableData = res.data\n                    this.calculateSum()\n                })\n            }\n        },\n        calculateSum () {\n            let singlePartCosts = 0\n\n            this.tableData.forEach(item => {\n                singlePartCosts += item.singlePartCost\n            })\n\n            let dataSum = { key: 'sum', packingTypeCN: '合计', singlePartCost: singlePartCosts }\n            this.tableData.push(dataSum)\n        },\n        handleUpdate (row) {\n            queryQuoteItem({ rowId: row.rowId, method: 'PACKING_COST' }).then(res => {\n                this.formData = res.data\n            })\n        },\n        handleDelete (row) {\n            this.$confirm('确认删除吗?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(() => {\n                deleteQuoteItem({ parentRowId: this.parentRowId, rowId: row.rowId, method: 'PACKING_COST' }).then(() => {\n                    this.getItems()\n                    this.$emit('getTotalQuotation')\n                })\n            }).catch(() => {\n                this.$message({\n                    type: 'info',\n                    message: '已取消'\n                })\n            })\n        },\n        resetForm () {\n            for (let par in this.formData) {\n                if (par !== 'parentRowId') {\n                    this.$set(this.formData, par, null)\n                }\n            }\n            this.$refs['refForm'].resetFields()\n            this.$refs['refForm'].clearValidate()\n        },\n        handleConfirm () {\n            this.$refs.refForm.validate((valid) => {\n                if (valid) {\n                    this.$confirm('确认保存吗?', '提示', {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning'\n                    }).then(() => {\n                        //packingCostDTO\t包装费用 DTO(PACKING_COST)\n                        this.formData.parentRowId = this.parentRowId\n                        if (this.formData.rowId) {\n                            let cdata = {\n                                packingCostDTO: this.formData,\n                                method: \"PACKING_COST\"\n                            }\n                            updateQuoteItem(this.formData.rowId, cdata).then(() => {\n                                this.getItems()\n                                this.$message({\n                                    type: 'success',\n                                    message: '编辑成功'\n                                })\n                                this.$emit('getTotalQuotation')\n                                this.resetForm()\n                            })\n                        } else {\n                            let cdata = {\n                                packingCostDTO: this.formData,\n                                method: \"PACKING_COST\"\n                            }\n                            createQuoteItem(cdata).then(() => {\n                                this.getItems()\n                                this.$emit('getTotalQuotation')\n                                this.resetForm()\n                                this.$message({\n                                    type: 'success',\n                                    message: '新增成功'\n                                })\n                            })\n                        }\n                    }).catch(() => {\n                        this.$message({\n                            type: 'info',\n                            message: '已取消'\n                        })\n                    })\n                }\n            })\n        }\n    }\n}\n",null]}