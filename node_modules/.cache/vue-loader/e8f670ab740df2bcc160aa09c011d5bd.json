{"remainingRequest":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuan/Documents/大唐广电/dt-web/src/views/project/WMS/stock/stocksearch/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuan/Documents/大唐广电/dt-web/src/views/project/WMS/stock/stocksearch/index.vue","mtime":1596610934208},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuan/Documents/大唐广电/dt-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\" // Secondary package based on el-pagination\nimport { DICT_CODE, DT_ORG_FUNCTION, DT_ORG_TYPE } from \"@/utils/constant\"\nimport * as api from \"@/api/project/wms/stock/stocksearch\"\nimport AuthoType from \"@/components/Select/AuthoType.vue\" //权限类型下拉组件\nimport { mapState } from 'vuex'\nimport * as api1 from \"@/api/project/wms/productionMaterial/pullerStorage\"\nimport { parseTime } from '@/utils'\nexport default {\n    name: \"stocksearch\",\n    components: {\n        Pagination,\n        AuthoType,\n    },\n    data () {\n        return {\n            tableKey: 0,\n            listLoading: true,\n            theight: 0,\n            DICT_CODE: DICT_CODE,\n            DT_ORG_FUNCTION: DT_ORG_FUNCTION,\n            DT_ORG_TYPE: DT_ORG_TYPE,\n            list: null,\n            total: 0,\n            areaList: null,\n            locatorList: null,\n            sum: null,\n            listQuery: {\n                currentPage: 1,\n                pageSize: 15,\n                page: 1,\n                employeeCode: undefined,\n                employeeName: undefined,\n                domainScope: undefined\n            },\n            temp: {\n                customerCode: undefined,\n                customerName: undefined,\n                orgCode: undefined,\n                warehouseCode: undefined,\n                purchaseName: undefined\n            },\n            pvData: [],\n            defaultProps: {\n                children: \"children\",\n                label: \"organizationName\"\n            },\n            contentStyleObj: {\n                height: \"\"\n            },\n            downloadLoading: false\n        }\n    },\n    computed: {\n        ...mapState({\n            dt_stock_type: state => state.dict.dt_stock_type,\n            dt_stock_status: state => state.dict.dt_stock_status\n        }),\n    },\n    mounted () {\n        this.$store.dispatch(\"dict/getDicData\", [\n            \"dt_stock_type\",\n            \"dt_stock_status\"\n        ])\n        this.setTableHeight()\n    },\n    created () {\n        this.getList()\n    },\n    methods: {\n        getList () {//查询\n            api.queryRecords(this.listQuery).then(res => {\n                this.list = res.data.list\n                this.list.forEach((item, index) => {\n                    item.rowId = (this.listQuery.currentPage - 1) * this.listQuery.pageSize + index + 1\n                })\n                this.total = res.data.pages.count\n            })\n        },\n        //表格高度计算\n        setTableHeight () {\n            this.theight = this.$myFun.getSingleTbHeight()\n        },\n        getSummaries (param) {\n            const { columns, data } = param\n            const sums = []\n            columns.forEach((column, index) => {\n                if (index === 0) {\n                    sums[index] = '总计'\n                    return\n                }\n                if (data) {\n                    const values = data.map(item => Number(item[column.property]))\n                    if (!values.every(value => isNaN(value))) {\n                        sums[index] = values.reduce((prev, curr) => {\n                            const value = Number(curr)\n                            if (!isNaN(value)) {\n                                return prev + curr\n                            } else {\n                                return prev\n                            }\n                        }, 0)\n                        sums[index] += ''\n                    } else {\n                        sums[index] = 'N/A'\n                    }\n                }\n            })\n            return sums\n        },\n        getArea () {\n            api1.getArea(this.listQuery.warehouseCode).then(resa => {\n                this.areaList = resa.data\n            })\n        },\n        getLocatorList () {\n            api1.getLocator(this.listQuery.warehouseCode, this.listQuery.wareAreaCode).then(res => {\n                this.locatorList = res.data\n                this.$set(this.listQuery, 'wareLocationCode', res[0].locationCode)\n            })\n        },\n        handleDownload () {\n            this.downloadLoading = true\n            import('@/vendor/Export2Excel').then(excel => {\n                const tHeader = [\n                    '序号', '物料编码', '仓库',\n                    '仓库名称', '区位', '区位名称',\n                    '储位', '储位名称', '批次',\n                    '库存状态', '库存类型', '期初',\n                    '入库', '出库', '盘盈',\n                    '盘亏', '结存',\n                ]\n                const filterVal = [\n                    'rowId', 'materielCode', 'warehouseCode',\n                    'warehouseName', 'wareAreaNo', 'areaName',\n                    'wareLocationNo', 'locationName', 'batchNo',\n                    'state', 'materielType',\n                    'qcStandbyNum', 'input', 'out',\n                    'inventoryProfit', 'inventoryLosses', 'stockNum',\n                ]\n                const data = this.formatJson(filterVal, this.list)\n                excel.export_json_to_excel({\n                    header: tHeader,\n                    data,\n                    filename: 'table-list'\n                })\n                this.downloadLoading = false\n            })\n        },\n        formatJson (filterVal, jsonData) {\n            return jsonData.map(v => filterVal.map(j => {\n                if (j === 'timestamp') {\n                    return parseTime(v[j])\n                } else {\n                    return v[j]\n                }\n            }))\n        },\n        handleQuery () {\n            this.listQuery.currentPage = 1\n            this.getList()\n        }\n    }\n};\n",null]}